{"version":1,"ops":[{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1602522273,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcwNzIzODk3MA==","github-url":"https://github.com/DFHack/dfhack/issues/1671#issuecomment-707238970"},"message":"Does the `/opt/dwarffortress/data/save/DeepDeep` folder exist? Do you have permission to write to it (or any of its parents)? Did you install DF/DFHack through a package manager?","files":null},{"type":6,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1602522273,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDA2MTAxMTM4"},"target":"441ba9ee58a493d00d41f9b69edd5e58ac29a646af5642bd52ab8246f8c3f862","message":"Does the `/opt/dwarffortress/data/save/DeepDeep` folder exist (if not, which of its parents exist, if any)? Do you have permission to write to it (or any of its parents)? Did you install DF/DFHack through a package manager?","files":null},{"type":3,"author":{"id":"c8bdff833a0d45e9a1c07751adfd0917db2f83d1"},"timestamp":1602532146,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcwNzMxMzE4OA==","github-url":"https://github.com/DFHack/dfhack/issues/1671#issuecomment-707313188"},"message":"no. I have dwarffortress install at `~/.dwarffortress` directory. I have full permissions to folders inside.\nmy save is in `~/.dwarffortress/data/save/DeepDeep`.\nI used package manager to install dfhack.\nI missed the broken path before. I will check what's going on, maybe I have double installation or something. Willl let you know here.","files":null},{"type":3,"author":{"id":"c8bdff833a0d45e9a1c07751adfd0917db2f83d1"},"timestamp":1602533089,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcwNzMxOTg1OA==","github-url":"https://github.com/DFHack/dfhack/issues/1671#issuecomment-707319858"},"message":"ok. I am on linux arch OS and I used `yay` package manager (it's overlay app on classic arch `pacman` package manager).\nI see now that `dfhack` and `Dwarf_Fortress` is installed in `/opt/dwarffortress/...` directory. \nbut dwarffortress saves are localed in user directory `~/.dwarffortress`. \n\nIn the same folder there are symlinks to all needed files:\n```bash\n# ls -l ~/.dwarffortress\ndfhack -\u003e /opt/dwarffortress/dfhack\ndfhack-run -\u003e /opt/dwarffortress/dfhack-run\nhack -\u003e /opt/dwarffortress/hack\nlibs -\u003e /opt/dwarffortress/libs\nraw -\u003e /opt/dwarffortress/raw\nstonesense -\u003e /opt/dwarffortress/stonesense\n# ... and more\n```\n\nbut `data` directory (where saves are stored) are only in `~/.dwarffortress/data` directory. it is not located in `/opt/dwarffortress`.\n\nI just fixed the problem by creating a symlink:\n`sudo ln -s ~/.dwarffortress/data/save /opt/dwarffortress/data/save`\nand it helped, but it's quite nasty in my opinion.\n\nI am not sure if other linux users have same problem, or it just specific issues with arch package manager installation.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1602539708,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcwNzM2NTI4Mg==","github-url":"https://github.com/DFHack/dfhack/issues/1671#issuecomment-707365282"},"message":"Interesting. Just to make sure there aren't any other symlinks in play, does `realpath /opt/dwarffortress/libs/Dwarf_Fortress` print `/opt/dwarffortress/libs/Dwarf_Fortress` or something else?\n\nTo my knowledge, DF always looks for saves in the data/save folder relative to itself (on Linux, relative to the libs folder). I am genuinely not sure how this could work without the symlink you created. Lots of things in DFHack calculate the save path in the same way, so I would try reporting this to the Arch package maintainer - I suspect the symlink you made is necessary.","files":null},{"type":6,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1602539708,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDA2MTU4MTQ4"},"target":"1170e0bd0e31e52d852003d95000b58ef5720fc15e300b1336e3777d82badaec","message":"Interesting. Just to make sure there aren't any other symlinks in play, does `realpath /opt/dwarffortress/libs/Dwarf_Fortress` print `/opt/dwarffortress/libs/Dwarf_Fortress` or something else?\n\nTo my knowledge, DF always looks for saves in the data/save folder relative to itself (on Linux, relative to the libs folder). I am genuinely not sure how this could work without the symlink you created. Lots of things in DFHack calculate the save path in the same way, so I would try reporting this to the Arch package maintainer - I suspect the symlink you made (or a similar one for the top-level `data` folder) is necessary.","files":null},{"type":3,"author":{"id":"c8bdff833a0d45e9a1c07751adfd0917db2f83d1"},"timestamp":1602539895,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcwNzM2NjQxOQ==","github-url":"https://github.com/DFHack/dfhack/issues/1671#issuecomment-707366419"},"message":"`realpath /opt/dwarffortress/libs/Dwarf_Fortress` prints `/opt/dwarffortress/libs/Dwarf_Fortress`.\n\nI guess the maintainer goal was to be possible to play dwarffortress by few users with my game installation, but with separated worlds. \n\n\u003e To my knowledge, DF always looks for saves in the data/save folder relative to itself (on Linux, relative to the libs folder). I am genuinely not sure how this could work without the symlink you created.\nSince now I had no problems with raw game, dfhack and soundsense.","files":null},{"type":6,"author":{"id":"c8bdff833a0d45e9a1c07751adfd0917db2f83d1"},"timestamp":1602539895,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDA2MTU4NTg4"},"target":"884bd8591c23364c653fc8bc3aec8da8101b26991ca20a4d1a106dcb602e11e7","message":"`realpath /opt/dwarffortress/libs/Dwarf_Fortress` prints `/opt/dwarffortress/libs/Dwarf_Fortress`.\n\nI guess the maintainer goal was to be possible to play dwarffortress by few users with my game installation, but with separated worlds. \n\n\u003e To my knowledge, DF always looks for saves in the data/save folder relative to itself (on Linux, relative to the libs folder). I am genuinely not sure how this could work without the symlink you created.\n\nSince now I had no problems with raw game, dfhack and soundsense.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1602543944,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcwNzM4ODM3Mg==","github-url":"https://github.com/DFHack/dfhack/issues/1671#issuecomment-707388372"},"message":"On second thought, it's possible that https://github.com/DFHack/dfhack/commit/56e43a0dde023c5a4595a22b29d800153b31e3c4 broke it (this change was first in 0.47.04-r2, which could make sense). Basically, getHackPath() and functions it depends on, like getSavePath(), used to return the current working directory, but now return the directory containing `libs`. This is consistent with other platforms now (and the previous behavior was a bug that interfered with https://github.com/DFHack/scripts/pull/152) but if the Arch package sets the working directory to `~/.dwarffortress` to make DF save there, that's no longer enough for DFHack tools to find the right save path.\n\n@Ziusudra it looks like you're a maintainer of the Arch package, right? I'm not sure what the best way to fix this is, but I'd be happy to make any necessary core changes.","files":null},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1602544730,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDM4Njg2MjU4Njk="},"added":["downstream"],"removed":[]},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1602544741,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDM4Njg2MjYyMDQ="},"added":["internal"],"removed":[]},{"type":3,"author":{"id":"818d3b781b65d3ed34262e1fdd0bb6778a258acb"},"timestamp":1602660875,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcwODIxODk4MQ==","github-url":"https://github.com/DFHack/dfhack/issues/1671#issuecomment-708218981"},"message":"Yes, I'm a co-maintainer. This also causes `exportlegends` to fail unless an absolute path is provided. ([see comments](https://aur.archlinux.org/packages/dfhack/#comment-770203) on the package page.)\n\nYeah, the DF package makes DF multiuser by having the common game files in system folders and the user specific files in ~/.dwarffortress/ along with links to the system files. (That is an official package maintained by someone else.) The dfhack packages attempt to work with that.\n\nThe only things I can think of is an option that the launcher script could invoke to tell dfhack to use the `CWD`. Or for dfhack to check if the `CWD` contains the libs link to what it found for `exe_path` and if it does use `CWD` for `cached_path`.","files":null},{"type":6,"author":{"id":"818d3b781b65d3ed34262e1fdd0bb6778a258acb"},"timestamp":1602660875,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDA2NTMyODM3"},"target":"18db015a4b62e01d04d02ac58a7b1040dfb4425478bd183e9ad4c7f544db10e4","message":"Yes, I'm a co-maintainer. This also causes `exportlegends` to fail unless an absolute path is provided. ([see comments](https://aur.archlinux.org/packages/dfhack/#comment-770203) on the package page.)\n\nYeah, so, the DF package makes DF multiuser by having the common game files in system folders and the user specific files in ~/.dwarffortress/ along with links to the system files. (That is an official package maintained by someone else.) The dfhack packages attempt to work with that.\n\nThe only things I can think of is an option that the launcher script could invoke to tell dfhack to use the `CWD`. Or for dfhack to check if the `CWD` contains the libs link to what it found for `exe_path` and if it does use `CWD` for `cached_path`.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1602723888,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcwODgwODA1NA==","github-url":"https://github.com/DFHack/dfhack/issues/1671#issuecomment-708808054"},"message":"Just to clarify: the DF package works by setting the working directory to ~/.dwarffortress on startup, which causes DF to look there for all of its folders, and the non-writable folders are symlinks to corresponding folders in /opt?\n\nDoes the DFHack package install any actual files in `~/.dwarffortress`, besides symlinks to `/opt`? `dfhack-config` is about the only user-writable folder I can think of, but I'm not sure how best to check the behavior of the package from a non-Arch system.\n\nI think the best thing to do here is to look for user-writable locations (`data/save` and `dfhack-config`) relative to the DF root (`/opt/dwarffortress` in this case), then in the current directory (`~/.dwarffortress`) if they don't exist in the DF root. This would minimize the risk of breaking existing installations where everything is in just one folder. Would this work, or do the Arch packages also set up corresponding folders in /opt? It sounds like `/opt/dwarffortress/data/save` does _not_ exist, which is good, but I'm not sure about `/opt/dwarffortress/dfhack-config` or others.\n\nSorry about the number of questions - I think I have a good idea of how to do this if my assumptions are correct. There are a relatively small number of places in DFHack that deal with user-writable folders currently, but none of them are quite the same (Core.cpp alone has 3 different ways of finding a save folder!) so there is some risk here.","files":null},{"type":3,"author":{"id":"818d3b781b65d3ed34262e1fdd0bb6778a258acb"},"timestamp":1602737841,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcwODg5NjUwOQ==","github-url":"https://github.com/DFHack/dfhack/issues/1671#issuecomment-708896509"},"message":"\u003e Just to clarify: the DF package works by setting the working directory to ~/.dwarffortress on startup, which causes DF to look there for all of its folders, and the non-writable folders are symlinks to corresponding folders in /opt?\n\nMostly, the `data/` folder is slightly complicated. The DF package installs all of DF's files to `/opt/dwarffortress/`. It includes a launch script which is [here](https://github.com/archlinux/svntogit-community/blob/packages/dwarffortress/trunk/dwarffortress). When run by a user that checks if `~/.dwarffortress` exists and if not it creates it, links the `raw/` and `libs/` folders, and **copies** `data/init/`. The script then copies other files from `data/` to make sure they're updated (and should be using the `--update` argument for `cp`, but that's not relevant). It finallly `cd`s to  `~/.dwarffortress` and executes `./libs/Dwarf_Fortress \"$@\"`\n\n\u003e Does the DFHack package install any actual files in `~/.dwarffortress`, besides symlinks to `/opt`? `dfhack-config` is about the only user-writable folder I can think of, but I'm not sure how best to check the behavior of the package from a non-Arch system.\n\nThe DFHack package does much the same and it does copy some files rather than just linking. Its scripts are [here](https://aur.archlinux.org/cgit/aur.git/tree/?h=dfhack\u0026id=7a5428e7c06a08a4af73092008eef95cd0f80146). The PKGBUILD is the script that builds the package and the `*.sh` scripts are what run DFHack executables. The launch scripts ([link](https://aur.archlinux.org/cgit/aur.git/tree/dfhack.sh?h=dfhack\u0026id=7a5428e7c06a08a4af73092008eef95cd0f80146)) do everything that the DF one does and also check to make sure the dfhack folders have been linked. However, those launch scripts **copy** the `/opt/dwarffortress/dfhack-config/` folder (and `dfhack.init-example` as `dfhack.init`) so that it can be unique to each user.\n\n\u003e I think the best thing to do here is to look for user-writable locations (`data/save` and `dfhack-config`) relative to the DF root (`/opt/dwarffortress` in this case), then in the current directory (`~/.dwarffortress`) if they don't exist in the DF root. This would minimize the risk of breaking existing installations where everything is in just one folder. Would this work, or do the Arch packages also set up corresponding folders in /opt? It sounds like `/opt/dwarffortress/data/save` does _not_ exist, which is good, but I'm not sure about `/opt/dwarffortress/dfhack-config` or others.\n\nSo, all of DF's and DFHack's folders do exist in `/opt/dwarffortress/` but none of them are user writable. The `dfhack-config/` folder will exist in `~/.dwarffortress/` - as a copy not a link - and be user writable. The `data/save/` folder will not exist anywhere until DF creates it in `~/.dwarffortress/` and I'm not sure when that happens  - might not happen until the first time DF tries to save. Even if it happens the first time DF launches will it happen before DFHack goes looking for it? Either way, a writable `~/.dwarffortress/dfhack-config/` will exist (unless the user does something bad like run out of storage space).\n\n\u003e Sorry about the number of questions - I think I have a good idea of how to do this if my assumptions are correct. There are a relatively small number of places in DFHack that deal with user-writable folders currently, but none of them are quite the same (Core.cpp alone has 3 different ways of finding a save folder!) so there is some risk here.\n\nNot a problem, glad to do what I can to help.","files":null},{"type":6,"author":{"id":"818d3b781b65d3ed34262e1fdd0bb6778a258acb"},"timestamp":1602737841,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDA2ODA5NDM1"},"target":"3bbc19b74fb8dc33e4259f11ae85e5e4e28685a61013e1290828706a99e8281c","message":"\u003e Just to clarify: the DF package works by setting the working directory to ~/.dwarffortress on startup, which causes DF to look there for all of its folders, and the non-writable folders are symlinks to corresponding folders in /opt?\n\nMostly, the `data/` folder is slightly complicated. The DF package installs all of DF's files to `/opt/dwarffortress/`. It includes a launch script which is [here](https://github.com/archlinux/svntogit-community/blob/packages/dwarffortress/trunk/dwarffortress). When run by a user that checks if `~/.dwarffortress` exists and if not it creates it, links the `raw/` and `libs/` folders, and **copies** `data/init/`. The script then always copies other files from `data/` to make sure they're updated (and should be using the `--update` argument for `cp`, but that's not relevant). It finallly `cd`s to  `~/.dwarffortress` and executes `./libs/Dwarf_Fortress \"$@\"`\n\n\u003e Does the DFHack package install any actual files in `~/.dwarffortress`, besides symlinks to `/opt`? `dfhack-config` is about the only user-writable folder I can think of, but I'm not sure how best to check the behavior of the package from a non-Arch system.\n\nThe DFHack package does much the same and it does copy some files rather than just linking. Its scripts are [here](https://aur.archlinux.org/cgit/aur.git/tree/?h=dfhack\u0026id=7a5428e7c06a08a4af73092008eef95cd0f80146). The PKGBUILD is the script that builds the package and the `*.sh` scripts are what run DFHack executables. The launch scripts ([link](https://aur.archlinux.org/cgit/aur.git/tree/dfhack.sh?h=dfhack\u0026id=7a5428e7c06a08a4af73092008eef95cd0f80146)) do everything that the DF one does and also check to make sure the dfhack folders have been linked. However, those launch scripts **copy** the `/opt/dwarffortress/dfhack-config/` folder (and `dfhack.init-example` as `dfhack.init`) so that it can be unique to each user.\n\n\u003e I think the best thing to do here is to look for user-writable locations (`data/save` and `dfhack-config`) relative to the DF root (`/opt/dwarffortress` in this case), then in the current directory (`~/.dwarffortress`) if they don't exist in the DF root. This would minimize the risk of breaking existing installations where everything is in just one folder. Would this work, or do the Arch packages also set up corresponding folders in /opt? It sounds like `/opt/dwarffortress/data/save` does _not_ exist, which is good, but I'm not sure about `/opt/dwarffortress/dfhack-config` or others.\n\nSo, all of DF's and DFHack's folders do exist in `/opt/dwarffortress/` but none of them are user writable. The `dfhack-config/` folder will exist in `~/.dwarffortress/` - as a copy not a link - and be user writable. The `data/save/` folder will not exist anywhere until DF creates it in `~/.dwarffortress/` and I'm not sure when that happens  - might not happen until the first time DF tries to save. Even if it happens the first time DF launches will it happen before DFHack goes looking for it? Either way, a writable `~/.dwarffortress/dfhack-config/` will exist (unless the user does something bad like run out of storage space).\n\n\u003e Sorry about the number of questions - I think I have a good idea of how to do this if my assumptions are correct. There are a relatively small number of places in DFHack that deal with user-writable folders currently, but none of them are quite the same (Core.cpp alone has 3 different ways of finding a save folder!) so there is some risk here.\n\nNot a problem, glad to do what I can to help.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1602773596,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcwOTM4MDI0OQ==","github-url":"https://github.com/DFHack/dfhack/issues/1671#issuecomment-709380249"},"message":"\u003e So, all of DF's and DFHack's folders do exist in `/opt/dwarffortress/` but none of them are user writable. The `dfhack-config/` folder will exist in `~/.dwarffortress/` - as a copy not a link - and be user writable. \n\nGot it, so I should do the opposite: check in the working directory first, then in the DF root. The working directory essentially never changes on other platforms, so that should be fine.\n\n\u003e The `data/save/` folder will not exist anywhere until DF creates it in `~/.dwarffortress/` and I'm not sure when that happens - might not happen until the first time DF tries to save. Even if it happens the first time DF launches will it happen before DFHack goes looking for it? Either way, a writable `~/.dwarffortress/dfhack-config/` will exist (unless the user does something bad like run out of storage space).\n\nIt's not possible to load a save if the data/save folder doesn't exist, so we hopefully won't run into any issues there. The only possible one I can think of is that during world generation, the name of the region folder is determined by DF and stored in its usual place in memory, but not created until the world is saved. This is already an edge case that isn't addressed cleanly - the only change on Arch is that `data/save` wouldn't exist yet either, but I'm pretty sure that was also the case before 0.47.04-r2 (and it might actually get created earlier, to allow temporary data to be stored in `data/save/current`).\n\nGlad to see that the package already handles `dfhack-config`! I hadn't thought of `data/init`. I don't think DFHack does anything with that.","files":null},{"type":6,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1602773596,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDA2OTM3Nzk3"},"target":"380c207ef5e65afa5fcdf509d8cd6ac9fcd6c6bed70e7578fc3e3df91cead604","message":"\u003e So, all of DF's and DFHack's folders do exist in `/opt/dwarffortress/` but none of them are user writable. The `dfhack-config/` folder will exist in `~/.dwarffortress/` - as a copy not a link - and be user writable. \n\nGot it, so I should do the opposite: check in the working directory first, then in the DF root. The working directory essentially never changes on other platforms, so that should be fine.\n\n\u003e The `data/save/` folder will not exist anywhere until DF creates it in `~/.dwarffortress/` and I'm not sure when that happens - might not happen until the first time DF tries to save. Even if it happens the first time DF launches will it happen before DFHack goes looking for it? Either way, a writable `~/.dwarffortress/dfhack-config/` will exist (unless the user does something bad like run out of storage space).\n\nIt's not possible to load a save if the data/save folder doesn't exist, so we hopefully won't run into any issues there. The only possible one I can think of is that during world generation, the name of the region folder is determined by DF and stored in its usual place in memory, but not created until the world is saved. This is already an edge case that isn't addressed cleanly - the only change on Arch is that `data/save` wouldn't exist yet either, but I'm pretty sure that was also the case before 0.47.04-r2 (and it might actually get created earlier, to allow temporary data to be stored in `data/save/current`).\n\nGlad to see that the package already handles `dfhack-config`! I hadn't thought of `data/init`, but I don't think DFHack does anything with that.","files":null}]}