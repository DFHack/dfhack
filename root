{"version":1,"ops":[{"type":1,"author":{"id":"892d2ec814d56380a9aaccd2791c26f279c136b3"},"timestamp":1337820217,"metadata":{"github-id":"MDU6SXNzdWU0NzIzOTU0","github-url":"https://github.com/DFHack/dfhack/issues/162","origin":"github"},"title":"zone assign crippled on Linux (patch provided)","message":"Near zone.cpp:1860... code assumes that `istream::operator\u003e\u003e(int)` will leave the target variable unwritten if there isn't a valid number to read. For me (on Linux) the target variable is being set to 0 instead; execution then proceeds as if building #0 were specified. As a result, it is impossible to use \"zone assign\" without explicitly specifying a building ID.\nI have a 1.5-line fix, but I don't understand this newfangled git thing, so here it is inline:\n\n``` patch\ndiff --git a/plugins/zone.cpp b/plugins/zone.cpp\nindex ce61012..b37bb6c 100644\n--- a/plugins/zone.cpp\n+++ b/plugins/zone.cpp\n@@ -1856,13 +1856,15 @@ command_result df_zone (color_ostream \u0026out, vector \u003cstring\u003e \u0026 parameters)\n             // if followed by another parameter, check if it's numeric\n             if(i \u003c parameters.size()-1)\n             {\n+              if(parameters.size() \u003e 0 \u0026\u0026 parameters[i+1][0] \u003e= '0' \u0026\u0026 parameters[i+1][0] \u003c= '9') {\n                 stringstream ss(parameters[i+1]);\n                 int new_building = -1;\n                 ss \u003e\u003e new_building;\n                 if(new_building != -1)\n                 {\n                     i++;\n                     target_building = new_building;\n                     out \u003c\u003c \"Assign selected unit(s) to building #\" \u003c\u003c target_building \u003c\u003cstd::endl;\n                 }\n+              }\n             }\n```","files":null}]}