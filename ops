{"version":1,"ops":[{"type":1,"author":{"id":"6a08ce56ad514124fb3932e81e3105edd8abfb04"},"timestamp":1447639672,"metadata":{"github-id":"MDU6SXNzdWUxMTcwMzY1Njc=","github-url":"https://github.com/DFHack/dfhack/issues/749","origin":"github"},"title":"fix-unit-occupancy: regular check too slow for large fortresses: optimise and/or doc warning?","message":"I have found that I cannot run `fix-unit-occupancy enable` on my largest fortress without unacceptable freezes.\n\nThis fort is 3x3 / 144x144 tiles.  I have dug down to Z -40 and all caverns are visible (though not pathable by dwarves.)  All Z levels from +15 down to -9 are 100% visible, and below that I would estimate an average of 30% of each level is revealed.  There are 268 dwarves which also contributes to the slowdown, though I suspect less so than the amount of visible map. Save file available on request.\n\nOn this fort, each time fix-unit-occupancy runs it takes approximately 6.3 seconds.  The default timer of 1200 ticks equates to 40 seconds at my current 30 FPS.  So I have 6.3 seconds of slowdown every 40 seconds of gameplay - a total loss of about 15% of game time (6.5 seconds frozen per 46.5 seconds elapsed.)\n\nExamples from my stderr.log:\n`fix-unit-occupancy: elapsed time: 6.362 secs`\n`fix-unit-occupancy: elapsed time: 6.37598 secs`\n`fix-unit-occupancy: elapsed time: 6.367 secs`\n\nI have also tested it on my second fort, which is only 18 game-months old and has very significantly less dug ground.  This fort gets 120 max FPS and I can detect no lag from running fix-unit-occupancy.\n\nI thought I should raise an issue:\n- To see if there are performance improvements that can be made?  Is it possible to scan for the bug without freezing DF the whole time?  Running the scan from a separate thread?\n  - Maybe the scan can even occur exactly as it does now, but in another thread?  Can `world-\u003emap.map_blocks` and `world-\u003eunits.active`  be accessed live from a second thread while DF remains running?  If so, that might be a simple with minimal rewrite.\n  - If not, what about taking a copy of `world-\u003emap.map_blocks` and `world-\u003eunits.active` and scanning them in the second thread?\n    - ie DF is frozen only for the duration of copying `map_blocks` and `units.active`, then scanning occurs in a background thread; DF is frozen again only if game changes are needed on a few blocks at the end.\n    - I don't know the cost of such a copy but presumably not all elements of these objects would need to be copied, and given the bug scan has to loop 256 times for each block, checking units.active on each iteration, it seems likely that a copy and offline scan should be faster?\n    - And perhaps fast copies can be done of these objects: a memcpy sort of thing?  \n    - The total processing time will increase, but as the majority of it would be occurring in the background with DF still running it should be largely irrelevant to the user (even single-core users will prefer a slowdown of  a running DF to a completely frozen DF.)\n    - Given the nature of the bug it seems to me that it shouldn't matter that the copies are out of date while being scanned: the plugin only changes blocks found to be bugged, and to be safe it can re-check these before applying the fix; actual bugged blocks will represent a minuscule fraction of total runtime.\n- Or, if there's nothing that can be done to optimise its basic function, perhaps the scan could be (optionally) segmented?  Eg only scan x% of the map each time for 1/x successive runs.\n  - In my example, if 10% of the blocks were scanned each time, each run would be 0.6 seconds which might be bearable.  \n- Finally, if no optimisations are feasible, or until such time as they can be implemented, I think there should be a documentation warning indicating the potential problem.\n  - Warning of possible delay is important because the slowdown might not be noticeable for some time: if the user first uses the command on a small fort, they will have no problem.  But over time as the fort grows the delay will become increasingly noticeable, and this might then be hard to track down as they will have made no recent changes to config.\n  - Admittedly it does print a clear timing output to stderr.log, which _hopefully_ would be seen - but it's not guaranteed for all users.  Worst case, it's the sort of creeping slowdown that could cause some users to disable DFHack completely, or at least to get the impression that it's slow.  (I realise that it's not on by default so the risk is probably minimised; but it's possible a pack might choose to distribute with it enabled.)","files":null}]}