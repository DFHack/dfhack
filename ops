{"version":1,"ops":[{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1511812871,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDEzNjAwMTc3Nzg="},"added":["bug"],"removed":[]},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1511812871,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDEzNjAwMTc3ODE="},"added":["lua"],"removed":[]},{"type":3,"author":{"id":"33f07099e648cf46b8ff42f17d3bc610247bfb4b"},"timestamp":1529441742,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5ODU0MjY0NA==","github-url":"https://github.com/DFHack/dfhack/issues/1171#issuecomment-398542644"},"message":"I actually exploited no-copy behavior and made the list read text values every frame from the backing structure using metamods. Is the trashing feature or bug?","files":null},{"type":3,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1529442726,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5ODU0NzU1Mg==","github-url":"https://github.com/DFHack/dfhack/issues/1171#issuecomment-398547552"},"message":"Unless it's very clearly documented it's a bug, as there's no reasonable reason to expect it either to use the list passed in for its internal use, nor for it to restructure it.\nIn my view a version of the function that explicitly uses the list given to it could be created for those who want it (setReferencedChoices?), while the standard version ought to work without weird side effects.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1529465581,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5ODYxMzU1Nw==","github-url":"https://github.com/DFHack/dfhack/issues/1171#issuecomment-398613557"},"message":"I don't really like the setReferencedChoices name (or idea) much. It's not consistent with other widgets, for one thing, and the name just doesn't make sense to me without context.\n\nBesides, wouldn't adding strings to the input list later fail with the current implementation? You'd have to structure added items the same way as what List uses internally, which isn't necessarily consistent with the original input list. I think setChoices should just copy the table (not sure if we have a table-copying utility function).\n\n@suokko nearly every field in labels (and therefore list entries) can be a function instead of a primitive. See gui/confirm-opts for an example of providing a `pen` callback for list items. I think that should be cleaner than dealing with metamethods to change item properties in most cases.","files":null},{"type":3,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1529478227,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5ODY0NjA3Nw==","github-url":"https://github.com/DFHack/dfhack/issues/1171#issuecomment-398646077"},"message":"Adding strings later fails, since the structure has been reworked.\nAnd yes, adding a new operation isn't a good idea. If you want to have direct access to the internals you can achieve that by explicitly accessing the internals. You just have to locate where the reworked structure is anchored and have your manipulator reference that location.\n\nI think the \"copyall\" function should work to make the copy for this case, although \"utils.clone\" should be able to do the job as well.","files":null},{"type":3,"author":{"id":"33f07099e648cf46b8ff42f17d3bc610247bfb4b"},"timestamp":1529498279,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5ODczMzc1NA==","github-url":"https://github.com/DFHack/dfhack/issues/1171#issuecomment-398733754"},"message":"@lethosor I agree. There is reason why I choose word 'exploit'. I felt it was wrong but it seemed easiest because I had some trouble propogatting pen and string changes correctly. As code was just a prototype I decided to use metamod hack which was simple. I  wanted to check if there wasn't a surprising reason to take reference instead of built a new table.","files":null}]}