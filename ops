{"version":1,"ops":[{"type":6,"author":{"id":"26b11f0ce6b39ac7615d3a24c6880ec977d1cf04"},"timestamp":1599422517,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MjU0MTE3NzQ="},"target":"ad73fe60530f30bf76c279129ecc8cba753b9afdfa39311df7676e6e6eb59f12","message":"The next big feature I have planned for quickfort is support for all buildings in buildingplan.\n\nI have a few questions, though, and I'm not on IRC reliably enough to ask them there:\n\n1) How do we match an item against a building construction job item filter?\n\nIn order to support all buildings, I'll need to support a wider variety of building items, including generic building materials. buildingplan goes through all free game items and assigns pertinent ones to buildingplan-managed buildings. This is easy to do for the furniture types buildingplan currently supports, but how can we do it generically for any filter returned from buildings.lua? Say the filter says \"fire-safe building material\", how can I select a matching item in the game world?\n\n2) How do we assign just one of several items in a construction job?\n\nThis might become obvious once I start implementing, but just in case it's difficult, are there any special steps I have to take for assigning items to a suspended well construction job if not all items are available at the same time? Can I assign one item and keep the job suspended? are there any negative consequences of doing that?\n\nI haven't fully designed the item selection algorithm yet - it depends too much on the answers to the above two questions, but my overall plan is this:\n\n- general cleanup of buildingplan code (no logic or API changes) -- move business logic out of header files, split buildingplan-lib.h into buildingplan-planner.h and buildingplan-rooms.h, move gui code back into buildingplan.cpp\n- tighten up the API -- make all publicly unused methods private, remove direct access to mutable fields (this will be required for the persistent item filters feature request that was on the forums recently)\n- Use lua to allocate buildings so we get appropriate item filters\n- When assigning an item to a construction job, filter both by construction job filters and buildingplan filters\n- Generate gui material selection pages for each required item, use getFilters() to get how many items, display serialized filter at top of screen so players know what they’re selecting for, left, right arrow keys to switch between items","files":null},{"type":6,"author":{"id":"26b11f0ce6b39ac7615d3a24c6880ec977d1cf04"},"timestamp":1599422575,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MjU0MTE4Njg="},"target":"ad73fe60530f30bf76c279129ecc8cba753b9afdfa39311df7676e6e6eb59f12","message":"The next big feature I have planned for quickfort is support for all buildings in buildingplan.\n\nI have a few questions, though, and I'm not on IRC reliably enough to ask them there:\n\n1) How do we match an item against a building construction job item filter?\n\nIn order to support all buildings, I'll need to support a wider variety of building items, including generic building materials. buildingplan goes through all free game items and assigns pertinent ones to buildingplan-managed buildings. This is easy to do for the furniture types buildingplan currently supports, but how can we do it generically for any filter returned from buildings.lua? Say the filter says \"fire-safe building material\", what is the best way to select a matching item in the game world?\n\n2) How do we assign just one of several items in a construction job?\n\nThis might become obvious once I start implementing, but just in case it's difficult, are there any special steps I have to take for assigning items to a suspended well construction job if not all items are available at the same time? Can I assign one item and keep the job suspended? are there any negative consequences of doing that?\n\nI haven't fully designed the item selection algorithm yet - it depends too much on the answers to the above two questions, but my overall plan is this:\n\n- general cleanup of buildingplan code (no logic or API changes) -- move business logic out of header files, split buildingplan-lib.h into buildingplan-planner.h and buildingplan-rooms.h, move gui code back into buildingplan.cpp\n- tighten up the API -- make all publicly unused methods private, remove direct access to mutable fields (this will be required for the persistent item filters feature request that was on the forums recently)\n- Use lua to allocate buildings so we get appropriate item filters\n- When assigning an item to a construction job, filter both by construction job filters and buildingplan filters\n- Generate gui material selection pages for each required item, use getFilters() to get how many items, display serialized filter at top of screen so players know what they’re selecting for, left, right arrow keys to switch between items","files":null},{"type":6,"author":{"id":"26b11f0ce6b39ac7615d3a24c6880ec977d1cf04"},"timestamp":1599423607,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MjU0MTM3MzE="},"target":"ad73fe60530f30bf76c279129ecc8cba753b9afdfa39311df7676e6e6eb59f12","message":"The next big feature I have planned for quickfort is support for all buildings in buildingplan.\n\nI have a few questions, though, and I'm not on IRC reliably enough to ask them there:\n\n1) How do we match an item against a building construction job item filter?\n\nIn order to support all buildings, I'll need to support a wider variety of building items, including generic building materials. buildingplan goes through all free game items and assigns pertinent ones to buildingplan-managed buildings. This is easy to do for the furniture types buildingplan currently supports, but how can we do it generically for any filter returned from buildings.lua? Say the filter says \"fire-safe building material\", what is the best way to select a matching item in the game world?\n\nEdit: I just discovered dfhack.job.isSuitableItem(). Let me investigate that.\n\n2) How do we assign just one of several items in a construction job?\n\nThis might become obvious once I start implementing, but just in case it's difficult, are there any special steps I have to take for assigning items to a suspended well construction job if not all items are available at the same time? Can I assign one item and keep the job suspended? are there any negative consequences of doing that?\n\nI haven't fully designed the item selection algorithm yet - it depends too much on the answers to the above two questions, but my overall plan is this:\n\n- general cleanup of buildingplan code (no logic or API changes) -- move business logic out of header files, split buildingplan-lib.h into buildingplan-planner.h and buildingplan-rooms.h, move gui code back into buildingplan.cpp\n- tighten up the API -- make all publicly unused methods private, remove direct access to mutable fields (this will be required for the persistent item filters feature request that was on the forums recently)\n- Use lua to allocate buildings so we get appropriate item filters\n- When assigning an item to a construction job, filter both by construction job filters and buildingplan filters\n- Generate gui material selection pages for each required item, use getFilters() to get how many items, display serialized filter at top of screen so players know what they’re selecting for, left, right arrow keys to switch between items","files":null},{"type":6,"author":{"id":"26b11f0ce6b39ac7615d3a24c6880ec977d1cf04"},"timestamp":1599424396,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MjU0MTUxNjE="},"target":"ad73fe60530f30bf76c279129ecc8cba753b9afdfa39311df7676e6e6eb59f12","message":"The next big feature I have planned for quickfort is support for all buildings in buildingplan.\n\nI have a few questions, though, and I'm not on IRC reliably enough to ask them there:\n\n1) How do we match an item against a building construction job item filter?\n\nIn order to support all buildings, I'll need to support a wider variety of building items, including generic building materials. buildingplan goes through all free game items and assigns pertinent ones to buildingplan-managed buildings. This is easy to do for the furniture types buildingplan currently supports, but how can we do it generically for any filter returned from buildings.lua? Say the filter says \"fire-safe building material\", what is the best way to select a matching item in the game world?\n\nEdit: I just discovered dfhack.job.isSuitableItem(). Let me investigate that.\nEdit2: that looks like it will work. Nice.\n\n2) How do we assign just one of several items in a construction job?\n\nThis might become obvious once I start implementing, but just in case it's difficult, are there any special steps I have to take for assigning items to a suspended well construction job if not all items are available at the same time? Can I assign one item and keep the job suspended? are there any negative consequences of doing that?\n\nI haven't fully designed the item selection algorithm yet - it depends too much on the answers to the above two questions, but my overall plan is this:\n\n- general cleanup of buildingplan code (no logic or API changes) -- move business logic out of header files, split buildingplan-lib.h into buildingplan-planner.h and buildingplan-rooms.h, move gui code back into buildingplan.cpp\n- tighten up the API -- make all publicly unused methods private, remove direct access to mutable fields (this will be required for the persistent item filters feature request that was on the forums recently)\n- Use lua to allocate buildings so we get appropriate item filters\n- When assigning an item to a construction job, filter both by construction job filters and buildingplan filters\n- Generate gui material selection pages for each required item, use getFilters() to get how many items, display serialized filter at top of screen so players know what they’re selecting for, left, right arrow keys to switch between items","files":null},{"type":6,"author":{"id":"26b11f0ce6b39ac7615d3a24c6880ec977d1cf04"},"timestamp":1599427812,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MjU0MjA4MTg="},"target":"ad73fe60530f30bf76c279129ecc8cba753b9afdfa39311df7676e6e6eb59f12","message":"The next big feature I have planned for quickfort is support for all buildings in buildingplan.\n\nI have a few questions, though, and I'm not on IRC reliably enough to ask them there:\n\n1) How do we match an item against a building construction job item filter?\n\nIn order to support all buildings, I'll need to support a wider variety of building items, including generic building materials. buildingplan goes through all free game items and assigns pertinent ones to buildingplan-managed buildings. This is easy to do for the furniture types buildingplan currently supports, but how can we do it generically for any filter returned from buildings.lua? Say the filter says \"fire-safe building material\", what is the best way to select a matching item in the game world?\n\nEdit: I just discovered dfhack.job.isSuitableItem(). Let me investigate that.\nEdit2: that looks like it will work. Nice.\n\n2) How do we assign just one of several items in a construction job?\n\nThis might become obvious once I start implementing, but just in case it's difficult, are there any special steps I have to take for assigning items to a suspended well construction job if not all items are available at the same time? Can I assign one item and keep the job suspended? are there any negative consequences of doing that?\n\nI haven't fully designed the data structures and item selection algorithm yet, but my overall plan is this:\n\n- general cleanup of buildingplan code (no logic or API changes) -- move business logic out of header files, split buildingplan-lib.h into buildingplan-planner.h and buildingplan-rooms.h, move gui code back into buildingplan.cpp\n- tighten up the API -- make all publicly unused methods private, remove direct access to mutable fields (this will be required for the persistent item filters feature request that was on the forums recently)\n- Use lua to allocate buildings so we get appropriate item filters\n- When assigning an item to a construction job, filter both by construction job filters and buildingplan filters\n- Generate gui material selection pages for each required item, use getFilters() to get how many items, display serialized filter at top of screen so players know what they’re selecting for, left, right arrow keys to switch between items","files":null},{"type":6,"author":{"id":"26b11f0ce6b39ac7615d3a24c6880ec977d1cf04"},"timestamp":1599427976,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MjU0MjExMjc="},"target":"ad73fe60530f30bf76c279129ecc8cba753b9afdfa39311df7676e6e6eb59f12","message":"The next big feature I have planned for quickfort is support for all buildings in buildingplan.\n\nI have a few questions, though, and I'm not on IRC reliably enough to ask them there:\n\n1) How do we match an item against a building construction job item filter?\n\nIn order to support all buildings, I'll need to support a wider variety of building items, including generic building materials. buildingplan goes through all free game items and assigns pertinent ones to buildingplan-managed buildings. This is easy to do for the furniture types buildingplan currently supports, but how can we do it generically for any filter returned from buildings.lua? Say the filter says \"fire-safe building material\", what is the best way to select a matching item in the game world?\n\nEdit: I just discovered dfhack.job.isSuitableItem(). Let me investigate that.\nEdit2: that looks like it will work. Nice.\n\n2) How do we assign just one of several items in a construction job?\n\nThis might become obvious once I start implementing, but just in case it's difficult, are there any special steps I have to take for assigning items to a suspended well construction job if not all items are available at the same time? Can I assign one item and keep the job suspended? are there any negative consequences of doing that?\n\nI haven't fully designed the data structures and item selection algorithm yet, but my overall plan is this:\n\n- general cleanup of buildingplan code (no logic or API changes) -- move business logic out of header files, split buildingplan-lib.h into buildingplan-planner.h and buildingplan-rooms.h, move gui code back into buildingplan.cpp\n- tighten up the API -- make all publicly unused methods private, remove direct access to mutable fields (this will be required for the persistent item filters feature request that was on the forums recently)\n- Use lua to allocate buildingplan-created buildings so we get appropriate item filters\n- When assigning an item to a construction job, filter both by construction job filters and buildingplan filters\n- Generate gui material selection pages for each required item, use getFilters() to get how many items, display serialized filter at top of screen so players know what they’re selecting for, left, right arrow keys to switch between items","files":null},{"type":6,"author":{"id":"26b11f0ce6b39ac7615d3a24c6880ec977d1cf04"},"timestamp":1599546950,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MjU5MzEzMDU="},"target":"ad73fe60530f30bf76c279129ecc8cba753b9afdfa39311df7676e6e6eb59f12","message":"The next big feature I have planned for quickfort is support for all buildings in buildingplan.\n\nI have a few questions, though, and I'm not on IRC reliably enough to ask them there:\n\n1) How do we match an item against a building construction job item filter?\n\nIn order to support all buildings, I'll need to support a wider variety of building items, including generic building materials. buildingplan goes through all free game items and assigns pertinent ones to buildingplan-managed buildings. This is easy to do for the furniture types buildingplan currently supports, but how can we do it generically for any filter returned from buildings.lua? Say the filter says \"fire-safe building material\", what is the best way to select a matching item in the game world?\n\nEdit: I just discovered dfhack.job.isSuitableItem(). Let me investigate that.\nEdit2: that looks like it will work. Nice.\n\n2) How do we assign just one of several items in a construction job?\n\nThis might become obvious once I start implementing, but just in case it's difficult, are there any special steps I have to take for assigning items to a suspended well construction job if not all items are available at the same time? Can I assign one item and keep the job suspended? are there any negative consequences of doing that?\n\nI haven't fully designed the data structures and item selection algorithm yet, but my overall plan is this:\n\n- general cleanup of buildingplan code to make the code easier to modify (no logic or API changes) -- move business logic out of header files, split buildingplan-lib.h into buildingplan-planner.h and buildingplan-rooms.h, move gui code back into buildingplan.cpp\n- tighten up the API -- make all publicly unused methods private, remove direct access to mutable fields (this will be required for the persistent item filters feature request that was on the forums recently)\n- Use lua to allocate buildingplan-created buildings so we get appropriate item filters\n- When assigning an item to a construction job, filter both by construction job filters and buildingplan filters\n- Generate gui material selection pages for each required item, use getFilters() to get how many items, display serialized filter at top of screen so players know what they’re selecting for, left, right arrow keys to switch between items","files":null},{"type":3,"author":{"id":"26b11f0ce6b39ac7615d3a24c6880ec977d1cf04"},"timestamp":1599685505,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY4OTgyMTU3Mw==","github-url":"https://github.com/DFHack/dfhack/issues/1640#issuecomment-689821573"},"message":"btw, could you assign this bug to me? I plan to implement it myself, just posting as an issue for tracking purposes.","files":null},{"type":2,"author":{"id":"26b11f0ce6b39ac7615d3a24c6880ec977d1cf04"},"timestamp":1599685651,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50Mzc0Nzg0NzIwMw=="},"title":"buildingplan: support all building types","was":"buildingplan: support all building types"},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1599708643,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDM3NDg3NTI1OTY="},"added":["buildingplan"],"removed":[]},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1599708643,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDM3NDg3NTI1OTc="},"added":["idea"],"removed":[]},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1599708649,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDM3NDg3NTI3OTg="},"added":["question"],"removed":[]},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1599708802,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY4OTk1NjE5Ng==","github-url":"https://github.com/DFHack/dfhack/issues/1640#issuecomment-689956196"},"message":"Assigned + labeled, hopefully appropriately. Not sure on (2) - you might need to add a generic_ref or specific_ref to keep the item \"attached\" to a job, but that might be something you need to do even if the job isn't suspended. I haven't taken a close look at buildings/jobs in a while, but maybe someone else knows more.","files":null},{"type":5,"author":{"id":"26b11f0ce6b39ac7615d3a24c6880ec977d1cf04"},"timestamp":1600041030,"metadata":{"github-id":"MDE0OlVubGFiZWxlZEV2ZW50Mzc2MDkyMDEwNw=="},"added":[],"removed":["question"]},{"type":3,"author":{"id":"26b11f0ce6b39ac7615d3a24c6880ec977d1cf04"},"timestamp":1601225498,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5OTY1OTM5MQ==","github-url":"https://github.com/DFHack/dfhack/issues/1640#issuecomment-699659391"},"message":"\u003e Not sure on (2) - you might need to add a generic_ref or specific_ref to keep the item \"attached\" to a job, but that might be something you need to do even if the job isn't suspended.\n\nI think I got it figured out. I'm testing the final code now to make sure all the items end up in the correct order, regardless of the order they were attached in.","files":null},{"type":3,"author":{"id":"26b11f0ce6b39ac7615d3a24c6880ec977d1cf04"},"timestamp":1602104696,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcwNTE5MzE4Mw==","github-url":"https://github.com/DFHack/dfhack/issues/1640#issuecomment-705193183"},"message":"I realize I forgot to attach my data structure and design notes:\n\nOperations:\nRegister building and its jobs\nIs *bld registered?\nGet filter for *bld\nMatch world items to jobs, iterate through jobs\n\nData structures:\nunordered_map\u003cbld *, PlannedBuilding*\u003e for *bld lookup, owns PlannedBuildings\nmap\u003cvector_id,\nmap\u003cfilter_hash,\n(job_filter, ItemFilter, queue\u003cpair\u003cbld *,\njob_item_index\u003e\u003e\u003e)\u003e\u003e for job item matching, FIFO\n\nAlgorithm:\naddPlannedBuilding: for each filter, hash item filter + buildingplan filter, add to data structure. Create branches/mappings that don’t already exist.\n\nUnregister: just remove from unordered_map. Can remove job references in main data structure lazily when we encounter them. This will avoid having to index all job locations in the structure or iterating through it to find the garbage.\n\ndoCycle: for each item vector that we have filters for, match each item against each filter tuple for that vector id that still has job associations. When match, remove job item index from data structure. If #items == #job_items, unregister the planned building. Before doing a filter match, peek the queue and discard any references to buildings that are no longer registered. Prune empty branches/mappings as we find matches so our top level map will be empty when we have no work left to do.","files":null},{"type":3,"author":{"id":"26b11f0ce6b39ac7615d3a24c6880ec977d1cf04"},"timestamp":1602908557,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcwOTUwNjA1NQ==","github-url":"https://github.com/DFHack/dfhack/issues/1640#issuecomment-709506055"},"message":"ok, I think this series of PRs is ready for review. here's a blueprint that might be useful for verification: https://docs.google.com/spreadsheets/d/1hwr_CWd2OQLiAaR0sUn2vAmbeBQrm2UC5CkzKxDZ8OE/edit?usp=sharing\n\nneeds the following aliases in your aliases.txt file:\n\nquerybuildprefix: ^b\nquerybuildsuffix: {Enter 10}^q^q^q\n\ntrackN: CT{Enter}\ntrackS: CT{+ 1}{Enter}\ntrackE: CT{+ 2}{Enter}\ntrackW: CT{+ 3}{Enter}\ntrackNS: CT{+ 4}{Enter}\ntrackNE: CT{+ 5}{Enter}\ntrackNW: CT{+ 6}{Enter}\ntrackSE: CT{+ 7}{Enter}\ntrackSW: CT{+ 8}{Enter}\ntrackEW: CT{+ 9}{Enter}\ntrackNSE: CT{+ 10}{Enter}\ntrackNSW: CT{+ 11}{Enter}\ntrackNEW: CT{+ 12}{Enter}\ntrackSEW: CT{+ 13}{Enter}\ntrackNSEW: CT{+ 14}{Enter}\ntrackrampN: CT{+ 15}{Enter}\ntrackrampS: CT{+ 15}{+ 1}{Enter}\ntrackrampE: CT{+ 15}{+ 2}{Enter}\ntrackrampW: CT{+ 15}{+ 3}{Enter}\ntrackrampNS: CT{+ 15}{+ 4}{Enter}\ntrackrampNE: CT{+ 15}{+ 5}{Enter}\ntrackrampNW: CT{+ 15}{+ 6}{Enter}\ntrackrampSE: CT{+ 15}{+ 7}{Enter}\ntrackrampSW: CT{+ 15}{+ 8}{Enter}\ntrackrampEW: CT{+ 15}{+ 9}{Enter}\ntrackrampNSE: CT{+ 15}{+ 10}{Enter}\ntrackrampNSW: CT{+ 15}{+ 11}{Enter}\ntrackrampNEW: CT{+ 15}{+ 12}{Enter}\ntrackrampSEW: CT{+ 15}{+ 13}{Enter}\ntrackrampNSEW: CT{+ 15}{+ 14}{Enter}","files":null},{"type":6,"author":{"id":"26b11f0ce6b39ac7615d3a24c6880ec977d1cf04"},"timestamp":1602908557,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDA3MzYxNTA4"},"target":"b610bfd17e182d36e09bacf50fcd34ae347da53ef669c3dfa5b73ff527469ec4","message":"ok, I think this series of PRs is ready for review. here's a blueprint that might be useful for verification: https://docs.google.com/spreadsheets/d/1hwr_CWd2OQLiAaR0sUn2vAmbeBQrm2UC5CkzKxDZ8OE/edit?usp=sharing\n\nneeds the following aliases in your aliases.txt file:\n\nquerybuildprefix: ^b\nquerybuildsuffix: {Enter 10}^q^q^q^q\n\ntrackN: CT{Enter}\ntrackS: CT{+ 1}{Enter}\ntrackE: CT{+ 2}{Enter}\ntrackW: CT{+ 3}{Enter}\ntrackNS: CT{+ 4}{Enter}\ntrackNE: CT{+ 5}{Enter}\ntrackNW: CT{+ 6}{Enter}\ntrackSE: CT{+ 7}{Enter}\ntrackSW: CT{+ 8}{Enter}\ntrackEW: CT{+ 9}{Enter}\ntrackNSE: CT{+ 10}{Enter}\ntrackNSW: CT{+ 11}{Enter}\ntrackNEW: CT{+ 12}{Enter}\ntrackSEW: CT{+ 13}{Enter}\ntrackNSEW: CT{+ 14}{Enter}\ntrackrampN: CT{+ 15}{Enter}\ntrackrampS: CT{+ 15}{+ 1}{Enter}\ntrackrampE: CT{+ 15}{+ 2}{Enter}\ntrackrampW: CT{+ 15}{+ 3}{Enter}\ntrackrampNS: CT{+ 15}{+ 4}{Enter}\ntrackrampNE: CT{+ 15}{+ 5}{Enter}\ntrackrampNW: CT{+ 15}{+ 6}{Enter}\ntrackrampSE: CT{+ 15}{+ 7}{Enter}\ntrackrampSW: CT{+ 15}{+ 8}{Enter}\ntrackrampEW: CT{+ 15}{+ 9}{Enter}\ntrackrampNSE: CT{+ 15}{+ 10}{Enter}\ntrackrampNSW: CT{+ 15}{+ 11}{Enter}\ntrackrampNEW: CT{+ 15}{+ 12}{Enter}\ntrackrampSEW: CT{+ 15}{+ 13}{Enter}\ntrackrampNSEW: CT{+ 15}{+ 14}{Enter}","files":null},{"type":6,"author":{"id":"26b11f0ce6b39ac7615d3a24c6880ec977d1cf04"},"timestamp":1602908569,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDA3MzYxNTE2"},"target":"b610bfd17e182d36e09bacf50fcd34ae347da53ef669c3dfa5b73ff527469ec4","message":"ok, I think this series of PRs is ready for review. here's a blueprint that might be useful for verification: https://docs.google.com/spreadsheets/d/1hwr_CWd2OQLiAaR0sUn2vAmbeBQrm2UC5CkzKxDZ8OE/edit?usp=sharing\n\nneeds the following aliases in your aliases.txt file:\n\nquerybuildprefix: ^b\nquerybuildsuffix: {Enter 5}^q^q^q^q\n\ntrackN: CT{Enter}\ntrackS: CT{+ 1}{Enter}\ntrackE: CT{+ 2}{Enter}\ntrackW: CT{+ 3}{Enter}\ntrackNS: CT{+ 4}{Enter}\ntrackNE: CT{+ 5}{Enter}\ntrackNW: CT{+ 6}{Enter}\ntrackSE: CT{+ 7}{Enter}\ntrackSW: CT{+ 8}{Enter}\ntrackEW: CT{+ 9}{Enter}\ntrackNSE: CT{+ 10}{Enter}\ntrackNSW: CT{+ 11}{Enter}\ntrackNEW: CT{+ 12}{Enter}\ntrackSEW: CT{+ 13}{Enter}\ntrackNSEW: CT{+ 14}{Enter}\ntrackrampN: CT{+ 15}{Enter}\ntrackrampS: CT{+ 15}{+ 1}{Enter}\ntrackrampE: CT{+ 15}{+ 2}{Enter}\ntrackrampW: CT{+ 15}{+ 3}{Enter}\ntrackrampNS: CT{+ 15}{+ 4}{Enter}\ntrackrampNE: CT{+ 15}{+ 5}{Enter}\ntrackrampNW: CT{+ 15}{+ 6}{Enter}\ntrackrampSE: CT{+ 15}{+ 7}{Enter}\ntrackrampSW: CT{+ 15}{+ 8}{Enter}\ntrackrampEW: CT{+ 15}{+ 9}{Enter}\ntrackrampNSE: CT{+ 15}{+ 10}{Enter}\ntrackrampNSW: CT{+ 15}{+ 11}{Enter}\ntrackrampNEW: CT{+ 15}{+ 12}{Enter}\ntrackrampSEW: CT{+ 15}{+ 13}{Enter}\ntrackrampNSEW: CT{+ 15}{+ 14}{Enter}","files":null},{"type":6,"author":{"id":"26b11f0ce6b39ac7615d3a24c6880ec977d1cf04"},"timestamp":1603170553,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDA3ODUyNTcz"},"target":"b610bfd17e182d36e09bacf50fcd34ae347da53ef669c3dfa5b73ff527469ec4","message":"ok, I think this series of PRs is ready for review. here's a blueprint that might be useful for verification: https://docs.google.com/spreadsheets/d/1hwr_CWd2OQLiAaR0sUn2vAmbeBQrm2UC5CkzKxDZ8OE/edit?usp=sharing\n\nneeds the following aliases in your aliases.txt file:\n\nquerybuildprefix: ^b\nquerybuildsuffix: {Enter 5}^^q^q^q\n\ntrackN: CT{Enter}\ntrackS: CT{+ 1}{Enter}\ntrackE: CT{+ 2}{Enter}\ntrackW: CT{+ 3}{Enter}\ntrackNS: CT{+ 4}{Enter}\ntrackNE: CT{+ 5}{Enter}\ntrackNW: CT{+ 6}{Enter}\ntrackSE: CT{+ 7}{Enter}\ntrackSW: CT{+ 8}{Enter}\ntrackEW: CT{+ 9}{Enter}\ntrackNSE: CT{+ 10}{Enter}\ntrackNSW: CT{+ 11}{Enter}\ntrackNEW: CT{+ 12}{Enter}\ntrackSEW: CT{+ 13}{Enter}\ntrackNSEW: CT{+ 14}{Enter}\ntrackrampN: CT{+ 15}{Enter}\ntrackrampS: CT{+ 15}{+ 1}{Enter}\ntrackrampE: CT{+ 15}{+ 2}{Enter}\ntrackrampW: CT{+ 15}{+ 3}{Enter}\ntrackrampNS: CT{+ 15}{+ 4}{Enter}\ntrackrampNE: CT{+ 15}{+ 5}{Enter}\ntrackrampNW: CT{+ 15}{+ 6}{Enter}\ntrackrampSE: CT{+ 15}{+ 7}{Enter}\ntrackrampSW: CT{+ 15}{+ 8}{Enter}\ntrackrampEW: CT{+ 15}{+ 9}{Enter}\ntrackrampNSE: CT{+ 15}{+ 10}{Enter}\ntrackrampNSW: CT{+ 15}{+ 11}{Enter}\ntrackrampNEW: CT{+ 15}{+ 12}{Enter}\ntrackrampSEW: CT{+ 15}{+ 13}{Enter}\ntrackrampNSEW: CT{+ 15}{+ 14}{Enter}","files":null},{"type":3,"author":{"id":"26b11f0ce6b39ac7615d3a24c6880ec977d1cf04"},"timestamp":1602791826,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcwOTU1NzQ5Mg==","github-url":"https://github.com/DFHack/dfhack/issues/1640#issuecomment-709557492"},"message":"Expected behavior:\n\"Build from ui\" blueprint gives us reference buildings that are created \"manually\"\nAll 1, all 2, etc are build via the api. Apply once next to the ui-built buildings with buildingplan disabled (to get pure \"constructWithFilters\" behavior) and another time next to that with buildingplan enabled.\n\nUse quickfort orders and/or createitem to get the building materials","files":null},{"type":3,"author":{"id":"26b11f0ce6b39ac7615d3a24c6880ec977d1cf04"},"timestamp":1602793909,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcwOTU3NDMyMA==","github-url":"https://github.com/DFHack/dfhack/issues/1640#issuecomment-709574320"},"message":"Btw I'm working towards infrastructure to run this kind of stuff as an automated integration test. Once buildingplan is settled, I'll open a bug where we can discuss how unit/integration testing might work and how it could possibly integrate with the buildmaster verification. In the meantime, I'll study the existing test code a bit more.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1602820050,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcwOTcxMzk0MA==","github-url":"https://github.com/DFHack/dfhack/issues/1640#issuecomment-709713940"},"message":"Sounds good. I've been meaning to get through your PRs - I'll start with part 1 and see how it goes.\n\nTests would definitely be good. The test framework does support transitioning to an active fortress (or any other game mode), in theory, but that hasn't been implemented yet. One of the larger open questions there is when/how to \"reset\" a fortress to keep tests from breaking each other. Happy to discuss more once we get into that.","files":null}]}