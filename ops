{"version":1,"ops":[{"type":1,"author":{"id":"78ba4f5d813d93eaa6e692a2e66d44d9e98552ad"},"timestamp":1433535526,"metadata":{"github-id":"MDU6SXNzdWU4NTYyNDQyMw==","github-url":"https://github.com/DFHack/dfhack/issues/628","origin":"github"},"title":"view-item-info.lua chokes on material reaction products","message":"Attempting to view most plants comes up with a blank description and one of two sorts of errors. The only ones exempt seem to be those with no other function but to be eaten - spinach leaves and such.\n\nThe first one occurs at the very end of this function, when the **dfhack.matinfo.decode** command snags on an invalid argument, a non-number material ID. It happens with anything that can be brewed, pressed, rendered, soaped... everything that the function **add_react_prod** looks at, really. For reference:\n\n``` lua\nfunction get_plant_reaction_products (mat)\n    local list = {}\n    add_react_prod (list, mat, \"DRINK_MAT\", \"Used to brew \")\n    add_react_prod (list, mat, \"GROWTH_JUICE_PROD\", \"Pressed into \")\n    add_react_prod (list, mat, \"PRESS_LIQUID_MAT\", \"Pressed into \")\n    add_react_prod (list, mat, \"LIQUID_EXTRACTABLE\", \"Extractable product: \")\n    add_react_prod (list, mat, \"WATER_SOLUTION_PROD\", \"Can be mixed with water to make \")\n    add_react_prod (list, mat, \"RENDER_MAT\", \"Rendered into \")\n    add_react_prod (list, mat, \"SOAP_MAT\", \"Used to make soap\")\n    if GetReactionProduct (mat, \"SUGARABLE\") then\n        append(list,\"Used to make sugar\")\n    end\n    if  GetReactionProduct (mat, \"MILLABLE\") or\n        GetReactionProduct (mat, \"GRAIN_MILLABLE\") or\n        GetReactionProduct (mat, \"GROWTH_MILLABLE\") then\n        append(list,\"Can be milled\")\n    end\n    if GetReactionProduct(mat, \"GRAIN_THRESHABLE\") then\n        append(list,\"Grain can be threshed\")\n    end\n    if GetReactionProduct (mat, \"CHEESE_MAT\") then\n        local mat_type, mat_index = GetReactionProduct (mat, \"CHEESE_MAT\")\n        append(list,\"Used to make \"..dfhack.matinfo.decode(mat_type, mat_index).material.state_name.Solid)\n    end\n    return list\nend\n```\n\nThe second set of plants is those that can be either threshed, milled down or have products associated only with their growths. They make it to the next function in line, but fail when the local variable _targetmat_ ends up being a nil value as the **append** command at the very end tries to index it.\n\n``` lua\nfunction GetFoodPropertiesStringList (item)\n    local mat = dfhack.matinfo.decode(item).material\n    local list = {{\" \", 0}}\n    append(list,edible_string(mat))\n    if item._type == df.item_foodst then\n        append(list,\"This is prepared meal\")\n        return list\n    end\n    if mat == dfhack.matinfo.find (\"WATER\") then\n        append(list,\"Water is drinkable\")\n        return list\n    end\n    add_lines_to_list(list, get_plant_reaction_products(mat))\n    if item._type == df.item_plantst and GetMatPlant (item) then\n        local plant = GetMatPlant (item)\n        for k,v in pairs (plant.material_defs) do\n            if v ~= -1 and string.find (k,\"type_\") and not string.find (k,\"type_basic\")\n                    or string.find (k,\"type_seed\") or string.find (k,\"type_tree\") then\n                local targetmat = dfhack.matinfo.decode (v,\n                    plant.material_defs[\"idx_\"..string.match (k,\"type_(.+)\")])\n                local state = \"Liquid\"\n                if string.find (k,\"type_mill\") then state = \"Powder\"\n                elseif string.find (k,\"type_thread\") then state = \"Solid\" end\n                local st_name = targetmat.material.state_name[state]\n                append(list,\"Used to make \"..targetmat.material.prefix..''..st_name)\n            end\n        end\n    end\n    return list\nend\n```\n\nThe traceback trails always end with these two functions some way up. I don't know enough lua to figure out what's wrong with them.\n\n``` lua\nfunction GetReactionProduct (inmat, reaction)\n    for k,v in pairs (inmat.reaction_product.id) do\n        if v.value == reaction then\n            return {inmat.reaction_product.material.mat_type[k],\n                    inmat.reaction_product.material.mat_index[k]}\n        end\n    end\nend\n\nfunction add_react_prod (list, mat, product, str)\n    local mat_type, mat_index = GetReactionProduct (mat, product)\n    if mat_type then\n        local result = dfhack.matinfo.decode(mat_type, mat_index).material.state_name.Liquid\n        append(list, str..result)\n    end\nend\n```\n\nedit: For clarity's sake, here are the two error messages verbatim.\n\n![Error messages](http://i.imgur.com/ZbamAlt.png)","files":null}]}