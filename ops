{"version":1,"ops":[{"type":1,"author":{"id":"f7b5a7930d0e1264ae1e4a774b03a7e78c2b7858"},"timestamp":1446462232,"metadata":{"github-id":"MDU6SXNzdWUxMTQ1NzI4MzQ=","github-url":"https://github.com/DFHack/dfhack/issues/723","origin":"github"},"title":"Alternative way to organise DFHack script development","message":"For script developers, the current system is awkward enough to use that most simply don't.  Many maintain git repos for their scripts with no shared history, and more still don't use git at all.\n\nI think it self-evident that script authors working on a fork would be better than our new submodule system, and that encouraging more people to use git for DFHack scripts would be a good thing.  I further assume that we would like to know about as much of the script development being done as possible, and prefer to have the option of adopting that work into the standard distribution.\n\nSo the proposal is actually pretty simple:\n1. move the scripts directory to a new repository, and make it a submodule in it's current location\n2. each author forks the repo, and works in /devel/$name/ if they're not comfortable putting stuff in the main folders\n3. when ready for publication, scripts are moved to the main directories and pull-requests are made\n\nWhat are the advantages for users (ie script authors)?\n- it's trivial to work in a functioning environment:  just grab a DF+DFHack install, `cd hack \u0026\u0026 rm -rf scripts \u0026\u0026 git clone ...`\n- the same technique makes getting new stuff easy\n- all the linting and testing tools are available\n- encourages collaboration, since you fork one repo not many and can fetch from other repos\n- no baggage:  it doesn't include any of the scary C++/Perl/Lisp/XML/Cmake/whatever that scares people off\n\nAdvantages for DFHack core developers?\n- **shared history**\n- more people use git for DFHack scripts, meaning better history and more content\n- the build systems and merge patterns are more sensible\n- management of the scripts _could_ (but need not) be handed off, and just checked when it's time to update the submodule for a release\n- less duplication, as a higher proportion of the code is widely known among script authors\n- +many above, eg script authors linting is a Good Thing\n\nThoughts?  I know this is a big step, but the DFHack project is getting big enough that it's hard to manage and this seems like a natural and helpful split to make.","files":null}]}