// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stockpiles.proto

#ifndef PROTOBUF_stockpiles_2eproto__INCLUDED
#define PROTOBUF_stockpiles_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace dfstockpiles {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_stockpiles_2eproto();
void protobuf_AssignDesc_stockpiles_2eproto();
void protobuf_ShutdownFile_stockpiles_2eproto();

class StockpileSettings;
class StockpileSettings_AnimalsSet;
class StockpileSettings_FoodSet;
class StockpileSettings_FurnitureSet;
class StockpileSettings_RefuseSet;
class StockpileSettings_StoneSet;
class StockpileSettings_OreSet;
class StockpileSettings_AmmoSet;
class StockpileSettings_CoinSet;
class StockpileSettings_BarsBlocksSet;
class StockpileSettings_GemsSet;
class StockpileSettings_FinishedGoodsSet;
class StockpileSettings_LeatherSet;
class StockpileSettings_ClothSet;
class StockpileSettings_WoodSet;
class StockpileSettings_WeaponsSet;
class StockpileSettings_ArmorSet;

// ===================================================================

class StockpileSettings_AnimalsSet : public ::google::protobuf::MessageLite {
 public:
  StockpileSettings_AnimalsSet();
  virtual ~StockpileSettings_AnimalsSet();
  
  StockpileSettings_AnimalsSet(const StockpileSettings_AnimalsSet& from);
  
  inline StockpileSettings_AnimalsSet& operator=(const StockpileSettings_AnimalsSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const StockpileSettings_AnimalsSet& default_instance();
  
  void Swap(StockpileSettings_AnimalsSet* other);
  
  // implements Message ----------------------------------------------
  
  StockpileSettings_AnimalsSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StockpileSettings_AnimalsSet& from);
  void MergeFrom(const StockpileSettings_AnimalsSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool empty_cages = 1;
  inline bool has_empty_cages() const;
  inline void clear_empty_cages();
  static const int kEmptyCagesFieldNumber = 1;
  inline bool empty_cages() const;
  inline void set_empty_cages(bool value);
  
  // optional bool empty_traps = 2;
  inline bool has_empty_traps() const;
  inline void clear_empty_traps();
  static const int kEmptyTrapsFieldNumber = 2;
  inline bool empty_traps() const;
  inline void set_empty_traps(bool value);
  
  // repeated string enabled = 3;
  inline int enabled_size() const;
  inline void clear_enabled();
  static const int kEnabledFieldNumber = 3;
  inline const ::std::string& enabled(int index) const;
  inline ::std::string* mutable_enabled(int index);
  inline void set_enabled(int index, const ::std::string& value);
  inline void set_enabled(int index, const char* value);
  inline void set_enabled(int index, const char* value, size_t size);
  inline ::std::string* add_enabled();
  inline void add_enabled(const ::std::string& value);
  inline void add_enabled(const char* value);
  inline void add_enabled(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& enabled() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_enabled();
  
  // @@protoc_insertion_point(class_scope:dfstockpiles.StockpileSettings.AnimalsSet)
 private:
  inline void set_has_empty_cages();
  inline void clear_has_empty_cages();
  inline void set_has_empty_traps();
  inline void clear_has_empty_traps();
  
  ::google::protobuf::RepeatedPtrField< ::std::string> enabled_;
  bool empty_cages_;
  bool empty_traps_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpiles_2eproto();
  friend void protobuf_AssignDesc_stockpiles_2eproto();
  friend void protobuf_ShutdownFile_stockpiles_2eproto();
  
  void InitAsDefaultInstance();
  static StockpileSettings_AnimalsSet* default_instance_;
};
// -------------------------------------------------------------------

class StockpileSettings_FoodSet : public ::google::protobuf::MessageLite {
 public:
  StockpileSettings_FoodSet();
  virtual ~StockpileSettings_FoodSet();
  
  StockpileSettings_FoodSet(const StockpileSettings_FoodSet& from);
  
  inline StockpileSettings_FoodSet& operator=(const StockpileSettings_FoodSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const StockpileSettings_FoodSet& default_instance();
  
  void Swap(StockpileSettings_FoodSet* other);
  
  // implements Message ----------------------------------------------
  
  StockpileSettings_FoodSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StockpileSettings_FoodSet& from);
  void MergeFrom(const StockpileSettings_FoodSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string meat = 1;
  inline int meat_size() const;
  inline void clear_meat();
  static const int kMeatFieldNumber = 1;
  inline const ::std::string& meat(int index) const;
  inline ::std::string* mutable_meat(int index);
  inline void set_meat(int index, const ::std::string& value);
  inline void set_meat(int index, const char* value);
  inline void set_meat(int index, const char* value, size_t size);
  inline ::std::string* add_meat();
  inline void add_meat(const ::std::string& value);
  inline void add_meat(const char* value);
  inline void add_meat(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& meat() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_meat();
  
  // repeated string fish = 2;
  inline int fish_size() const;
  inline void clear_fish();
  static const int kFishFieldNumber = 2;
  inline const ::std::string& fish(int index) const;
  inline ::std::string* mutable_fish(int index);
  inline void set_fish(int index, const ::std::string& value);
  inline void set_fish(int index, const char* value);
  inline void set_fish(int index, const char* value, size_t size);
  inline ::std::string* add_fish();
  inline void add_fish(const ::std::string& value);
  inline void add_fish(const char* value);
  inline void add_fish(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& fish() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fish();
  
  // repeated string unprepared_fish = 20;
  inline int unprepared_fish_size() const;
  inline void clear_unprepared_fish();
  static const int kUnpreparedFishFieldNumber = 20;
  inline const ::std::string& unprepared_fish(int index) const;
  inline ::std::string* mutable_unprepared_fish(int index);
  inline void set_unprepared_fish(int index, const ::std::string& value);
  inline void set_unprepared_fish(int index, const char* value);
  inline void set_unprepared_fish(int index, const char* value, size_t size);
  inline ::std::string* add_unprepared_fish();
  inline void add_unprepared_fish(const ::std::string& value);
  inline void add_unprepared_fish(const char* value);
  inline void add_unprepared_fish(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& unprepared_fish() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_unprepared_fish();
  
  // repeated string egg = 3;
  inline int egg_size() const;
  inline void clear_egg();
  static const int kEggFieldNumber = 3;
  inline const ::std::string& egg(int index) const;
  inline ::std::string* mutable_egg(int index);
  inline void set_egg(int index, const ::std::string& value);
  inline void set_egg(int index, const char* value);
  inline void set_egg(int index, const char* value, size_t size);
  inline ::std::string* add_egg();
  inline void add_egg(const ::std::string& value);
  inline void add_egg(const char* value);
  inline void add_egg(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& egg() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_egg();
  
  // repeated string plants = 4;
  inline int plants_size() const;
  inline void clear_plants();
  static const int kPlantsFieldNumber = 4;
  inline const ::std::string& plants(int index) const;
  inline ::std::string* mutable_plants(int index);
  inline void set_plants(int index, const ::std::string& value);
  inline void set_plants(int index, const char* value);
  inline void set_plants(int index, const char* value, size_t size);
  inline ::std::string* add_plants();
  inline void add_plants(const ::std::string& value);
  inline void add_plants(const char* value);
  inline void add_plants(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& plants() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_plants();
  
  // repeated string drink_plant = 5;
  inline int drink_plant_size() const;
  inline void clear_drink_plant();
  static const int kDrinkPlantFieldNumber = 5;
  inline const ::std::string& drink_plant(int index) const;
  inline ::std::string* mutable_drink_plant(int index);
  inline void set_drink_plant(int index, const ::std::string& value);
  inline void set_drink_plant(int index, const char* value);
  inline void set_drink_plant(int index, const char* value, size_t size);
  inline ::std::string* add_drink_plant();
  inline void add_drink_plant(const ::std::string& value);
  inline void add_drink_plant(const char* value);
  inline void add_drink_plant(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& drink_plant() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_drink_plant();
  
  // repeated string drink_animal = 6;
  inline int drink_animal_size() const;
  inline void clear_drink_animal();
  static const int kDrinkAnimalFieldNumber = 6;
  inline const ::std::string& drink_animal(int index) const;
  inline ::std::string* mutable_drink_animal(int index);
  inline void set_drink_animal(int index, const ::std::string& value);
  inline void set_drink_animal(int index, const char* value);
  inline void set_drink_animal(int index, const char* value, size_t size);
  inline ::std::string* add_drink_animal();
  inline void add_drink_animal(const ::std::string& value);
  inline void add_drink_animal(const char* value);
  inline void add_drink_animal(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& drink_animal() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_drink_animal();
  
  // repeated string cheese_plant = 7;
  inline int cheese_plant_size() const;
  inline void clear_cheese_plant();
  static const int kCheesePlantFieldNumber = 7;
  inline const ::std::string& cheese_plant(int index) const;
  inline ::std::string* mutable_cheese_plant(int index);
  inline void set_cheese_plant(int index, const ::std::string& value);
  inline void set_cheese_plant(int index, const char* value);
  inline void set_cheese_plant(int index, const char* value, size_t size);
  inline ::std::string* add_cheese_plant();
  inline void add_cheese_plant(const ::std::string& value);
  inline void add_cheese_plant(const char* value);
  inline void add_cheese_plant(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cheese_plant() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cheese_plant();
  
  // repeated string cheese_animal = 8;
  inline int cheese_animal_size() const;
  inline void clear_cheese_animal();
  static const int kCheeseAnimalFieldNumber = 8;
  inline const ::std::string& cheese_animal(int index) const;
  inline ::std::string* mutable_cheese_animal(int index);
  inline void set_cheese_animal(int index, const ::std::string& value);
  inline void set_cheese_animal(int index, const char* value);
  inline void set_cheese_animal(int index, const char* value, size_t size);
  inline ::std::string* add_cheese_animal();
  inline void add_cheese_animal(const ::std::string& value);
  inline void add_cheese_animal(const char* value);
  inline void add_cheese_animal(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cheese_animal() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cheese_animal();
  
  // repeated string seeds = 9;
  inline int seeds_size() const;
  inline void clear_seeds();
  static const int kSeedsFieldNumber = 9;
  inline const ::std::string& seeds(int index) const;
  inline ::std::string* mutable_seeds(int index);
  inline void set_seeds(int index, const ::std::string& value);
  inline void set_seeds(int index, const char* value);
  inline void set_seeds(int index, const char* value, size_t size);
  inline ::std::string* add_seeds();
  inline void add_seeds(const ::std::string& value);
  inline void add_seeds(const char* value);
  inline void add_seeds(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& seeds() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_seeds();
  
  // repeated string leaves = 10;
  inline int leaves_size() const;
  inline void clear_leaves();
  static const int kLeavesFieldNumber = 10;
  inline const ::std::string& leaves(int index) const;
  inline ::std::string* mutable_leaves(int index);
  inline void set_leaves(int index, const ::std::string& value);
  inline void set_leaves(int index, const char* value);
  inline void set_leaves(int index, const char* value, size_t size);
  inline ::std::string* add_leaves();
  inline void add_leaves(const ::std::string& value);
  inline void add_leaves(const char* value);
  inline void add_leaves(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& leaves() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_leaves();
  
  // repeated string powder_plant = 11;
  inline int powder_plant_size() const;
  inline void clear_powder_plant();
  static const int kPowderPlantFieldNumber = 11;
  inline const ::std::string& powder_plant(int index) const;
  inline ::std::string* mutable_powder_plant(int index);
  inline void set_powder_plant(int index, const ::std::string& value);
  inline void set_powder_plant(int index, const char* value);
  inline void set_powder_plant(int index, const char* value, size_t size);
  inline ::std::string* add_powder_plant();
  inline void add_powder_plant(const ::std::string& value);
  inline void add_powder_plant(const char* value);
  inline void add_powder_plant(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& powder_plant() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_powder_plant();
  
  // repeated string powder_creature = 12;
  inline int powder_creature_size() const;
  inline void clear_powder_creature();
  static const int kPowderCreatureFieldNumber = 12;
  inline const ::std::string& powder_creature(int index) const;
  inline ::std::string* mutable_powder_creature(int index);
  inline void set_powder_creature(int index, const ::std::string& value);
  inline void set_powder_creature(int index, const char* value);
  inline void set_powder_creature(int index, const char* value, size_t size);
  inline ::std::string* add_powder_creature();
  inline void add_powder_creature(const ::std::string& value);
  inline void add_powder_creature(const char* value);
  inline void add_powder_creature(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& powder_creature() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_powder_creature();
  
  // repeated string glob = 13;
  inline int glob_size() const;
  inline void clear_glob();
  static const int kGlobFieldNumber = 13;
  inline const ::std::string& glob(int index) const;
  inline ::std::string* mutable_glob(int index);
  inline void set_glob(int index, const ::std::string& value);
  inline void set_glob(int index, const char* value);
  inline void set_glob(int index, const char* value, size_t size);
  inline ::std::string* add_glob();
  inline void add_glob(const ::std::string& value);
  inline void add_glob(const char* value);
  inline void add_glob(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& glob() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_glob();
  
  // repeated string glob_paste = 14;
  inline int glob_paste_size() const;
  inline void clear_glob_paste();
  static const int kGlobPasteFieldNumber = 14;
  inline const ::std::string& glob_paste(int index) const;
  inline ::std::string* mutable_glob_paste(int index);
  inline void set_glob_paste(int index, const ::std::string& value);
  inline void set_glob_paste(int index, const char* value);
  inline void set_glob_paste(int index, const char* value, size_t size);
  inline ::std::string* add_glob_paste();
  inline void add_glob_paste(const ::std::string& value);
  inline void add_glob_paste(const char* value);
  inline void add_glob_paste(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& glob_paste() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_glob_paste();
  
  // repeated string glob_pressed = 15;
  inline int glob_pressed_size() const;
  inline void clear_glob_pressed();
  static const int kGlobPressedFieldNumber = 15;
  inline const ::std::string& glob_pressed(int index) const;
  inline ::std::string* mutable_glob_pressed(int index);
  inline void set_glob_pressed(int index, const ::std::string& value);
  inline void set_glob_pressed(int index, const char* value);
  inline void set_glob_pressed(int index, const char* value, size_t size);
  inline ::std::string* add_glob_pressed();
  inline void add_glob_pressed(const ::std::string& value);
  inline void add_glob_pressed(const char* value);
  inline void add_glob_pressed(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& glob_pressed() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_glob_pressed();
  
  // repeated string liquid_plant = 16;
  inline int liquid_plant_size() const;
  inline void clear_liquid_plant();
  static const int kLiquidPlantFieldNumber = 16;
  inline const ::std::string& liquid_plant(int index) const;
  inline ::std::string* mutable_liquid_plant(int index);
  inline void set_liquid_plant(int index, const ::std::string& value);
  inline void set_liquid_plant(int index, const char* value);
  inline void set_liquid_plant(int index, const char* value, size_t size);
  inline ::std::string* add_liquid_plant();
  inline void add_liquid_plant(const ::std::string& value);
  inline void add_liquid_plant(const char* value);
  inline void add_liquid_plant(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& liquid_plant() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_liquid_plant();
  
  // repeated string liquid_animal = 17;
  inline int liquid_animal_size() const;
  inline void clear_liquid_animal();
  static const int kLiquidAnimalFieldNumber = 17;
  inline const ::std::string& liquid_animal(int index) const;
  inline ::std::string* mutable_liquid_animal(int index);
  inline void set_liquid_animal(int index, const ::std::string& value);
  inline void set_liquid_animal(int index, const char* value);
  inline void set_liquid_animal(int index, const char* value, size_t size);
  inline ::std::string* add_liquid_animal();
  inline void add_liquid_animal(const ::std::string& value);
  inline void add_liquid_animal(const char* value);
  inline void add_liquid_animal(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& liquid_animal() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_liquid_animal();
  
  // repeated string liquid_misc = 18;
  inline int liquid_misc_size() const;
  inline void clear_liquid_misc();
  static const int kLiquidMiscFieldNumber = 18;
  inline const ::std::string& liquid_misc(int index) const;
  inline ::std::string* mutable_liquid_misc(int index);
  inline void set_liquid_misc(int index, const ::std::string& value);
  inline void set_liquid_misc(int index, const char* value);
  inline void set_liquid_misc(int index, const char* value, size_t size);
  inline ::std::string* add_liquid_misc();
  inline void add_liquid_misc(const ::std::string& value);
  inline void add_liquid_misc(const char* value);
  inline void add_liquid_misc(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& liquid_misc() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_liquid_misc();
  
  // optional bool prepared_meals = 19;
  inline bool has_prepared_meals() const;
  inline void clear_prepared_meals();
  static const int kPreparedMealsFieldNumber = 19;
  inline bool prepared_meals() const;
  inline void set_prepared_meals(bool value);
  
  // @@protoc_insertion_point(class_scope:dfstockpiles.StockpileSettings.FoodSet)
 private:
  inline void set_has_prepared_meals();
  inline void clear_has_prepared_meals();
  
  ::google::protobuf::RepeatedPtrField< ::std::string> meat_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fish_;
  ::google::protobuf::RepeatedPtrField< ::std::string> unprepared_fish_;
  ::google::protobuf::RepeatedPtrField< ::std::string> egg_;
  ::google::protobuf::RepeatedPtrField< ::std::string> plants_;
  ::google::protobuf::RepeatedPtrField< ::std::string> drink_plant_;
  ::google::protobuf::RepeatedPtrField< ::std::string> drink_animal_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cheese_plant_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cheese_animal_;
  ::google::protobuf::RepeatedPtrField< ::std::string> seeds_;
  ::google::protobuf::RepeatedPtrField< ::std::string> leaves_;
  ::google::protobuf::RepeatedPtrField< ::std::string> powder_plant_;
  ::google::protobuf::RepeatedPtrField< ::std::string> powder_creature_;
  ::google::protobuf::RepeatedPtrField< ::std::string> glob_;
  ::google::protobuf::RepeatedPtrField< ::std::string> glob_paste_;
  ::google::protobuf::RepeatedPtrField< ::std::string> glob_pressed_;
  ::google::protobuf::RepeatedPtrField< ::std::string> liquid_plant_;
  ::google::protobuf::RepeatedPtrField< ::std::string> liquid_animal_;
  ::google::protobuf::RepeatedPtrField< ::std::string> liquid_misc_;
  bool prepared_meals_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpiles_2eproto();
  friend void protobuf_AssignDesc_stockpiles_2eproto();
  friend void protobuf_ShutdownFile_stockpiles_2eproto();
  
  void InitAsDefaultInstance();
  static StockpileSettings_FoodSet* default_instance_;
};
// -------------------------------------------------------------------

class StockpileSettings_FurnitureSet : public ::google::protobuf::MessageLite {
 public:
  StockpileSettings_FurnitureSet();
  virtual ~StockpileSettings_FurnitureSet();
  
  StockpileSettings_FurnitureSet(const StockpileSettings_FurnitureSet& from);
  
  inline StockpileSettings_FurnitureSet& operator=(const StockpileSettings_FurnitureSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const StockpileSettings_FurnitureSet& default_instance();
  
  void Swap(StockpileSettings_FurnitureSet* other);
  
  // implements Message ----------------------------------------------
  
  StockpileSettings_FurnitureSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StockpileSettings_FurnitureSet& from);
  void MergeFrom(const StockpileSettings_FurnitureSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string type = 1;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type(int index) const;
  inline ::std::string* mutable_type(int index);
  inline void set_type(int index, const ::std::string& value);
  inline void set_type(int index, const char* value);
  inline void set_type(int index, const char* value, size_t size);
  inline ::std::string* add_type();
  inline void add_type(const ::std::string& value);
  inline void add_type(const char* value);
  inline void add_type(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& type() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_type();
  
  // repeated string other_mats = 2;
  inline int other_mats_size() const;
  inline void clear_other_mats();
  static const int kOtherMatsFieldNumber = 2;
  inline const ::std::string& other_mats(int index) const;
  inline ::std::string* mutable_other_mats(int index);
  inline void set_other_mats(int index, const ::std::string& value);
  inline void set_other_mats(int index, const char* value);
  inline void set_other_mats(int index, const char* value, size_t size);
  inline ::std::string* add_other_mats();
  inline void add_other_mats(const ::std::string& value);
  inline void add_other_mats(const char* value);
  inline void add_other_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& other_mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_other_mats();
  
  // repeated string mats = 3;
  inline int mats_size() const;
  inline void clear_mats();
  static const int kMatsFieldNumber = 3;
  inline const ::std::string& mats(int index) const;
  inline ::std::string* mutable_mats(int index);
  inline void set_mats(int index, const ::std::string& value);
  inline void set_mats(int index, const char* value);
  inline void set_mats(int index, const char* value, size_t size);
  inline ::std::string* add_mats();
  inline void add_mats(const ::std::string& value);
  inline void add_mats(const char* value);
  inline void add_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mats();
  
  // repeated string quality_core = 4;
  inline int quality_core_size() const;
  inline void clear_quality_core();
  static const int kQualityCoreFieldNumber = 4;
  inline const ::std::string& quality_core(int index) const;
  inline ::std::string* mutable_quality_core(int index);
  inline void set_quality_core(int index, const ::std::string& value);
  inline void set_quality_core(int index, const char* value);
  inline void set_quality_core(int index, const char* value, size_t size);
  inline ::std::string* add_quality_core();
  inline void add_quality_core(const ::std::string& value);
  inline void add_quality_core(const char* value);
  inline void add_quality_core(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& quality_core() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_quality_core();
  
  // repeated string quality_total = 5;
  inline int quality_total_size() const;
  inline void clear_quality_total();
  static const int kQualityTotalFieldNumber = 5;
  inline const ::std::string& quality_total(int index) const;
  inline ::std::string* mutable_quality_total(int index);
  inline void set_quality_total(int index, const ::std::string& value);
  inline void set_quality_total(int index, const char* value);
  inline void set_quality_total(int index, const char* value, size_t size);
  inline ::std::string* add_quality_total();
  inline void add_quality_total(const ::std::string& value);
  inline void add_quality_total(const char* value);
  inline void add_quality_total(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& quality_total() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_quality_total();
  
  // optional bool sand_bags = 6;
  inline bool has_sand_bags() const;
  inline void clear_sand_bags();
  static const int kSandBagsFieldNumber = 6;
  inline bool sand_bags() const;
  inline void set_sand_bags(bool value);
  
  // @@protoc_insertion_point(class_scope:dfstockpiles.StockpileSettings.FurnitureSet)
 private:
  inline void set_has_sand_bags();
  inline void clear_has_sand_bags();
  
  ::google::protobuf::RepeatedPtrField< ::std::string> type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> other_mats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> quality_core_;
  ::google::protobuf::RepeatedPtrField< ::std::string> quality_total_;
  bool sand_bags_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpiles_2eproto();
  friend void protobuf_AssignDesc_stockpiles_2eproto();
  friend void protobuf_ShutdownFile_stockpiles_2eproto();
  
  void InitAsDefaultInstance();
  static StockpileSettings_FurnitureSet* default_instance_;
};
// -------------------------------------------------------------------

class StockpileSettings_RefuseSet : public ::google::protobuf::MessageLite {
 public:
  StockpileSettings_RefuseSet();
  virtual ~StockpileSettings_RefuseSet();
  
  StockpileSettings_RefuseSet(const StockpileSettings_RefuseSet& from);
  
  inline StockpileSettings_RefuseSet& operator=(const StockpileSettings_RefuseSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const StockpileSettings_RefuseSet& default_instance();
  
  void Swap(StockpileSettings_RefuseSet* other);
  
  // implements Message ----------------------------------------------
  
  StockpileSettings_RefuseSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StockpileSettings_RefuseSet& from);
  void MergeFrom(const StockpileSettings_RefuseSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string type = 1;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type(int index) const;
  inline ::std::string* mutable_type(int index);
  inline void set_type(int index, const ::std::string& value);
  inline void set_type(int index, const char* value);
  inline void set_type(int index, const char* value, size_t size);
  inline ::std::string* add_type();
  inline void add_type(const ::std::string& value);
  inline void add_type(const char* value);
  inline void add_type(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& type() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_type();
  
  // repeated string corpses = 2;
  inline int corpses_size() const;
  inline void clear_corpses();
  static const int kCorpsesFieldNumber = 2;
  inline const ::std::string& corpses(int index) const;
  inline ::std::string* mutable_corpses(int index);
  inline void set_corpses(int index, const ::std::string& value);
  inline void set_corpses(int index, const char* value);
  inline void set_corpses(int index, const char* value, size_t size);
  inline ::std::string* add_corpses();
  inline void add_corpses(const ::std::string& value);
  inline void add_corpses(const char* value);
  inline void add_corpses(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& corpses() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_corpses();
  
  // repeated string body_parts = 3;
  inline int body_parts_size() const;
  inline void clear_body_parts();
  static const int kBodyPartsFieldNumber = 3;
  inline const ::std::string& body_parts(int index) const;
  inline ::std::string* mutable_body_parts(int index);
  inline void set_body_parts(int index, const ::std::string& value);
  inline void set_body_parts(int index, const char* value);
  inline void set_body_parts(int index, const char* value, size_t size);
  inline ::std::string* add_body_parts();
  inline void add_body_parts(const ::std::string& value);
  inline void add_body_parts(const char* value);
  inline void add_body_parts(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& body_parts() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_body_parts();
  
  // repeated string skulls = 4;
  inline int skulls_size() const;
  inline void clear_skulls();
  static const int kSkullsFieldNumber = 4;
  inline const ::std::string& skulls(int index) const;
  inline ::std::string* mutable_skulls(int index);
  inline void set_skulls(int index, const ::std::string& value);
  inline void set_skulls(int index, const char* value);
  inline void set_skulls(int index, const char* value, size_t size);
  inline ::std::string* add_skulls();
  inline void add_skulls(const ::std::string& value);
  inline void add_skulls(const char* value);
  inline void add_skulls(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& skulls() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_skulls();
  
  // repeated string bones = 5;
  inline int bones_size() const;
  inline void clear_bones();
  static const int kBonesFieldNumber = 5;
  inline const ::std::string& bones(int index) const;
  inline ::std::string* mutable_bones(int index);
  inline void set_bones(int index, const ::std::string& value);
  inline void set_bones(int index, const char* value);
  inline void set_bones(int index, const char* value, size_t size);
  inline ::std::string* add_bones();
  inline void add_bones(const ::std::string& value);
  inline void add_bones(const char* value);
  inline void add_bones(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bones() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bones();
  
  // repeated string hair = 6;
  inline int hair_size() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 6;
  inline const ::std::string& hair(int index) const;
  inline ::std::string* mutable_hair(int index);
  inline void set_hair(int index, const ::std::string& value);
  inline void set_hair(int index, const char* value);
  inline void set_hair(int index, const char* value, size_t size);
  inline ::std::string* add_hair();
  inline void add_hair(const ::std::string& value);
  inline void add_hair(const char* value);
  inline void add_hair(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& hair() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_hair();
  
  // repeated string shells = 7;
  inline int shells_size() const;
  inline void clear_shells();
  static const int kShellsFieldNumber = 7;
  inline const ::std::string& shells(int index) const;
  inline ::std::string* mutable_shells(int index);
  inline void set_shells(int index, const ::std::string& value);
  inline void set_shells(int index, const char* value);
  inline void set_shells(int index, const char* value, size_t size);
  inline ::std::string* add_shells();
  inline void add_shells(const ::std::string& value);
  inline void add_shells(const char* value);
  inline void add_shells(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& shells() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_shells();
  
  // repeated string teeth = 8;
  inline int teeth_size() const;
  inline void clear_teeth();
  static const int kTeethFieldNumber = 8;
  inline const ::std::string& teeth(int index) const;
  inline ::std::string* mutable_teeth(int index);
  inline void set_teeth(int index, const ::std::string& value);
  inline void set_teeth(int index, const char* value);
  inline void set_teeth(int index, const char* value, size_t size);
  inline ::std::string* add_teeth();
  inline void add_teeth(const ::std::string& value);
  inline void add_teeth(const char* value);
  inline void add_teeth(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& teeth() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_teeth();
  
  // repeated string horns = 9;
  inline int horns_size() const;
  inline void clear_horns();
  static const int kHornsFieldNumber = 9;
  inline const ::std::string& horns(int index) const;
  inline ::std::string* mutable_horns(int index);
  inline void set_horns(int index, const ::std::string& value);
  inline void set_horns(int index, const char* value);
  inline void set_horns(int index, const char* value, size_t size);
  inline ::std::string* add_horns();
  inline void add_horns(const ::std::string& value);
  inline void add_horns(const char* value);
  inline void add_horns(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& horns() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_horns();
  
  // optional bool fresh_raw_hide = 10;
  inline bool has_fresh_raw_hide() const;
  inline void clear_fresh_raw_hide();
  static const int kFreshRawHideFieldNumber = 10;
  inline bool fresh_raw_hide() const;
  inline void set_fresh_raw_hide(bool value);
  
  // optional bool rotten_raw_hide = 11;
  inline bool has_rotten_raw_hide() const;
  inline void clear_rotten_raw_hide();
  static const int kRottenRawHideFieldNumber = 11;
  inline bool rotten_raw_hide() const;
  inline void set_rotten_raw_hide(bool value);
  
  // @@protoc_insertion_point(class_scope:dfstockpiles.StockpileSettings.RefuseSet)
 private:
  inline void set_has_fresh_raw_hide();
  inline void clear_has_fresh_raw_hide();
  inline void set_has_rotten_raw_hide();
  inline void clear_has_rotten_raw_hide();
  
  ::google::protobuf::RepeatedPtrField< ::std::string> type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> corpses_;
  ::google::protobuf::RepeatedPtrField< ::std::string> body_parts_;
  ::google::protobuf::RepeatedPtrField< ::std::string> skulls_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bones_;
  ::google::protobuf::RepeatedPtrField< ::std::string> hair_;
  ::google::protobuf::RepeatedPtrField< ::std::string> shells_;
  ::google::protobuf::RepeatedPtrField< ::std::string> teeth_;
  ::google::protobuf::RepeatedPtrField< ::std::string> horns_;
  bool fresh_raw_hide_;
  bool rotten_raw_hide_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpiles_2eproto();
  friend void protobuf_AssignDesc_stockpiles_2eproto();
  friend void protobuf_ShutdownFile_stockpiles_2eproto();
  
  void InitAsDefaultInstance();
  static StockpileSettings_RefuseSet* default_instance_;
};
// -------------------------------------------------------------------

class StockpileSettings_StoneSet : public ::google::protobuf::MessageLite {
 public:
  StockpileSettings_StoneSet();
  virtual ~StockpileSettings_StoneSet();
  
  StockpileSettings_StoneSet(const StockpileSettings_StoneSet& from);
  
  inline StockpileSettings_StoneSet& operator=(const StockpileSettings_StoneSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const StockpileSettings_StoneSet& default_instance();
  
  void Swap(StockpileSettings_StoneSet* other);
  
  // implements Message ----------------------------------------------
  
  StockpileSettings_StoneSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StockpileSettings_StoneSet& from);
  void MergeFrom(const StockpileSettings_StoneSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string mats = 1;
  inline int mats_size() const;
  inline void clear_mats();
  static const int kMatsFieldNumber = 1;
  inline const ::std::string& mats(int index) const;
  inline ::std::string* mutable_mats(int index);
  inline void set_mats(int index, const ::std::string& value);
  inline void set_mats(int index, const char* value);
  inline void set_mats(int index, const char* value, size_t size);
  inline ::std::string* add_mats();
  inline void add_mats(const ::std::string& value);
  inline void add_mats(const char* value);
  inline void add_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mats();
  
  // @@protoc_insertion_point(class_scope:dfstockpiles.StockpileSettings.StoneSet)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::std::string> mats_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpiles_2eproto();
  friend void protobuf_AssignDesc_stockpiles_2eproto();
  friend void protobuf_ShutdownFile_stockpiles_2eproto();
  
  void InitAsDefaultInstance();
  static StockpileSettings_StoneSet* default_instance_;
};
// -------------------------------------------------------------------

class StockpileSettings_OreSet : public ::google::protobuf::MessageLite {
 public:
  StockpileSettings_OreSet();
  virtual ~StockpileSettings_OreSet();
  
  StockpileSettings_OreSet(const StockpileSettings_OreSet& from);
  
  inline StockpileSettings_OreSet& operator=(const StockpileSettings_OreSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const StockpileSettings_OreSet& default_instance();
  
  void Swap(StockpileSettings_OreSet* other);
  
  // implements Message ----------------------------------------------
  
  StockpileSettings_OreSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StockpileSettings_OreSet& from);
  void MergeFrom(const StockpileSettings_OreSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string mats = 1;
  inline int mats_size() const;
  inline void clear_mats();
  static const int kMatsFieldNumber = 1;
  inline const ::std::string& mats(int index) const;
  inline ::std::string* mutable_mats(int index);
  inline void set_mats(int index, const ::std::string& value);
  inline void set_mats(int index, const char* value);
  inline void set_mats(int index, const char* value, size_t size);
  inline ::std::string* add_mats();
  inline void add_mats(const ::std::string& value);
  inline void add_mats(const char* value);
  inline void add_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mats();
  
  // @@protoc_insertion_point(class_scope:dfstockpiles.StockpileSettings.OreSet)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::std::string> mats_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpiles_2eproto();
  friend void protobuf_AssignDesc_stockpiles_2eproto();
  friend void protobuf_ShutdownFile_stockpiles_2eproto();
  
  void InitAsDefaultInstance();
  static StockpileSettings_OreSet* default_instance_;
};
// -------------------------------------------------------------------

class StockpileSettings_AmmoSet : public ::google::protobuf::MessageLite {
 public:
  StockpileSettings_AmmoSet();
  virtual ~StockpileSettings_AmmoSet();
  
  StockpileSettings_AmmoSet(const StockpileSettings_AmmoSet& from);
  
  inline StockpileSettings_AmmoSet& operator=(const StockpileSettings_AmmoSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const StockpileSettings_AmmoSet& default_instance();
  
  void Swap(StockpileSettings_AmmoSet* other);
  
  // implements Message ----------------------------------------------
  
  StockpileSettings_AmmoSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StockpileSettings_AmmoSet& from);
  void MergeFrom(const StockpileSettings_AmmoSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string type = 1;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type(int index) const;
  inline ::std::string* mutable_type(int index);
  inline void set_type(int index, const ::std::string& value);
  inline void set_type(int index, const char* value);
  inline void set_type(int index, const char* value, size_t size);
  inline ::std::string* add_type();
  inline void add_type(const ::std::string& value);
  inline void add_type(const char* value);
  inline void add_type(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& type() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_type();
  
  // repeated string other_mats = 2;
  inline int other_mats_size() const;
  inline void clear_other_mats();
  static const int kOtherMatsFieldNumber = 2;
  inline const ::std::string& other_mats(int index) const;
  inline ::std::string* mutable_other_mats(int index);
  inline void set_other_mats(int index, const ::std::string& value);
  inline void set_other_mats(int index, const char* value);
  inline void set_other_mats(int index, const char* value, size_t size);
  inline ::std::string* add_other_mats();
  inline void add_other_mats(const ::std::string& value);
  inline void add_other_mats(const char* value);
  inline void add_other_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& other_mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_other_mats();
  
  // repeated string mats = 3;
  inline int mats_size() const;
  inline void clear_mats();
  static const int kMatsFieldNumber = 3;
  inline const ::std::string& mats(int index) const;
  inline ::std::string* mutable_mats(int index);
  inline void set_mats(int index, const ::std::string& value);
  inline void set_mats(int index, const char* value);
  inline void set_mats(int index, const char* value, size_t size);
  inline ::std::string* add_mats();
  inline void add_mats(const ::std::string& value);
  inline void add_mats(const char* value);
  inline void add_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mats();
  
  // repeated string quality_core = 4;
  inline int quality_core_size() const;
  inline void clear_quality_core();
  static const int kQualityCoreFieldNumber = 4;
  inline const ::std::string& quality_core(int index) const;
  inline ::std::string* mutable_quality_core(int index);
  inline void set_quality_core(int index, const ::std::string& value);
  inline void set_quality_core(int index, const char* value);
  inline void set_quality_core(int index, const char* value, size_t size);
  inline ::std::string* add_quality_core();
  inline void add_quality_core(const ::std::string& value);
  inline void add_quality_core(const char* value);
  inline void add_quality_core(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& quality_core() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_quality_core();
  
  // repeated string quality_total = 5;
  inline int quality_total_size() const;
  inline void clear_quality_total();
  static const int kQualityTotalFieldNumber = 5;
  inline const ::std::string& quality_total(int index) const;
  inline ::std::string* mutable_quality_total(int index);
  inline void set_quality_total(int index, const ::std::string& value);
  inline void set_quality_total(int index, const char* value);
  inline void set_quality_total(int index, const char* value, size_t size);
  inline ::std::string* add_quality_total();
  inline void add_quality_total(const ::std::string& value);
  inline void add_quality_total(const char* value);
  inline void add_quality_total(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& quality_total() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_quality_total();
  
  // @@protoc_insertion_point(class_scope:dfstockpiles.StockpileSettings.AmmoSet)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::std::string> type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> other_mats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> quality_core_;
  ::google::protobuf::RepeatedPtrField< ::std::string> quality_total_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpiles_2eproto();
  friend void protobuf_AssignDesc_stockpiles_2eproto();
  friend void protobuf_ShutdownFile_stockpiles_2eproto();
  
  void InitAsDefaultInstance();
  static StockpileSettings_AmmoSet* default_instance_;
};
// -------------------------------------------------------------------

class StockpileSettings_CoinSet : public ::google::protobuf::MessageLite {
 public:
  StockpileSettings_CoinSet();
  virtual ~StockpileSettings_CoinSet();
  
  StockpileSettings_CoinSet(const StockpileSettings_CoinSet& from);
  
  inline StockpileSettings_CoinSet& operator=(const StockpileSettings_CoinSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const StockpileSettings_CoinSet& default_instance();
  
  void Swap(StockpileSettings_CoinSet* other);
  
  // implements Message ----------------------------------------------
  
  StockpileSettings_CoinSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StockpileSettings_CoinSet& from);
  void MergeFrom(const StockpileSettings_CoinSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string mats = 1;
  inline int mats_size() const;
  inline void clear_mats();
  static const int kMatsFieldNumber = 1;
  inline const ::std::string& mats(int index) const;
  inline ::std::string* mutable_mats(int index);
  inline void set_mats(int index, const ::std::string& value);
  inline void set_mats(int index, const char* value);
  inline void set_mats(int index, const char* value, size_t size);
  inline ::std::string* add_mats();
  inline void add_mats(const ::std::string& value);
  inline void add_mats(const char* value);
  inline void add_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mats();
  
  // @@protoc_insertion_point(class_scope:dfstockpiles.StockpileSettings.CoinSet)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::std::string> mats_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpiles_2eproto();
  friend void protobuf_AssignDesc_stockpiles_2eproto();
  friend void protobuf_ShutdownFile_stockpiles_2eproto();
  
  void InitAsDefaultInstance();
  static StockpileSettings_CoinSet* default_instance_;
};
// -------------------------------------------------------------------

class StockpileSettings_BarsBlocksSet : public ::google::protobuf::MessageLite {
 public:
  StockpileSettings_BarsBlocksSet();
  virtual ~StockpileSettings_BarsBlocksSet();
  
  StockpileSettings_BarsBlocksSet(const StockpileSettings_BarsBlocksSet& from);
  
  inline StockpileSettings_BarsBlocksSet& operator=(const StockpileSettings_BarsBlocksSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const StockpileSettings_BarsBlocksSet& default_instance();
  
  void Swap(StockpileSettings_BarsBlocksSet* other);
  
  // implements Message ----------------------------------------------
  
  StockpileSettings_BarsBlocksSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StockpileSettings_BarsBlocksSet& from);
  void MergeFrom(const StockpileSettings_BarsBlocksSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string bars_other_mats = 1;
  inline int bars_other_mats_size() const;
  inline void clear_bars_other_mats();
  static const int kBarsOtherMatsFieldNumber = 1;
  inline const ::std::string& bars_other_mats(int index) const;
  inline ::std::string* mutable_bars_other_mats(int index);
  inline void set_bars_other_mats(int index, const ::std::string& value);
  inline void set_bars_other_mats(int index, const char* value);
  inline void set_bars_other_mats(int index, const char* value, size_t size);
  inline ::std::string* add_bars_other_mats();
  inline void add_bars_other_mats(const ::std::string& value);
  inline void add_bars_other_mats(const char* value);
  inline void add_bars_other_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bars_other_mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bars_other_mats();
  
  // repeated string blocks_other_mats = 2;
  inline int blocks_other_mats_size() const;
  inline void clear_blocks_other_mats();
  static const int kBlocksOtherMatsFieldNumber = 2;
  inline const ::std::string& blocks_other_mats(int index) const;
  inline ::std::string* mutable_blocks_other_mats(int index);
  inline void set_blocks_other_mats(int index, const ::std::string& value);
  inline void set_blocks_other_mats(int index, const char* value);
  inline void set_blocks_other_mats(int index, const char* value, size_t size);
  inline ::std::string* add_blocks_other_mats();
  inline void add_blocks_other_mats(const ::std::string& value);
  inline void add_blocks_other_mats(const char* value);
  inline void add_blocks_other_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& blocks_other_mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_blocks_other_mats();
  
  // repeated string bars_mats = 3;
  inline int bars_mats_size() const;
  inline void clear_bars_mats();
  static const int kBarsMatsFieldNumber = 3;
  inline const ::std::string& bars_mats(int index) const;
  inline ::std::string* mutable_bars_mats(int index);
  inline void set_bars_mats(int index, const ::std::string& value);
  inline void set_bars_mats(int index, const char* value);
  inline void set_bars_mats(int index, const char* value, size_t size);
  inline ::std::string* add_bars_mats();
  inline void add_bars_mats(const ::std::string& value);
  inline void add_bars_mats(const char* value);
  inline void add_bars_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bars_mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bars_mats();
  
  // repeated string blocks_mats = 4;
  inline int blocks_mats_size() const;
  inline void clear_blocks_mats();
  static const int kBlocksMatsFieldNumber = 4;
  inline const ::std::string& blocks_mats(int index) const;
  inline ::std::string* mutable_blocks_mats(int index);
  inline void set_blocks_mats(int index, const ::std::string& value);
  inline void set_blocks_mats(int index, const char* value);
  inline void set_blocks_mats(int index, const char* value, size_t size);
  inline ::std::string* add_blocks_mats();
  inline void add_blocks_mats(const ::std::string& value);
  inline void add_blocks_mats(const char* value);
  inline void add_blocks_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& blocks_mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_blocks_mats();
  
  // @@protoc_insertion_point(class_scope:dfstockpiles.StockpileSettings.BarsBlocksSet)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::std::string> bars_other_mats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> blocks_other_mats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bars_mats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> blocks_mats_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpiles_2eproto();
  friend void protobuf_AssignDesc_stockpiles_2eproto();
  friend void protobuf_ShutdownFile_stockpiles_2eproto();
  
  void InitAsDefaultInstance();
  static StockpileSettings_BarsBlocksSet* default_instance_;
};
// -------------------------------------------------------------------

class StockpileSettings_GemsSet : public ::google::protobuf::MessageLite {
 public:
  StockpileSettings_GemsSet();
  virtual ~StockpileSettings_GemsSet();
  
  StockpileSettings_GemsSet(const StockpileSettings_GemsSet& from);
  
  inline StockpileSettings_GemsSet& operator=(const StockpileSettings_GemsSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const StockpileSettings_GemsSet& default_instance();
  
  void Swap(StockpileSettings_GemsSet* other);
  
  // implements Message ----------------------------------------------
  
  StockpileSettings_GemsSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StockpileSettings_GemsSet& from);
  void MergeFrom(const StockpileSettings_GemsSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string rough_other_mats = 1;
  inline int rough_other_mats_size() const;
  inline void clear_rough_other_mats();
  static const int kRoughOtherMatsFieldNumber = 1;
  inline const ::std::string& rough_other_mats(int index) const;
  inline ::std::string* mutable_rough_other_mats(int index);
  inline void set_rough_other_mats(int index, const ::std::string& value);
  inline void set_rough_other_mats(int index, const char* value);
  inline void set_rough_other_mats(int index, const char* value, size_t size);
  inline ::std::string* add_rough_other_mats();
  inline void add_rough_other_mats(const ::std::string& value);
  inline void add_rough_other_mats(const char* value);
  inline void add_rough_other_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& rough_other_mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_rough_other_mats();
  
  // repeated string cut_other_mats = 2;
  inline int cut_other_mats_size() const;
  inline void clear_cut_other_mats();
  static const int kCutOtherMatsFieldNumber = 2;
  inline const ::std::string& cut_other_mats(int index) const;
  inline ::std::string* mutable_cut_other_mats(int index);
  inline void set_cut_other_mats(int index, const ::std::string& value);
  inline void set_cut_other_mats(int index, const char* value);
  inline void set_cut_other_mats(int index, const char* value, size_t size);
  inline ::std::string* add_cut_other_mats();
  inline void add_cut_other_mats(const ::std::string& value);
  inline void add_cut_other_mats(const char* value);
  inline void add_cut_other_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cut_other_mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cut_other_mats();
  
  // repeated string rough_mats = 3;
  inline int rough_mats_size() const;
  inline void clear_rough_mats();
  static const int kRoughMatsFieldNumber = 3;
  inline const ::std::string& rough_mats(int index) const;
  inline ::std::string* mutable_rough_mats(int index);
  inline void set_rough_mats(int index, const ::std::string& value);
  inline void set_rough_mats(int index, const char* value);
  inline void set_rough_mats(int index, const char* value, size_t size);
  inline ::std::string* add_rough_mats();
  inline void add_rough_mats(const ::std::string& value);
  inline void add_rough_mats(const char* value);
  inline void add_rough_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& rough_mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_rough_mats();
  
  // repeated string cut_mats = 4;
  inline int cut_mats_size() const;
  inline void clear_cut_mats();
  static const int kCutMatsFieldNumber = 4;
  inline const ::std::string& cut_mats(int index) const;
  inline ::std::string* mutable_cut_mats(int index);
  inline void set_cut_mats(int index, const ::std::string& value);
  inline void set_cut_mats(int index, const char* value);
  inline void set_cut_mats(int index, const char* value, size_t size);
  inline ::std::string* add_cut_mats();
  inline void add_cut_mats(const ::std::string& value);
  inline void add_cut_mats(const char* value);
  inline void add_cut_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cut_mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cut_mats();
  
  // @@protoc_insertion_point(class_scope:dfstockpiles.StockpileSettings.GemsSet)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::std::string> rough_other_mats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cut_other_mats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> rough_mats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cut_mats_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpiles_2eproto();
  friend void protobuf_AssignDesc_stockpiles_2eproto();
  friend void protobuf_ShutdownFile_stockpiles_2eproto();
  
  void InitAsDefaultInstance();
  static StockpileSettings_GemsSet* default_instance_;
};
// -------------------------------------------------------------------

class StockpileSettings_FinishedGoodsSet : public ::google::protobuf::MessageLite {
 public:
  StockpileSettings_FinishedGoodsSet();
  virtual ~StockpileSettings_FinishedGoodsSet();
  
  StockpileSettings_FinishedGoodsSet(const StockpileSettings_FinishedGoodsSet& from);
  
  inline StockpileSettings_FinishedGoodsSet& operator=(const StockpileSettings_FinishedGoodsSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const StockpileSettings_FinishedGoodsSet& default_instance();
  
  void Swap(StockpileSettings_FinishedGoodsSet* other);
  
  // implements Message ----------------------------------------------
  
  StockpileSettings_FinishedGoodsSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StockpileSettings_FinishedGoodsSet& from);
  void MergeFrom(const StockpileSettings_FinishedGoodsSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string type = 1;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type(int index) const;
  inline ::std::string* mutable_type(int index);
  inline void set_type(int index, const ::std::string& value);
  inline void set_type(int index, const char* value);
  inline void set_type(int index, const char* value, size_t size);
  inline ::std::string* add_type();
  inline void add_type(const ::std::string& value);
  inline void add_type(const char* value);
  inline void add_type(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& type() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_type();
  
  // repeated string other_mats = 2;
  inline int other_mats_size() const;
  inline void clear_other_mats();
  static const int kOtherMatsFieldNumber = 2;
  inline const ::std::string& other_mats(int index) const;
  inline ::std::string* mutable_other_mats(int index);
  inline void set_other_mats(int index, const ::std::string& value);
  inline void set_other_mats(int index, const char* value);
  inline void set_other_mats(int index, const char* value, size_t size);
  inline ::std::string* add_other_mats();
  inline void add_other_mats(const ::std::string& value);
  inline void add_other_mats(const char* value);
  inline void add_other_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& other_mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_other_mats();
  
  // repeated string mats = 3;
  inline int mats_size() const;
  inline void clear_mats();
  static const int kMatsFieldNumber = 3;
  inline const ::std::string& mats(int index) const;
  inline ::std::string* mutable_mats(int index);
  inline void set_mats(int index, const ::std::string& value);
  inline void set_mats(int index, const char* value);
  inline void set_mats(int index, const char* value, size_t size);
  inline ::std::string* add_mats();
  inline void add_mats(const ::std::string& value);
  inline void add_mats(const char* value);
  inline void add_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mats();
  
  // repeated string quality_core = 4;
  inline int quality_core_size() const;
  inline void clear_quality_core();
  static const int kQualityCoreFieldNumber = 4;
  inline const ::std::string& quality_core(int index) const;
  inline ::std::string* mutable_quality_core(int index);
  inline void set_quality_core(int index, const ::std::string& value);
  inline void set_quality_core(int index, const char* value);
  inline void set_quality_core(int index, const char* value, size_t size);
  inline ::std::string* add_quality_core();
  inline void add_quality_core(const ::std::string& value);
  inline void add_quality_core(const char* value);
  inline void add_quality_core(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& quality_core() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_quality_core();
  
  // repeated string quality_total = 5;
  inline int quality_total_size() const;
  inline void clear_quality_total();
  static const int kQualityTotalFieldNumber = 5;
  inline const ::std::string& quality_total(int index) const;
  inline ::std::string* mutable_quality_total(int index);
  inline void set_quality_total(int index, const ::std::string& value);
  inline void set_quality_total(int index, const char* value);
  inline void set_quality_total(int index, const char* value, size_t size);
  inline ::std::string* add_quality_total();
  inline void add_quality_total(const ::std::string& value);
  inline void add_quality_total(const char* value);
  inline void add_quality_total(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& quality_total() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_quality_total();
  
  // @@protoc_insertion_point(class_scope:dfstockpiles.StockpileSettings.FinishedGoodsSet)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::std::string> type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> other_mats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> quality_core_;
  ::google::protobuf::RepeatedPtrField< ::std::string> quality_total_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpiles_2eproto();
  friend void protobuf_AssignDesc_stockpiles_2eproto();
  friend void protobuf_ShutdownFile_stockpiles_2eproto();
  
  void InitAsDefaultInstance();
  static StockpileSettings_FinishedGoodsSet* default_instance_;
};
// -------------------------------------------------------------------

class StockpileSettings_LeatherSet : public ::google::protobuf::MessageLite {
 public:
  StockpileSettings_LeatherSet();
  virtual ~StockpileSettings_LeatherSet();
  
  StockpileSettings_LeatherSet(const StockpileSettings_LeatherSet& from);
  
  inline StockpileSettings_LeatherSet& operator=(const StockpileSettings_LeatherSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const StockpileSettings_LeatherSet& default_instance();
  
  void Swap(StockpileSettings_LeatherSet* other);
  
  // implements Message ----------------------------------------------
  
  StockpileSettings_LeatherSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StockpileSettings_LeatherSet& from);
  void MergeFrom(const StockpileSettings_LeatherSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string mats = 1;
  inline int mats_size() const;
  inline void clear_mats();
  static const int kMatsFieldNumber = 1;
  inline const ::std::string& mats(int index) const;
  inline ::std::string* mutable_mats(int index);
  inline void set_mats(int index, const ::std::string& value);
  inline void set_mats(int index, const char* value);
  inline void set_mats(int index, const char* value, size_t size);
  inline ::std::string* add_mats();
  inline void add_mats(const ::std::string& value);
  inline void add_mats(const char* value);
  inline void add_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mats();
  
  // @@protoc_insertion_point(class_scope:dfstockpiles.StockpileSettings.LeatherSet)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::std::string> mats_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpiles_2eproto();
  friend void protobuf_AssignDesc_stockpiles_2eproto();
  friend void protobuf_ShutdownFile_stockpiles_2eproto();
  
  void InitAsDefaultInstance();
  static StockpileSettings_LeatherSet* default_instance_;
};
// -------------------------------------------------------------------

class StockpileSettings_ClothSet : public ::google::protobuf::MessageLite {
 public:
  StockpileSettings_ClothSet();
  virtual ~StockpileSettings_ClothSet();
  
  StockpileSettings_ClothSet(const StockpileSettings_ClothSet& from);
  
  inline StockpileSettings_ClothSet& operator=(const StockpileSettings_ClothSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const StockpileSettings_ClothSet& default_instance();
  
  void Swap(StockpileSettings_ClothSet* other);
  
  // implements Message ----------------------------------------------
  
  StockpileSettings_ClothSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StockpileSettings_ClothSet& from);
  void MergeFrom(const StockpileSettings_ClothSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string thread_silk = 1;
  inline int thread_silk_size() const;
  inline void clear_thread_silk();
  static const int kThreadSilkFieldNumber = 1;
  inline const ::std::string& thread_silk(int index) const;
  inline ::std::string* mutable_thread_silk(int index);
  inline void set_thread_silk(int index, const ::std::string& value);
  inline void set_thread_silk(int index, const char* value);
  inline void set_thread_silk(int index, const char* value, size_t size);
  inline ::std::string* add_thread_silk();
  inline void add_thread_silk(const ::std::string& value);
  inline void add_thread_silk(const char* value);
  inline void add_thread_silk(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& thread_silk() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_thread_silk();
  
  // repeated string thread_plant = 2;
  inline int thread_plant_size() const;
  inline void clear_thread_plant();
  static const int kThreadPlantFieldNumber = 2;
  inline const ::std::string& thread_plant(int index) const;
  inline ::std::string* mutable_thread_plant(int index);
  inline void set_thread_plant(int index, const ::std::string& value);
  inline void set_thread_plant(int index, const char* value);
  inline void set_thread_plant(int index, const char* value, size_t size);
  inline ::std::string* add_thread_plant();
  inline void add_thread_plant(const ::std::string& value);
  inline void add_thread_plant(const char* value);
  inline void add_thread_plant(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& thread_plant() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_thread_plant();
  
  // repeated string thread_yarn = 3;
  inline int thread_yarn_size() const;
  inline void clear_thread_yarn();
  static const int kThreadYarnFieldNumber = 3;
  inline const ::std::string& thread_yarn(int index) const;
  inline ::std::string* mutable_thread_yarn(int index);
  inline void set_thread_yarn(int index, const ::std::string& value);
  inline void set_thread_yarn(int index, const char* value);
  inline void set_thread_yarn(int index, const char* value, size_t size);
  inline ::std::string* add_thread_yarn();
  inline void add_thread_yarn(const ::std::string& value);
  inline void add_thread_yarn(const char* value);
  inline void add_thread_yarn(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& thread_yarn() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_thread_yarn();
  
  // repeated string thread_metal = 4;
  inline int thread_metal_size() const;
  inline void clear_thread_metal();
  static const int kThreadMetalFieldNumber = 4;
  inline const ::std::string& thread_metal(int index) const;
  inline ::std::string* mutable_thread_metal(int index);
  inline void set_thread_metal(int index, const ::std::string& value);
  inline void set_thread_metal(int index, const char* value);
  inline void set_thread_metal(int index, const char* value, size_t size);
  inline ::std::string* add_thread_metal();
  inline void add_thread_metal(const ::std::string& value);
  inline void add_thread_metal(const char* value);
  inline void add_thread_metal(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& thread_metal() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_thread_metal();
  
  // repeated string cloth_silk = 5;
  inline int cloth_silk_size() const;
  inline void clear_cloth_silk();
  static const int kClothSilkFieldNumber = 5;
  inline const ::std::string& cloth_silk(int index) const;
  inline ::std::string* mutable_cloth_silk(int index);
  inline void set_cloth_silk(int index, const ::std::string& value);
  inline void set_cloth_silk(int index, const char* value);
  inline void set_cloth_silk(int index, const char* value, size_t size);
  inline ::std::string* add_cloth_silk();
  inline void add_cloth_silk(const ::std::string& value);
  inline void add_cloth_silk(const char* value);
  inline void add_cloth_silk(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cloth_silk() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cloth_silk();
  
  // repeated string cloth_plant = 6;
  inline int cloth_plant_size() const;
  inline void clear_cloth_plant();
  static const int kClothPlantFieldNumber = 6;
  inline const ::std::string& cloth_plant(int index) const;
  inline ::std::string* mutable_cloth_plant(int index);
  inline void set_cloth_plant(int index, const ::std::string& value);
  inline void set_cloth_plant(int index, const char* value);
  inline void set_cloth_plant(int index, const char* value, size_t size);
  inline ::std::string* add_cloth_plant();
  inline void add_cloth_plant(const ::std::string& value);
  inline void add_cloth_plant(const char* value);
  inline void add_cloth_plant(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cloth_plant() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cloth_plant();
  
  // repeated string cloth_yarn = 7;
  inline int cloth_yarn_size() const;
  inline void clear_cloth_yarn();
  static const int kClothYarnFieldNumber = 7;
  inline const ::std::string& cloth_yarn(int index) const;
  inline ::std::string* mutable_cloth_yarn(int index);
  inline void set_cloth_yarn(int index, const ::std::string& value);
  inline void set_cloth_yarn(int index, const char* value);
  inline void set_cloth_yarn(int index, const char* value, size_t size);
  inline ::std::string* add_cloth_yarn();
  inline void add_cloth_yarn(const ::std::string& value);
  inline void add_cloth_yarn(const char* value);
  inline void add_cloth_yarn(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cloth_yarn() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cloth_yarn();
  
  // repeated string cloth_metal = 8;
  inline int cloth_metal_size() const;
  inline void clear_cloth_metal();
  static const int kClothMetalFieldNumber = 8;
  inline const ::std::string& cloth_metal(int index) const;
  inline ::std::string* mutable_cloth_metal(int index);
  inline void set_cloth_metal(int index, const ::std::string& value);
  inline void set_cloth_metal(int index, const char* value);
  inline void set_cloth_metal(int index, const char* value, size_t size);
  inline ::std::string* add_cloth_metal();
  inline void add_cloth_metal(const ::std::string& value);
  inline void add_cloth_metal(const char* value);
  inline void add_cloth_metal(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cloth_metal() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cloth_metal();
  
  // @@protoc_insertion_point(class_scope:dfstockpiles.StockpileSettings.ClothSet)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::std::string> thread_silk_;
  ::google::protobuf::RepeatedPtrField< ::std::string> thread_plant_;
  ::google::protobuf::RepeatedPtrField< ::std::string> thread_yarn_;
  ::google::protobuf::RepeatedPtrField< ::std::string> thread_metal_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cloth_silk_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cloth_plant_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cloth_yarn_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cloth_metal_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpiles_2eproto();
  friend void protobuf_AssignDesc_stockpiles_2eproto();
  friend void protobuf_ShutdownFile_stockpiles_2eproto();
  
  void InitAsDefaultInstance();
  static StockpileSettings_ClothSet* default_instance_;
};
// -------------------------------------------------------------------

class StockpileSettings_WoodSet : public ::google::protobuf::MessageLite {
 public:
  StockpileSettings_WoodSet();
  virtual ~StockpileSettings_WoodSet();
  
  StockpileSettings_WoodSet(const StockpileSettings_WoodSet& from);
  
  inline StockpileSettings_WoodSet& operator=(const StockpileSettings_WoodSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const StockpileSettings_WoodSet& default_instance();
  
  void Swap(StockpileSettings_WoodSet* other);
  
  // implements Message ----------------------------------------------
  
  StockpileSettings_WoodSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StockpileSettings_WoodSet& from);
  void MergeFrom(const StockpileSettings_WoodSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string mats = 1;
  inline int mats_size() const;
  inline void clear_mats();
  static const int kMatsFieldNumber = 1;
  inline const ::std::string& mats(int index) const;
  inline ::std::string* mutable_mats(int index);
  inline void set_mats(int index, const ::std::string& value);
  inline void set_mats(int index, const char* value);
  inline void set_mats(int index, const char* value, size_t size);
  inline ::std::string* add_mats();
  inline void add_mats(const ::std::string& value);
  inline void add_mats(const char* value);
  inline void add_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mats();
  
  // @@protoc_insertion_point(class_scope:dfstockpiles.StockpileSettings.WoodSet)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::std::string> mats_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpiles_2eproto();
  friend void protobuf_AssignDesc_stockpiles_2eproto();
  friend void protobuf_ShutdownFile_stockpiles_2eproto();
  
  void InitAsDefaultInstance();
  static StockpileSettings_WoodSet* default_instance_;
};
// -------------------------------------------------------------------

class StockpileSettings_WeaponsSet : public ::google::protobuf::MessageLite {
 public:
  StockpileSettings_WeaponsSet();
  virtual ~StockpileSettings_WeaponsSet();
  
  StockpileSettings_WeaponsSet(const StockpileSettings_WeaponsSet& from);
  
  inline StockpileSettings_WeaponsSet& operator=(const StockpileSettings_WeaponsSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const StockpileSettings_WeaponsSet& default_instance();
  
  void Swap(StockpileSettings_WeaponsSet* other);
  
  // implements Message ----------------------------------------------
  
  StockpileSettings_WeaponsSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StockpileSettings_WeaponsSet& from);
  void MergeFrom(const StockpileSettings_WeaponsSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string weapon_type = 1;
  inline int weapon_type_size() const;
  inline void clear_weapon_type();
  static const int kWeaponTypeFieldNumber = 1;
  inline const ::std::string& weapon_type(int index) const;
  inline ::std::string* mutable_weapon_type(int index);
  inline void set_weapon_type(int index, const ::std::string& value);
  inline void set_weapon_type(int index, const char* value);
  inline void set_weapon_type(int index, const char* value, size_t size);
  inline ::std::string* add_weapon_type();
  inline void add_weapon_type(const ::std::string& value);
  inline void add_weapon_type(const char* value);
  inline void add_weapon_type(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& weapon_type() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_weapon_type();
  
  // repeated string trapcomp_type = 2;
  inline int trapcomp_type_size() const;
  inline void clear_trapcomp_type();
  static const int kTrapcompTypeFieldNumber = 2;
  inline const ::std::string& trapcomp_type(int index) const;
  inline ::std::string* mutable_trapcomp_type(int index);
  inline void set_trapcomp_type(int index, const ::std::string& value);
  inline void set_trapcomp_type(int index, const char* value);
  inline void set_trapcomp_type(int index, const char* value, size_t size);
  inline ::std::string* add_trapcomp_type();
  inline void add_trapcomp_type(const ::std::string& value);
  inline void add_trapcomp_type(const char* value);
  inline void add_trapcomp_type(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& trapcomp_type() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_trapcomp_type();
  
  // repeated string other_mats = 3;
  inline int other_mats_size() const;
  inline void clear_other_mats();
  static const int kOtherMatsFieldNumber = 3;
  inline const ::std::string& other_mats(int index) const;
  inline ::std::string* mutable_other_mats(int index);
  inline void set_other_mats(int index, const ::std::string& value);
  inline void set_other_mats(int index, const char* value);
  inline void set_other_mats(int index, const char* value, size_t size);
  inline ::std::string* add_other_mats();
  inline void add_other_mats(const ::std::string& value);
  inline void add_other_mats(const char* value);
  inline void add_other_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& other_mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_other_mats();
  
  // repeated string mats = 4;
  inline int mats_size() const;
  inline void clear_mats();
  static const int kMatsFieldNumber = 4;
  inline const ::std::string& mats(int index) const;
  inline ::std::string* mutable_mats(int index);
  inline void set_mats(int index, const ::std::string& value);
  inline void set_mats(int index, const char* value);
  inline void set_mats(int index, const char* value, size_t size);
  inline ::std::string* add_mats();
  inline void add_mats(const ::std::string& value);
  inline void add_mats(const char* value);
  inline void add_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mats();
  
  // repeated string quality_core = 5;
  inline int quality_core_size() const;
  inline void clear_quality_core();
  static const int kQualityCoreFieldNumber = 5;
  inline const ::std::string& quality_core(int index) const;
  inline ::std::string* mutable_quality_core(int index);
  inline void set_quality_core(int index, const ::std::string& value);
  inline void set_quality_core(int index, const char* value);
  inline void set_quality_core(int index, const char* value, size_t size);
  inline ::std::string* add_quality_core();
  inline void add_quality_core(const ::std::string& value);
  inline void add_quality_core(const char* value);
  inline void add_quality_core(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& quality_core() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_quality_core();
  
  // repeated string quality_total = 6;
  inline int quality_total_size() const;
  inline void clear_quality_total();
  static const int kQualityTotalFieldNumber = 6;
  inline const ::std::string& quality_total(int index) const;
  inline ::std::string* mutable_quality_total(int index);
  inline void set_quality_total(int index, const ::std::string& value);
  inline void set_quality_total(int index, const char* value);
  inline void set_quality_total(int index, const char* value, size_t size);
  inline ::std::string* add_quality_total();
  inline void add_quality_total(const ::std::string& value);
  inline void add_quality_total(const char* value);
  inline void add_quality_total(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& quality_total() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_quality_total();
  
  // optional bool usable = 7;
  inline bool has_usable() const;
  inline void clear_usable();
  static const int kUsableFieldNumber = 7;
  inline bool usable() const;
  inline void set_usable(bool value);
  
  // optional bool unusable = 8;
  inline bool has_unusable() const;
  inline void clear_unusable();
  static const int kUnusableFieldNumber = 8;
  inline bool unusable() const;
  inline void set_unusable(bool value);
  
  // @@protoc_insertion_point(class_scope:dfstockpiles.StockpileSettings.WeaponsSet)
 private:
  inline void set_has_usable();
  inline void clear_has_usable();
  inline void set_has_unusable();
  inline void clear_has_unusable();
  
  ::google::protobuf::RepeatedPtrField< ::std::string> weapon_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> trapcomp_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> other_mats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> quality_core_;
  ::google::protobuf::RepeatedPtrField< ::std::string> quality_total_;
  bool usable_;
  bool unusable_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpiles_2eproto();
  friend void protobuf_AssignDesc_stockpiles_2eproto();
  friend void protobuf_ShutdownFile_stockpiles_2eproto();
  
  void InitAsDefaultInstance();
  static StockpileSettings_WeaponsSet* default_instance_;
};
// -------------------------------------------------------------------

class StockpileSettings_ArmorSet : public ::google::protobuf::MessageLite {
 public:
  StockpileSettings_ArmorSet();
  virtual ~StockpileSettings_ArmorSet();
  
  StockpileSettings_ArmorSet(const StockpileSettings_ArmorSet& from);
  
  inline StockpileSettings_ArmorSet& operator=(const StockpileSettings_ArmorSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const StockpileSettings_ArmorSet& default_instance();
  
  void Swap(StockpileSettings_ArmorSet* other);
  
  // implements Message ----------------------------------------------
  
  StockpileSettings_ArmorSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StockpileSettings_ArmorSet& from);
  void MergeFrom(const StockpileSettings_ArmorSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string body = 1;
  inline int body_size() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 1;
  inline const ::std::string& body(int index) const;
  inline ::std::string* mutable_body(int index);
  inline void set_body(int index, const ::std::string& value);
  inline void set_body(int index, const char* value);
  inline void set_body(int index, const char* value, size_t size);
  inline ::std::string* add_body();
  inline void add_body(const ::std::string& value);
  inline void add_body(const char* value);
  inline void add_body(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& body() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_body();
  
  // repeated string head = 2;
  inline int head_size() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 2;
  inline const ::std::string& head(int index) const;
  inline ::std::string* mutable_head(int index);
  inline void set_head(int index, const ::std::string& value);
  inline void set_head(int index, const char* value);
  inline void set_head(int index, const char* value, size_t size);
  inline ::std::string* add_head();
  inline void add_head(const ::std::string& value);
  inline void add_head(const char* value);
  inline void add_head(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& head() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_head();
  
  // repeated string feet = 3;
  inline int feet_size() const;
  inline void clear_feet();
  static const int kFeetFieldNumber = 3;
  inline const ::std::string& feet(int index) const;
  inline ::std::string* mutable_feet(int index);
  inline void set_feet(int index, const ::std::string& value);
  inline void set_feet(int index, const char* value);
  inline void set_feet(int index, const char* value, size_t size);
  inline ::std::string* add_feet();
  inline void add_feet(const ::std::string& value);
  inline void add_feet(const char* value);
  inline void add_feet(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& feet() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_feet();
  
  // repeated string hands = 4;
  inline int hands_size() const;
  inline void clear_hands();
  static const int kHandsFieldNumber = 4;
  inline const ::std::string& hands(int index) const;
  inline ::std::string* mutable_hands(int index);
  inline void set_hands(int index, const ::std::string& value);
  inline void set_hands(int index, const char* value);
  inline void set_hands(int index, const char* value, size_t size);
  inline ::std::string* add_hands();
  inline void add_hands(const ::std::string& value);
  inline void add_hands(const char* value);
  inline void add_hands(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& hands() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_hands();
  
  // repeated string legs = 5;
  inline int legs_size() const;
  inline void clear_legs();
  static const int kLegsFieldNumber = 5;
  inline const ::std::string& legs(int index) const;
  inline ::std::string* mutable_legs(int index);
  inline void set_legs(int index, const ::std::string& value);
  inline void set_legs(int index, const char* value);
  inline void set_legs(int index, const char* value, size_t size);
  inline ::std::string* add_legs();
  inline void add_legs(const ::std::string& value);
  inline void add_legs(const char* value);
  inline void add_legs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& legs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_legs();
  
  // repeated string shield = 6;
  inline int shield_size() const;
  inline void clear_shield();
  static const int kShieldFieldNumber = 6;
  inline const ::std::string& shield(int index) const;
  inline ::std::string* mutable_shield(int index);
  inline void set_shield(int index, const ::std::string& value);
  inline void set_shield(int index, const char* value);
  inline void set_shield(int index, const char* value, size_t size);
  inline ::std::string* add_shield();
  inline void add_shield(const ::std::string& value);
  inline void add_shield(const char* value);
  inline void add_shield(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& shield() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_shield();
  
  // repeated string other_mats = 7;
  inline int other_mats_size() const;
  inline void clear_other_mats();
  static const int kOtherMatsFieldNumber = 7;
  inline const ::std::string& other_mats(int index) const;
  inline ::std::string* mutable_other_mats(int index);
  inline void set_other_mats(int index, const ::std::string& value);
  inline void set_other_mats(int index, const char* value);
  inline void set_other_mats(int index, const char* value, size_t size);
  inline ::std::string* add_other_mats();
  inline void add_other_mats(const ::std::string& value);
  inline void add_other_mats(const char* value);
  inline void add_other_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& other_mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_other_mats();
  
  // repeated string mats = 8;
  inline int mats_size() const;
  inline void clear_mats();
  static const int kMatsFieldNumber = 8;
  inline const ::std::string& mats(int index) const;
  inline ::std::string* mutable_mats(int index);
  inline void set_mats(int index, const ::std::string& value);
  inline void set_mats(int index, const char* value);
  inline void set_mats(int index, const char* value, size_t size);
  inline ::std::string* add_mats();
  inline void add_mats(const ::std::string& value);
  inline void add_mats(const char* value);
  inline void add_mats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mats();
  
  // repeated string quality_core = 9;
  inline int quality_core_size() const;
  inline void clear_quality_core();
  static const int kQualityCoreFieldNumber = 9;
  inline const ::std::string& quality_core(int index) const;
  inline ::std::string* mutable_quality_core(int index);
  inline void set_quality_core(int index, const ::std::string& value);
  inline void set_quality_core(int index, const char* value);
  inline void set_quality_core(int index, const char* value, size_t size);
  inline ::std::string* add_quality_core();
  inline void add_quality_core(const ::std::string& value);
  inline void add_quality_core(const char* value);
  inline void add_quality_core(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& quality_core() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_quality_core();
  
  // repeated string quality_total = 10;
  inline int quality_total_size() const;
  inline void clear_quality_total();
  static const int kQualityTotalFieldNumber = 10;
  inline const ::std::string& quality_total(int index) const;
  inline ::std::string* mutable_quality_total(int index);
  inline void set_quality_total(int index, const ::std::string& value);
  inline void set_quality_total(int index, const char* value);
  inline void set_quality_total(int index, const char* value, size_t size);
  inline ::std::string* add_quality_total();
  inline void add_quality_total(const ::std::string& value);
  inline void add_quality_total(const char* value);
  inline void add_quality_total(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& quality_total() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_quality_total();
  
  // optional bool usable = 11;
  inline bool has_usable() const;
  inline void clear_usable();
  static const int kUsableFieldNumber = 11;
  inline bool usable() const;
  inline void set_usable(bool value);
  
  // optional bool unusable = 12;
  inline bool has_unusable() const;
  inline void clear_unusable();
  static const int kUnusableFieldNumber = 12;
  inline bool unusable() const;
  inline void set_unusable(bool value);
  
  // @@protoc_insertion_point(class_scope:dfstockpiles.StockpileSettings.ArmorSet)
 private:
  inline void set_has_usable();
  inline void clear_has_usable();
  inline void set_has_unusable();
  inline void clear_has_unusable();
  
  ::google::protobuf::RepeatedPtrField< ::std::string> body_;
  ::google::protobuf::RepeatedPtrField< ::std::string> head_;
  ::google::protobuf::RepeatedPtrField< ::std::string> feet_;
  ::google::protobuf::RepeatedPtrField< ::std::string> hands_;
  ::google::protobuf::RepeatedPtrField< ::std::string> legs_;
  ::google::protobuf::RepeatedPtrField< ::std::string> shield_;
  ::google::protobuf::RepeatedPtrField< ::std::string> other_mats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> quality_core_;
  ::google::protobuf::RepeatedPtrField< ::std::string> quality_total_;
  bool usable_;
  bool unusable_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpiles_2eproto();
  friend void protobuf_AssignDesc_stockpiles_2eproto();
  friend void protobuf_ShutdownFile_stockpiles_2eproto();
  
  void InitAsDefaultInstance();
  static StockpileSettings_ArmorSet* default_instance_;
};
// -------------------------------------------------------------------

class StockpileSettings : public ::google::protobuf::MessageLite {
 public:
  StockpileSettings();
  virtual ~StockpileSettings();
  
  StockpileSettings(const StockpileSettings& from);
  
  inline StockpileSettings& operator=(const StockpileSettings& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const StockpileSettings& default_instance();
  
  void Swap(StockpileSettings* other);
  
  // implements Message ----------------------------------------------
  
  StockpileSettings* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StockpileSettings& from);
  void MergeFrom(const StockpileSettings& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef StockpileSettings_AnimalsSet AnimalsSet;
  typedef StockpileSettings_FoodSet FoodSet;
  typedef StockpileSettings_FurnitureSet FurnitureSet;
  typedef StockpileSettings_RefuseSet RefuseSet;
  typedef StockpileSettings_StoneSet StoneSet;
  typedef StockpileSettings_OreSet OreSet;
  typedef StockpileSettings_AmmoSet AmmoSet;
  typedef StockpileSettings_CoinSet CoinSet;
  typedef StockpileSettings_BarsBlocksSet BarsBlocksSet;
  typedef StockpileSettings_GemsSet GemsSet;
  typedef StockpileSettings_FinishedGoodsSet FinishedGoodsSet;
  typedef StockpileSettings_LeatherSet LeatherSet;
  typedef StockpileSettings_ClothSet ClothSet;
  typedef StockpileSettings_WoodSet WoodSet;
  typedef StockpileSettings_WeaponsSet WeaponsSet;
  typedef StockpileSettings_ArmorSet ArmorSet;
  
  // accessors -------------------------------------------------------
  
  // optional .dfstockpiles.StockpileSettings.AnimalsSet animals = 1;
  inline bool has_animals() const;
  inline void clear_animals();
  static const int kAnimalsFieldNumber = 1;
  inline const ::dfstockpiles::StockpileSettings_AnimalsSet& animals() const;
  inline ::dfstockpiles::StockpileSettings_AnimalsSet* mutable_animals();
  inline ::dfstockpiles::StockpileSettings_AnimalsSet* release_animals();
  
  // optional .dfstockpiles.StockpileSettings.FoodSet food = 2;
  inline bool has_food() const;
  inline void clear_food();
  static const int kFoodFieldNumber = 2;
  inline const ::dfstockpiles::StockpileSettings_FoodSet& food() const;
  inline ::dfstockpiles::StockpileSettings_FoodSet* mutable_food();
  inline ::dfstockpiles::StockpileSettings_FoodSet* release_food();
  
  // optional .dfstockpiles.StockpileSettings.FurnitureSet furniture = 3;
  inline bool has_furniture() const;
  inline void clear_furniture();
  static const int kFurnitureFieldNumber = 3;
  inline const ::dfstockpiles::StockpileSettings_FurnitureSet& furniture() const;
  inline ::dfstockpiles::StockpileSettings_FurnitureSet* mutable_furniture();
  inline ::dfstockpiles::StockpileSettings_FurnitureSet* release_furniture();
  
  // optional int32 unknown1 = 4;
  inline bool has_unknown1() const;
  inline void clear_unknown1();
  static const int kUnknown1FieldNumber = 4;
  inline ::google::protobuf::int32 unknown1() const;
  inline void set_unknown1(::google::protobuf::int32 value);
  
  // optional .dfstockpiles.StockpileSettings.RefuseSet refuse = 5;
  inline bool has_refuse() const;
  inline void clear_refuse();
  static const int kRefuseFieldNumber = 5;
  inline const ::dfstockpiles::StockpileSettings_RefuseSet& refuse() const;
  inline ::dfstockpiles::StockpileSettings_RefuseSet* mutable_refuse();
  inline ::dfstockpiles::StockpileSettings_RefuseSet* release_refuse();
  
  // optional .dfstockpiles.StockpileSettings.StoneSet stone = 6;
  inline bool has_stone() const;
  inline void clear_stone();
  static const int kStoneFieldNumber = 6;
  inline const ::dfstockpiles::StockpileSettings_StoneSet& stone() const;
  inline ::dfstockpiles::StockpileSettings_StoneSet* mutable_stone();
  inline ::dfstockpiles::StockpileSettings_StoneSet* release_stone();
  
  // optional .dfstockpiles.StockpileSettings.OreSet ore = 7;
  inline bool has_ore() const;
  inline void clear_ore();
  static const int kOreFieldNumber = 7;
  inline const ::dfstockpiles::StockpileSettings_OreSet& ore() const;
  inline ::dfstockpiles::StockpileSettings_OreSet* mutable_ore();
  inline ::dfstockpiles::StockpileSettings_OreSet* release_ore();
  
  // optional .dfstockpiles.StockpileSettings.AmmoSet ammo = 8;
  inline bool has_ammo() const;
  inline void clear_ammo();
  static const int kAmmoFieldNumber = 8;
  inline const ::dfstockpiles::StockpileSettings_AmmoSet& ammo() const;
  inline ::dfstockpiles::StockpileSettings_AmmoSet* mutable_ammo();
  inline ::dfstockpiles::StockpileSettings_AmmoSet* release_ammo();
  
  // optional .dfstockpiles.StockpileSettings.CoinSet coin = 9;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 9;
  inline const ::dfstockpiles::StockpileSettings_CoinSet& coin() const;
  inline ::dfstockpiles::StockpileSettings_CoinSet* mutable_coin();
  inline ::dfstockpiles::StockpileSettings_CoinSet* release_coin();
  
  // optional .dfstockpiles.StockpileSettings.BarsBlocksSet barsblocks = 10;
  inline bool has_barsblocks() const;
  inline void clear_barsblocks();
  static const int kBarsblocksFieldNumber = 10;
  inline const ::dfstockpiles::StockpileSettings_BarsBlocksSet& barsblocks() const;
  inline ::dfstockpiles::StockpileSettings_BarsBlocksSet* mutable_barsblocks();
  inline ::dfstockpiles::StockpileSettings_BarsBlocksSet* release_barsblocks();
  
  // optional .dfstockpiles.StockpileSettings.GemsSet gems = 11;
  inline bool has_gems() const;
  inline void clear_gems();
  static const int kGemsFieldNumber = 11;
  inline const ::dfstockpiles::StockpileSettings_GemsSet& gems() const;
  inline ::dfstockpiles::StockpileSettings_GemsSet* mutable_gems();
  inline ::dfstockpiles::StockpileSettings_GemsSet* release_gems();
  
  // optional .dfstockpiles.StockpileSettings.FinishedGoodsSet finished_goods = 12;
  inline bool has_finished_goods() const;
  inline void clear_finished_goods();
  static const int kFinishedGoodsFieldNumber = 12;
  inline const ::dfstockpiles::StockpileSettings_FinishedGoodsSet& finished_goods() const;
  inline ::dfstockpiles::StockpileSettings_FinishedGoodsSet* mutable_finished_goods();
  inline ::dfstockpiles::StockpileSettings_FinishedGoodsSet* release_finished_goods();
  
  // optional .dfstockpiles.StockpileSettings.LeatherSet leather = 13;
  inline bool has_leather() const;
  inline void clear_leather();
  static const int kLeatherFieldNumber = 13;
  inline const ::dfstockpiles::StockpileSettings_LeatherSet& leather() const;
  inline ::dfstockpiles::StockpileSettings_LeatherSet* mutable_leather();
  inline ::dfstockpiles::StockpileSettings_LeatherSet* release_leather();
  
  // optional .dfstockpiles.StockpileSettings.ClothSet cloth = 14;
  inline bool has_cloth() const;
  inline void clear_cloth();
  static const int kClothFieldNumber = 14;
  inline const ::dfstockpiles::StockpileSettings_ClothSet& cloth() const;
  inline ::dfstockpiles::StockpileSettings_ClothSet* mutable_cloth();
  inline ::dfstockpiles::StockpileSettings_ClothSet* release_cloth();
  
  // optional .dfstockpiles.StockpileSettings.WoodSet wood = 15;
  inline bool has_wood() const;
  inline void clear_wood();
  static const int kWoodFieldNumber = 15;
  inline const ::dfstockpiles::StockpileSettings_WoodSet& wood() const;
  inline ::dfstockpiles::StockpileSettings_WoodSet* mutable_wood();
  inline ::dfstockpiles::StockpileSettings_WoodSet* release_wood();
  
  // optional .dfstockpiles.StockpileSettings.WeaponsSet weapons = 16;
  inline bool has_weapons() const;
  inline void clear_weapons();
  static const int kWeaponsFieldNumber = 16;
  inline const ::dfstockpiles::StockpileSettings_WeaponsSet& weapons() const;
  inline ::dfstockpiles::StockpileSettings_WeaponsSet* mutable_weapons();
  inline ::dfstockpiles::StockpileSettings_WeaponsSet* release_weapons();
  
  // optional .dfstockpiles.StockpileSettings.ArmorSet armor = 17;
  inline bool has_armor() const;
  inline void clear_armor();
  static const int kArmorFieldNumber = 17;
  inline const ::dfstockpiles::StockpileSettings_ArmorSet& armor() const;
  inline ::dfstockpiles::StockpileSettings_ArmorSet* mutable_armor();
  inline ::dfstockpiles::StockpileSettings_ArmorSet* release_armor();
  
  // optional bool allow_organic = 18;
  inline bool has_allow_organic() const;
  inline void clear_allow_organic();
  static const int kAllowOrganicFieldNumber = 18;
  inline bool allow_organic() const;
  inline void set_allow_organic(bool value);
  
  // optional bool allow_inorganic = 19;
  inline bool has_allow_inorganic() const;
  inline void clear_allow_inorganic();
  static const int kAllowInorganicFieldNumber = 19;
  inline bool allow_inorganic() const;
  inline void set_allow_inorganic(bool value);
  
  // optional bool corpses = 24;
  inline bool has_corpses() const;
  inline void clear_corpses();
  static const int kCorpsesFieldNumber = 24;
  inline bool corpses() const;
  inline void set_corpses(bool value);
  
  // optional int32 max_barrels = 20;
  inline bool has_max_barrels() const;
  inline void clear_max_barrels();
  static const int kMaxBarrelsFieldNumber = 20;
  inline ::google::protobuf::int32 max_barrels() const;
  inline void set_max_barrels(::google::protobuf::int32 value);
  
  // optional int32 max_bins = 21;
  inline bool has_max_bins() const;
  inline void clear_max_bins();
  static const int kMaxBinsFieldNumber = 21;
  inline ::google::protobuf::int32 max_bins() const;
  inline void set_max_bins(::google::protobuf::int32 value);
  
  // optional int32 max_wheelbarrows = 22;
  inline bool has_max_wheelbarrows() const;
  inline void clear_max_wheelbarrows();
  static const int kMaxWheelbarrowsFieldNumber = 22;
  inline ::google::protobuf::int32 max_wheelbarrows() const;
  inline void set_max_wheelbarrows(::google::protobuf::int32 value);
  
  // optional bool use_links_only = 23;
  inline bool has_use_links_only() const;
  inline void clear_use_links_only();
  static const int kUseLinksOnlyFieldNumber = 23;
  inline bool use_links_only() const;
  inline void set_use_links_only(bool value);
  
  // @@protoc_insertion_point(class_scope:dfstockpiles.StockpileSettings)
 private:
  inline void set_has_animals();
  inline void clear_has_animals();
  inline void set_has_food();
  inline void clear_has_food();
  inline void set_has_furniture();
  inline void clear_has_furniture();
  inline void set_has_unknown1();
  inline void clear_has_unknown1();
  inline void set_has_refuse();
  inline void clear_has_refuse();
  inline void set_has_stone();
  inline void clear_has_stone();
  inline void set_has_ore();
  inline void clear_has_ore();
  inline void set_has_ammo();
  inline void clear_has_ammo();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_barsblocks();
  inline void clear_has_barsblocks();
  inline void set_has_gems();
  inline void clear_has_gems();
  inline void set_has_finished_goods();
  inline void clear_has_finished_goods();
  inline void set_has_leather();
  inline void clear_has_leather();
  inline void set_has_cloth();
  inline void clear_has_cloth();
  inline void set_has_wood();
  inline void clear_has_wood();
  inline void set_has_weapons();
  inline void clear_has_weapons();
  inline void set_has_armor();
  inline void clear_has_armor();
  inline void set_has_allow_organic();
  inline void clear_has_allow_organic();
  inline void set_has_allow_inorganic();
  inline void clear_has_allow_inorganic();
  inline void set_has_corpses();
  inline void clear_has_corpses();
  inline void set_has_max_barrels();
  inline void clear_has_max_barrels();
  inline void set_has_max_bins();
  inline void clear_has_max_bins();
  inline void set_has_max_wheelbarrows();
  inline void clear_has_max_wheelbarrows();
  inline void set_has_use_links_only();
  inline void clear_has_use_links_only();
  
  ::dfstockpiles::StockpileSettings_AnimalsSet* animals_;
  ::dfstockpiles::StockpileSettings_FoodSet* food_;
  ::dfstockpiles::StockpileSettings_FurnitureSet* furniture_;
  ::dfstockpiles::StockpileSettings_RefuseSet* refuse_;
  ::dfstockpiles::StockpileSettings_StoneSet* stone_;
  ::dfstockpiles::StockpileSettings_OreSet* ore_;
  ::dfstockpiles::StockpileSettings_AmmoSet* ammo_;
  ::dfstockpiles::StockpileSettings_CoinSet* coin_;
  ::dfstockpiles::StockpileSettings_BarsBlocksSet* barsblocks_;
  ::dfstockpiles::StockpileSettings_GemsSet* gems_;
  ::dfstockpiles::StockpileSettings_FinishedGoodsSet* finished_goods_;
  ::dfstockpiles::StockpileSettings_LeatherSet* leather_;
  ::dfstockpiles::StockpileSettings_ClothSet* cloth_;
  ::dfstockpiles::StockpileSettings_WoodSet* wood_;
  ::dfstockpiles::StockpileSettings_WeaponsSet* weapons_;
  ::dfstockpiles::StockpileSettings_ArmorSet* armor_;
  ::google::protobuf::int32 unknown1_;
  bool allow_organic_;
  bool allow_inorganic_;
  bool corpses_;
  bool use_links_only_;
  ::google::protobuf::int32 max_barrels_;
  ::google::protobuf::int32 max_bins_;
  ::google::protobuf::int32 max_wheelbarrows_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpiles_2eproto();
  friend void protobuf_AssignDesc_stockpiles_2eproto();
  friend void protobuf_ShutdownFile_stockpiles_2eproto();
  
  void InitAsDefaultInstance();
  static StockpileSettings* default_instance_;
};
// ===================================================================


// ===================================================================

// StockpileSettings_AnimalsSet

// optional bool empty_cages = 1;
inline bool StockpileSettings_AnimalsSet::has_empty_cages() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockpileSettings_AnimalsSet::set_has_empty_cages() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockpileSettings_AnimalsSet::clear_has_empty_cages() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockpileSettings_AnimalsSet::clear_empty_cages() {
  empty_cages_ = false;
  clear_has_empty_cages();
}
inline bool StockpileSettings_AnimalsSet::empty_cages() const {
  return empty_cages_;
}
inline void StockpileSettings_AnimalsSet::set_empty_cages(bool value) {
  set_has_empty_cages();
  empty_cages_ = value;
}

// optional bool empty_traps = 2;
inline bool StockpileSettings_AnimalsSet::has_empty_traps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockpileSettings_AnimalsSet::set_has_empty_traps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockpileSettings_AnimalsSet::clear_has_empty_traps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockpileSettings_AnimalsSet::clear_empty_traps() {
  empty_traps_ = false;
  clear_has_empty_traps();
}
inline bool StockpileSettings_AnimalsSet::empty_traps() const {
  return empty_traps_;
}
inline void StockpileSettings_AnimalsSet::set_empty_traps(bool value) {
  set_has_empty_traps();
  empty_traps_ = value;
}

// repeated string enabled = 3;
inline int StockpileSettings_AnimalsSet::enabled_size() const {
  return enabled_.size();
}
inline void StockpileSettings_AnimalsSet::clear_enabled() {
  enabled_.Clear();
}
inline const ::std::string& StockpileSettings_AnimalsSet::enabled(int index) const {
  return enabled_.Get(index);
}
inline ::std::string* StockpileSettings_AnimalsSet::mutable_enabled(int index) {
  return enabled_.Mutable(index);
}
inline void StockpileSettings_AnimalsSet::set_enabled(int index, const ::std::string& value) {
  enabled_.Mutable(index)->assign(value);
}
inline void StockpileSettings_AnimalsSet::set_enabled(int index, const char* value) {
  enabled_.Mutable(index)->assign(value);
}
inline void StockpileSettings_AnimalsSet::set_enabled(int index, const char* value, size_t size) {
  enabled_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_AnimalsSet::add_enabled() {
  return enabled_.Add();
}
inline void StockpileSettings_AnimalsSet::add_enabled(const ::std::string& value) {
  enabled_.Add()->assign(value);
}
inline void StockpileSettings_AnimalsSet::add_enabled(const char* value) {
  enabled_.Add()->assign(value);
}
inline void StockpileSettings_AnimalsSet::add_enabled(const char* value, size_t size) {
  enabled_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_AnimalsSet::enabled() const {
  return enabled_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_AnimalsSet::mutable_enabled() {
  return &enabled_;
}

// -------------------------------------------------------------------

// StockpileSettings_FoodSet

// repeated string meat = 1;
inline int StockpileSettings_FoodSet::meat_size() const {
  return meat_.size();
}
inline void StockpileSettings_FoodSet::clear_meat() {
  meat_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::meat(int index) const {
  return meat_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_meat(int index) {
  return meat_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_meat(int index, const ::std::string& value) {
  meat_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_meat(int index, const char* value) {
  meat_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_meat(int index, const char* value, size_t size) {
  meat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_meat() {
  return meat_.Add();
}
inline void StockpileSettings_FoodSet::add_meat(const ::std::string& value) {
  meat_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_meat(const char* value) {
  meat_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_meat(const char* value, size_t size) {
  meat_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::meat() const {
  return meat_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_meat() {
  return &meat_;
}

// repeated string fish = 2;
inline int StockpileSettings_FoodSet::fish_size() const {
  return fish_.size();
}
inline void StockpileSettings_FoodSet::clear_fish() {
  fish_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::fish(int index) const {
  return fish_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_fish(int index) {
  return fish_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_fish(int index, const ::std::string& value) {
  fish_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_fish(int index, const char* value) {
  fish_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_fish(int index, const char* value, size_t size) {
  fish_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_fish() {
  return fish_.Add();
}
inline void StockpileSettings_FoodSet::add_fish(const ::std::string& value) {
  fish_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_fish(const char* value) {
  fish_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_fish(const char* value, size_t size) {
  fish_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::fish() const {
  return fish_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_fish() {
  return &fish_;
}

// repeated string unprepared_fish = 20;
inline int StockpileSettings_FoodSet::unprepared_fish_size() const {
  return unprepared_fish_.size();
}
inline void StockpileSettings_FoodSet::clear_unprepared_fish() {
  unprepared_fish_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::unprepared_fish(int index) const {
  return unprepared_fish_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_unprepared_fish(int index) {
  return unprepared_fish_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_unprepared_fish(int index, const ::std::string& value) {
  unprepared_fish_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_unprepared_fish(int index, const char* value) {
  unprepared_fish_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_unprepared_fish(int index, const char* value, size_t size) {
  unprepared_fish_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_unprepared_fish() {
  return unprepared_fish_.Add();
}
inline void StockpileSettings_FoodSet::add_unprepared_fish(const ::std::string& value) {
  unprepared_fish_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_unprepared_fish(const char* value) {
  unprepared_fish_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_unprepared_fish(const char* value, size_t size) {
  unprepared_fish_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::unprepared_fish() const {
  return unprepared_fish_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_unprepared_fish() {
  return &unprepared_fish_;
}

// repeated string egg = 3;
inline int StockpileSettings_FoodSet::egg_size() const {
  return egg_.size();
}
inline void StockpileSettings_FoodSet::clear_egg() {
  egg_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::egg(int index) const {
  return egg_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_egg(int index) {
  return egg_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_egg(int index, const ::std::string& value) {
  egg_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_egg(int index, const char* value) {
  egg_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_egg(int index, const char* value, size_t size) {
  egg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_egg() {
  return egg_.Add();
}
inline void StockpileSettings_FoodSet::add_egg(const ::std::string& value) {
  egg_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_egg(const char* value) {
  egg_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_egg(const char* value, size_t size) {
  egg_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::egg() const {
  return egg_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_egg() {
  return &egg_;
}

// repeated string plants = 4;
inline int StockpileSettings_FoodSet::plants_size() const {
  return plants_.size();
}
inline void StockpileSettings_FoodSet::clear_plants() {
  plants_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::plants(int index) const {
  return plants_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_plants(int index) {
  return plants_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_plants(int index, const ::std::string& value) {
  plants_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_plants(int index, const char* value) {
  plants_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_plants(int index, const char* value, size_t size) {
  plants_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_plants() {
  return plants_.Add();
}
inline void StockpileSettings_FoodSet::add_plants(const ::std::string& value) {
  plants_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_plants(const char* value) {
  plants_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_plants(const char* value, size_t size) {
  plants_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::plants() const {
  return plants_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_plants() {
  return &plants_;
}

// repeated string drink_plant = 5;
inline int StockpileSettings_FoodSet::drink_plant_size() const {
  return drink_plant_.size();
}
inline void StockpileSettings_FoodSet::clear_drink_plant() {
  drink_plant_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::drink_plant(int index) const {
  return drink_plant_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_drink_plant(int index) {
  return drink_plant_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_drink_plant(int index, const ::std::string& value) {
  drink_plant_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_drink_plant(int index, const char* value) {
  drink_plant_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_drink_plant(int index, const char* value, size_t size) {
  drink_plant_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_drink_plant() {
  return drink_plant_.Add();
}
inline void StockpileSettings_FoodSet::add_drink_plant(const ::std::string& value) {
  drink_plant_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_drink_plant(const char* value) {
  drink_plant_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_drink_plant(const char* value, size_t size) {
  drink_plant_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::drink_plant() const {
  return drink_plant_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_drink_plant() {
  return &drink_plant_;
}

// repeated string drink_animal = 6;
inline int StockpileSettings_FoodSet::drink_animal_size() const {
  return drink_animal_.size();
}
inline void StockpileSettings_FoodSet::clear_drink_animal() {
  drink_animal_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::drink_animal(int index) const {
  return drink_animal_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_drink_animal(int index) {
  return drink_animal_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_drink_animal(int index, const ::std::string& value) {
  drink_animal_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_drink_animal(int index, const char* value) {
  drink_animal_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_drink_animal(int index, const char* value, size_t size) {
  drink_animal_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_drink_animal() {
  return drink_animal_.Add();
}
inline void StockpileSettings_FoodSet::add_drink_animal(const ::std::string& value) {
  drink_animal_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_drink_animal(const char* value) {
  drink_animal_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_drink_animal(const char* value, size_t size) {
  drink_animal_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::drink_animal() const {
  return drink_animal_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_drink_animal() {
  return &drink_animal_;
}

// repeated string cheese_plant = 7;
inline int StockpileSettings_FoodSet::cheese_plant_size() const {
  return cheese_plant_.size();
}
inline void StockpileSettings_FoodSet::clear_cheese_plant() {
  cheese_plant_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::cheese_plant(int index) const {
  return cheese_plant_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_cheese_plant(int index) {
  return cheese_plant_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_cheese_plant(int index, const ::std::string& value) {
  cheese_plant_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_cheese_plant(int index, const char* value) {
  cheese_plant_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_cheese_plant(int index, const char* value, size_t size) {
  cheese_plant_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_cheese_plant() {
  return cheese_plant_.Add();
}
inline void StockpileSettings_FoodSet::add_cheese_plant(const ::std::string& value) {
  cheese_plant_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_cheese_plant(const char* value) {
  cheese_plant_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_cheese_plant(const char* value, size_t size) {
  cheese_plant_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::cheese_plant() const {
  return cheese_plant_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_cheese_plant() {
  return &cheese_plant_;
}

// repeated string cheese_animal = 8;
inline int StockpileSettings_FoodSet::cheese_animal_size() const {
  return cheese_animal_.size();
}
inline void StockpileSettings_FoodSet::clear_cheese_animal() {
  cheese_animal_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::cheese_animal(int index) const {
  return cheese_animal_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_cheese_animal(int index) {
  return cheese_animal_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_cheese_animal(int index, const ::std::string& value) {
  cheese_animal_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_cheese_animal(int index, const char* value) {
  cheese_animal_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_cheese_animal(int index, const char* value, size_t size) {
  cheese_animal_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_cheese_animal() {
  return cheese_animal_.Add();
}
inline void StockpileSettings_FoodSet::add_cheese_animal(const ::std::string& value) {
  cheese_animal_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_cheese_animal(const char* value) {
  cheese_animal_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_cheese_animal(const char* value, size_t size) {
  cheese_animal_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::cheese_animal() const {
  return cheese_animal_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_cheese_animal() {
  return &cheese_animal_;
}

// repeated string seeds = 9;
inline int StockpileSettings_FoodSet::seeds_size() const {
  return seeds_.size();
}
inline void StockpileSettings_FoodSet::clear_seeds() {
  seeds_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::seeds(int index) const {
  return seeds_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_seeds(int index) {
  return seeds_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_seeds(int index, const ::std::string& value) {
  seeds_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_seeds(int index, const char* value) {
  seeds_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_seeds(int index, const char* value, size_t size) {
  seeds_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_seeds() {
  return seeds_.Add();
}
inline void StockpileSettings_FoodSet::add_seeds(const ::std::string& value) {
  seeds_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_seeds(const char* value) {
  seeds_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_seeds(const char* value, size_t size) {
  seeds_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::seeds() const {
  return seeds_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_seeds() {
  return &seeds_;
}

// repeated string leaves = 10;
inline int StockpileSettings_FoodSet::leaves_size() const {
  return leaves_.size();
}
inline void StockpileSettings_FoodSet::clear_leaves() {
  leaves_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::leaves(int index) const {
  return leaves_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_leaves(int index) {
  return leaves_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_leaves(int index, const ::std::string& value) {
  leaves_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_leaves(int index, const char* value) {
  leaves_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_leaves(int index, const char* value, size_t size) {
  leaves_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_leaves() {
  return leaves_.Add();
}
inline void StockpileSettings_FoodSet::add_leaves(const ::std::string& value) {
  leaves_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_leaves(const char* value) {
  leaves_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_leaves(const char* value, size_t size) {
  leaves_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::leaves() const {
  return leaves_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_leaves() {
  return &leaves_;
}

// repeated string powder_plant = 11;
inline int StockpileSettings_FoodSet::powder_plant_size() const {
  return powder_plant_.size();
}
inline void StockpileSettings_FoodSet::clear_powder_plant() {
  powder_plant_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::powder_plant(int index) const {
  return powder_plant_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_powder_plant(int index) {
  return powder_plant_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_powder_plant(int index, const ::std::string& value) {
  powder_plant_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_powder_plant(int index, const char* value) {
  powder_plant_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_powder_plant(int index, const char* value, size_t size) {
  powder_plant_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_powder_plant() {
  return powder_plant_.Add();
}
inline void StockpileSettings_FoodSet::add_powder_plant(const ::std::string& value) {
  powder_plant_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_powder_plant(const char* value) {
  powder_plant_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_powder_plant(const char* value, size_t size) {
  powder_plant_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::powder_plant() const {
  return powder_plant_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_powder_plant() {
  return &powder_plant_;
}

// repeated string powder_creature = 12;
inline int StockpileSettings_FoodSet::powder_creature_size() const {
  return powder_creature_.size();
}
inline void StockpileSettings_FoodSet::clear_powder_creature() {
  powder_creature_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::powder_creature(int index) const {
  return powder_creature_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_powder_creature(int index) {
  return powder_creature_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_powder_creature(int index, const ::std::string& value) {
  powder_creature_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_powder_creature(int index, const char* value) {
  powder_creature_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_powder_creature(int index, const char* value, size_t size) {
  powder_creature_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_powder_creature() {
  return powder_creature_.Add();
}
inline void StockpileSettings_FoodSet::add_powder_creature(const ::std::string& value) {
  powder_creature_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_powder_creature(const char* value) {
  powder_creature_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_powder_creature(const char* value, size_t size) {
  powder_creature_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::powder_creature() const {
  return powder_creature_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_powder_creature() {
  return &powder_creature_;
}

// repeated string glob = 13;
inline int StockpileSettings_FoodSet::glob_size() const {
  return glob_.size();
}
inline void StockpileSettings_FoodSet::clear_glob() {
  glob_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::glob(int index) const {
  return glob_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_glob(int index) {
  return glob_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_glob(int index, const ::std::string& value) {
  glob_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_glob(int index, const char* value) {
  glob_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_glob(int index, const char* value, size_t size) {
  glob_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_glob() {
  return glob_.Add();
}
inline void StockpileSettings_FoodSet::add_glob(const ::std::string& value) {
  glob_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_glob(const char* value) {
  glob_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_glob(const char* value, size_t size) {
  glob_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::glob() const {
  return glob_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_glob() {
  return &glob_;
}

// repeated string glob_paste = 14;
inline int StockpileSettings_FoodSet::glob_paste_size() const {
  return glob_paste_.size();
}
inline void StockpileSettings_FoodSet::clear_glob_paste() {
  glob_paste_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::glob_paste(int index) const {
  return glob_paste_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_glob_paste(int index) {
  return glob_paste_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_glob_paste(int index, const ::std::string& value) {
  glob_paste_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_glob_paste(int index, const char* value) {
  glob_paste_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_glob_paste(int index, const char* value, size_t size) {
  glob_paste_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_glob_paste() {
  return glob_paste_.Add();
}
inline void StockpileSettings_FoodSet::add_glob_paste(const ::std::string& value) {
  glob_paste_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_glob_paste(const char* value) {
  glob_paste_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_glob_paste(const char* value, size_t size) {
  glob_paste_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::glob_paste() const {
  return glob_paste_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_glob_paste() {
  return &glob_paste_;
}

// repeated string glob_pressed = 15;
inline int StockpileSettings_FoodSet::glob_pressed_size() const {
  return glob_pressed_.size();
}
inline void StockpileSettings_FoodSet::clear_glob_pressed() {
  glob_pressed_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::glob_pressed(int index) const {
  return glob_pressed_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_glob_pressed(int index) {
  return glob_pressed_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_glob_pressed(int index, const ::std::string& value) {
  glob_pressed_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_glob_pressed(int index, const char* value) {
  glob_pressed_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_glob_pressed(int index, const char* value, size_t size) {
  glob_pressed_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_glob_pressed() {
  return glob_pressed_.Add();
}
inline void StockpileSettings_FoodSet::add_glob_pressed(const ::std::string& value) {
  glob_pressed_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_glob_pressed(const char* value) {
  glob_pressed_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_glob_pressed(const char* value, size_t size) {
  glob_pressed_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::glob_pressed() const {
  return glob_pressed_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_glob_pressed() {
  return &glob_pressed_;
}

// repeated string liquid_plant = 16;
inline int StockpileSettings_FoodSet::liquid_plant_size() const {
  return liquid_plant_.size();
}
inline void StockpileSettings_FoodSet::clear_liquid_plant() {
  liquid_plant_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::liquid_plant(int index) const {
  return liquid_plant_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_liquid_plant(int index) {
  return liquid_plant_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_liquid_plant(int index, const ::std::string& value) {
  liquid_plant_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_liquid_plant(int index, const char* value) {
  liquid_plant_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_liquid_plant(int index, const char* value, size_t size) {
  liquid_plant_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_liquid_plant() {
  return liquid_plant_.Add();
}
inline void StockpileSettings_FoodSet::add_liquid_plant(const ::std::string& value) {
  liquid_plant_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_liquid_plant(const char* value) {
  liquid_plant_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_liquid_plant(const char* value, size_t size) {
  liquid_plant_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::liquid_plant() const {
  return liquid_plant_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_liquid_plant() {
  return &liquid_plant_;
}

// repeated string liquid_animal = 17;
inline int StockpileSettings_FoodSet::liquid_animal_size() const {
  return liquid_animal_.size();
}
inline void StockpileSettings_FoodSet::clear_liquid_animal() {
  liquid_animal_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::liquid_animal(int index) const {
  return liquid_animal_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_liquid_animal(int index) {
  return liquid_animal_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_liquid_animal(int index, const ::std::string& value) {
  liquid_animal_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_liquid_animal(int index, const char* value) {
  liquid_animal_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_liquid_animal(int index, const char* value, size_t size) {
  liquid_animal_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_liquid_animal() {
  return liquid_animal_.Add();
}
inline void StockpileSettings_FoodSet::add_liquid_animal(const ::std::string& value) {
  liquid_animal_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_liquid_animal(const char* value) {
  liquid_animal_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_liquid_animal(const char* value, size_t size) {
  liquid_animal_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::liquid_animal() const {
  return liquid_animal_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_liquid_animal() {
  return &liquid_animal_;
}

// repeated string liquid_misc = 18;
inline int StockpileSettings_FoodSet::liquid_misc_size() const {
  return liquid_misc_.size();
}
inline void StockpileSettings_FoodSet::clear_liquid_misc() {
  liquid_misc_.Clear();
}
inline const ::std::string& StockpileSettings_FoodSet::liquid_misc(int index) const {
  return liquid_misc_.Get(index);
}
inline ::std::string* StockpileSettings_FoodSet::mutable_liquid_misc(int index) {
  return liquid_misc_.Mutable(index);
}
inline void StockpileSettings_FoodSet::set_liquid_misc(int index, const ::std::string& value) {
  liquid_misc_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_liquid_misc(int index, const char* value) {
  liquid_misc_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FoodSet::set_liquid_misc(int index, const char* value, size_t size) {
  liquid_misc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FoodSet::add_liquid_misc() {
  return liquid_misc_.Add();
}
inline void StockpileSettings_FoodSet::add_liquid_misc(const ::std::string& value) {
  liquid_misc_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_liquid_misc(const char* value) {
  liquid_misc_.Add()->assign(value);
}
inline void StockpileSettings_FoodSet::add_liquid_misc(const char* value, size_t size) {
  liquid_misc_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FoodSet::liquid_misc() const {
  return liquid_misc_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FoodSet::mutable_liquid_misc() {
  return &liquid_misc_;
}

// optional bool prepared_meals = 19;
inline bool StockpileSettings_FoodSet::has_prepared_meals() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void StockpileSettings_FoodSet::set_has_prepared_meals() {
  _has_bits_[0] |= 0x00080000u;
}
inline void StockpileSettings_FoodSet::clear_has_prepared_meals() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void StockpileSettings_FoodSet::clear_prepared_meals() {
  prepared_meals_ = false;
  clear_has_prepared_meals();
}
inline bool StockpileSettings_FoodSet::prepared_meals() const {
  return prepared_meals_;
}
inline void StockpileSettings_FoodSet::set_prepared_meals(bool value) {
  set_has_prepared_meals();
  prepared_meals_ = value;
}

// -------------------------------------------------------------------

// StockpileSettings_FurnitureSet

// repeated string type = 1;
inline int StockpileSettings_FurnitureSet::type_size() const {
  return type_.size();
}
inline void StockpileSettings_FurnitureSet::clear_type() {
  type_.Clear();
}
inline const ::std::string& StockpileSettings_FurnitureSet::type(int index) const {
  return type_.Get(index);
}
inline ::std::string* StockpileSettings_FurnitureSet::mutable_type(int index) {
  return type_.Mutable(index);
}
inline void StockpileSettings_FurnitureSet::set_type(int index, const ::std::string& value) {
  type_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FurnitureSet::set_type(int index, const char* value) {
  type_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FurnitureSet::set_type(int index, const char* value, size_t size) {
  type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FurnitureSet::add_type() {
  return type_.Add();
}
inline void StockpileSettings_FurnitureSet::add_type(const ::std::string& value) {
  type_.Add()->assign(value);
}
inline void StockpileSettings_FurnitureSet::add_type(const char* value) {
  type_.Add()->assign(value);
}
inline void StockpileSettings_FurnitureSet::add_type(const char* value, size_t size) {
  type_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FurnitureSet::type() const {
  return type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FurnitureSet::mutable_type() {
  return &type_;
}

// repeated string other_mats = 2;
inline int StockpileSettings_FurnitureSet::other_mats_size() const {
  return other_mats_.size();
}
inline void StockpileSettings_FurnitureSet::clear_other_mats() {
  other_mats_.Clear();
}
inline const ::std::string& StockpileSettings_FurnitureSet::other_mats(int index) const {
  return other_mats_.Get(index);
}
inline ::std::string* StockpileSettings_FurnitureSet::mutable_other_mats(int index) {
  return other_mats_.Mutable(index);
}
inline void StockpileSettings_FurnitureSet::set_other_mats(int index, const ::std::string& value) {
  other_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FurnitureSet::set_other_mats(int index, const char* value) {
  other_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FurnitureSet::set_other_mats(int index, const char* value, size_t size) {
  other_mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FurnitureSet::add_other_mats() {
  return other_mats_.Add();
}
inline void StockpileSettings_FurnitureSet::add_other_mats(const ::std::string& value) {
  other_mats_.Add()->assign(value);
}
inline void StockpileSettings_FurnitureSet::add_other_mats(const char* value) {
  other_mats_.Add()->assign(value);
}
inline void StockpileSettings_FurnitureSet::add_other_mats(const char* value, size_t size) {
  other_mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FurnitureSet::other_mats() const {
  return other_mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FurnitureSet::mutable_other_mats() {
  return &other_mats_;
}

// repeated string mats = 3;
inline int StockpileSettings_FurnitureSet::mats_size() const {
  return mats_.size();
}
inline void StockpileSettings_FurnitureSet::clear_mats() {
  mats_.Clear();
}
inline const ::std::string& StockpileSettings_FurnitureSet::mats(int index) const {
  return mats_.Get(index);
}
inline ::std::string* StockpileSettings_FurnitureSet::mutable_mats(int index) {
  return mats_.Mutable(index);
}
inline void StockpileSettings_FurnitureSet::set_mats(int index, const ::std::string& value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FurnitureSet::set_mats(int index, const char* value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FurnitureSet::set_mats(int index, const char* value, size_t size) {
  mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FurnitureSet::add_mats() {
  return mats_.Add();
}
inline void StockpileSettings_FurnitureSet::add_mats(const ::std::string& value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_FurnitureSet::add_mats(const char* value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_FurnitureSet::add_mats(const char* value, size_t size) {
  mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FurnitureSet::mats() const {
  return mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FurnitureSet::mutable_mats() {
  return &mats_;
}

// repeated string quality_core = 4;
inline int StockpileSettings_FurnitureSet::quality_core_size() const {
  return quality_core_.size();
}
inline void StockpileSettings_FurnitureSet::clear_quality_core() {
  quality_core_.Clear();
}
inline const ::std::string& StockpileSettings_FurnitureSet::quality_core(int index) const {
  return quality_core_.Get(index);
}
inline ::std::string* StockpileSettings_FurnitureSet::mutable_quality_core(int index) {
  return quality_core_.Mutable(index);
}
inline void StockpileSettings_FurnitureSet::set_quality_core(int index, const ::std::string& value) {
  quality_core_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FurnitureSet::set_quality_core(int index, const char* value) {
  quality_core_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FurnitureSet::set_quality_core(int index, const char* value, size_t size) {
  quality_core_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FurnitureSet::add_quality_core() {
  return quality_core_.Add();
}
inline void StockpileSettings_FurnitureSet::add_quality_core(const ::std::string& value) {
  quality_core_.Add()->assign(value);
}
inline void StockpileSettings_FurnitureSet::add_quality_core(const char* value) {
  quality_core_.Add()->assign(value);
}
inline void StockpileSettings_FurnitureSet::add_quality_core(const char* value, size_t size) {
  quality_core_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FurnitureSet::quality_core() const {
  return quality_core_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FurnitureSet::mutable_quality_core() {
  return &quality_core_;
}

// repeated string quality_total = 5;
inline int StockpileSettings_FurnitureSet::quality_total_size() const {
  return quality_total_.size();
}
inline void StockpileSettings_FurnitureSet::clear_quality_total() {
  quality_total_.Clear();
}
inline const ::std::string& StockpileSettings_FurnitureSet::quality_total(int index) const {
  return quality_total_.Get(index);
}
inline ::std::string* StockpileSettings_FurnitureSet::mutable_quality_total(int index) {
  return quality_total_.Mutable(index);
}
inline void StockpileSettings_FurnitureSet::set_quality_total(int index, const ::std::string& value) {
  quality_total_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FurnitureSet::set_quality_total(int index, const char* value) {
  quality_total_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FurnitureSet::set_quality_total(int index, const char* value, size_t size) {
  quality_total_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FurnitureSet::add_quality_total() {
  return quality_total_.Add();
}
inline void StockpileSettings_FurnitureSet::add_quality_total(const ::std::string& value) {
  quality_total_.Add()->assign(value);
}
inline void StockpileSettings_FurnitureSet::add_quality_total(const char* value) {
  quality_total_.Add()->assign(value);
}
inline void StockpileSettings_FurnitureSet::add_quality_total(const char* value, size_t size) {
  quality_total_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FurnitureSet::quality_total() const {
  return quality_total_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FurnitureSet::mutable_quality_total() {
  return &quality_total_;
}

// optional bool sand_bags = 6;
inline bool StockpileSettings_FurnitureSet::has_sand_bags() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockpileSettings_FurnitureSet::set_has_sand_bags() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockpileSettings_FurnitureSet::clear_has_sand_bags() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockpileSettings_FurnitureSet::clear_sand_bags() {
  sand_bags_ = false;
  clear_has_sand_bags();
}
inline bool StockpileSettings_FurnitureSet::sand_bags() const {
  return sand_bags_;
}
inline void StockpileSettings_FurnitureSet::set_sand_bags(bool value) {
  set_has_sand_bags();
  sand_bags_ = value;
}

// -------------------------------------------------------------------

// StockpileSettings_RefuseSet

// repeated string type = 1;
inline int StockpileSettings_RefuseSet::type_size() const {
  return type_.size();
}
inline void StockpileSettings_RefuseSet::clear_type() {
  type_.Clear();
}
inline const ::std::string& StockpileSettings_RefuseSet::type(int index) const {
  return type_.Get(index);
}
inline ::std::string* StockpileSettings_RefuseSet::mutable_type(int index) {
  return type_.Mutable(index);
}
inline void StockpileSettings_RefuseSet::set_type(int index, const ::std::string& value) {
  type_.Mutable(index)->assign(value);
}
inline void StockpileSettings_RefuseSet::set_type(int index, const char* value) {
  type_.Mutable(index)->assign(value);
}
inline void StockpileSettings_RefuseSet::set_type(int index, const char* value, size_t size) {
  type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_RefuseSet::add_type() {
  return type_.Add();
}
inline void StockpileSettings_RefuseSet::add_type(const ::std::string& value) {
  type_.Add()->assign(value);
}
inline void StockpileSettings_RefuseSet::add_type(const char* value) {
  type_.Add()->assign(value);
}
inline void StockpileSettings_RefuseSet::add_type(const char* value, size_t size) {
  type_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_RefuseSet::type() const {
  return type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_RefuseSet::mutable_type() {
  return &type_;
}

// repeated string corpses = 2;
inline int StockpileSettings_RefuseSet::corpses_size() const {
  return corpses_.size();
}
inline void StockpileSettings_RefuseSet::clear_corpses() {
  corpses_.Clear();
}
inline const ::std::string& StockpileSettings_RefuseSet::corpses(int index) const {
  return corpses_.Get(index);
}
inline ::std::string* StockpileSettings_RefuseSet::mutable_corpses(int index) {
  return corpses_.Mutable(index);
}
inline void StockpileSettings_RefuseSet::set_corpses(int index, const ::std::string& value) {
  corpses_.Mutable(index)->assign(value);
}
inline void StockpileSettings_RefuseSet::set_corpses(int index, const char* value) {
  corpses_.Mutable(index)->assign(value);
}
inline void StockpileSettings_RefuseSet::set_corpses(int index, const char* value, size_t size) {
  corpses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_RefuseSet::add_corpses() {
  return corpses_.Add();
}
inline void StockpileSettings_RefuseSet::add_corpses(const ::std::string& value) {
  corpses_.Add()->assign(value);
}
inline void StockpileSettings_RefuseSet::add_corpses(const char* value) {
  corpses_.Add()->assign(value);
}
inline void StockpileSettings_RefuseSet::add_corpses(const char* value, size_t size) {
  corpses_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_RefuseSet::corpses() const {
  return corpses_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_RefuseSet::mutable_corpses() {
  return &corpses_;
}

// repeated string body_parts = 3;
inline int StockpileSettings_RefuseSet::body_parts_size() const {
  return body_parts_.size();
}
inline void StockpileSettings_RefuseSet::clear_body_parts() {
  body_parts_.Clear();
}
inline const ::std::string& StockpileSettings_RefuseSet::body_parts(int index) const {
  return body_parts_.Get(index);
}
inline ::std::string* StockpileSettings_RefuseSet::mutable_body_parts(int index) {
  return body_parts_.Mutable(index);
}
inline void StockpileSettings_RefuseSet::set_body_parts(int index, const ::std::string& value) {
  body_parts_.Mutable(index)->assign(value);
}
inline void StockpileSettings_RefuseSet::set_body_parts(int index, const char* value) {
  body_parts_.Mutable(index)->assign(value);
}
inline void StockpileSettings_RefuseSet::set_body_parts(int index, const char* value, size_t size) {
  body_parts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_RefuseSet::add_body_parts() {
  return body_parts_.Add();
}
inline void StockpileSettings_RefuseSet::add_body_parts(const ::std::string& value) {
  body_parts_.Add()->assign(value);
}
inline void StockpileSettings_RefuseSet::add_body_parts(const char* value) {
  body_parts_.Add()->assign(value);
}
inline void StockpileSettings_RefuseSet::add_body_parts(const char* value, size_t size) {
  body_parts_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_RefuseSet::body_parts() const {
  return body_parts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_RefuseSet::mutable_body_parts() {
  return &body_parts_;
}

// repeated string skulls = 4;
inline int StockpileSettings_RefuseSet::skulls_size() const {
  return skulls_.size();
}
inline void StockpileSettings_RefuseSet::clear_skulls() {
  skulls_.Clear();
}
inline const ::std::string& StockpileSettings_RefuseSet::skulls(int index) const {
  return skulls_.Get(index);
}
inline ::std::string* StockpileSettings_RefuseSet::mutable_skulls(int index) {
  return skulls_.Mutable(index);
}
inline void StockpileSettings_RefuseSet::set_skulls(int index, const ::std::string& value) {
  skulls_.Mutable(index)->assign(value);
}
inline void StockpileSettings_RefuseSet::set_skulls(int index, const char* value) {
  skulls_.Mutable(index)->assign(value);
}
inline void StockpileSettings_RefuseSet::set_skulls(int index, const char* value, size_t size) {
  skulls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_RefuseSet::add_skulls() {
  return skulls_.Add();
}
inline void StockpileSettings_RefuseSet::add_skulls(const ::std::string& value) {
  skulls_.Add()->assign(value);
}
inline void StockpileSettings_RefuseSet::add_skulls(const char* value) {
  skulls_.Add()->assign(value);
}
inline void StockpileSettings_RefuseSet::add_skulls(const char* value, size_t size) {
  skulls_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_RefuseSet::skulls() const {
  return skulls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_RefuseSet::mutable_skulls() {
  return &skulls_;
}

// repeated string bones = 5;
inline int StockpileSettings_RefuseSet::bones_size() const {
  return bones_.size();
}
inline void StockpileSettings_RefuseSet::clear_bones() {
  bones_.Clear();
}
inline const ::std::string& StockpileSettings_RefuseSet::bones(int index) const {
  return bones_.Get(index);
}
inline ::std::string* StockpileSettings_RefuseSet::mutable_bones(int index) {
  return bones_.Mutable(index);
}
inline void StockpileSettings_RefuseSet::set_bones(int index, const ::std::string& value) {
  bones_.Mutable(index)->assign(value);
}
inline void StockpileSettings_RefuseSet::set_bones(int index, const char* value) {
  bones_.Mutable(index)->assign(value);
}
inline void StockpileSettings_RefuseSet::set_bones(int index, const char* value, size_t size) {
  bones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_RefuseSet::add_bones() {
  return bones_.Add();
}
inline void StockpileSettings_RefuseSet::add_bones(const ::std::string& value) {
  bones_.Add()->assign(value);
}
inline void StockpileSettings_RefuseSet::add_bones(const char* value) {
  bones_.Add()->assign(value);
}
inline void StockpileSettings_RefuseSet::add_bones(const char* value, size_t size) {
  bones_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_RefuseSet::bones() const {
  return bones_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_RefuseSet::mutable_bones() {
  return &bones_;
}

// repeated string hair = 6;
inline int StockpileSettings_RefuseSet::hair_size() const {
  return hair_.size();
}
inline void StockpileSettings_RefuseSet::clear_hair() {
  hair_.Clear();
}
inline const ::std::string& StockpileSettings_RefuseSet::hair(int index) const {
  return hair_.Get(index);
}
inline ::std::string* StockpileSettings_RefuseSet::mutable_hair(int index) {
  return hair_.Mutable(index);
}
inline void StockpileSettings_RefuseSet::set_hair(int index, const ::std::string& value) {
  hair_.Mutable(index)->assign(value);
}
inline void StockpileSettings_RefuseSet::set_hair(int index, const char* value) {
  hair_.Mutable(index)->assign(value);
}
inline void StockpileSettings_RefuseSet::set_hair(int index, const char* value, size_t size) {
  hair_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_RefuseSet::add_hair() {
  return hair_.Add();
}
inline void StockpileSettings_RefuseSet::add_hair(const ::std::string& value) {
  hair_.Add()->assign(value);
}
inline void StockpileSettings_RefuseSet::add_hair(const char* value) {
  hair_.Add()->assign(value);
}
inline void StockpileSettings_RefuseSet::add_hair(const char* value, size_t size) {
  hair_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_RefuseSet::hair() const {
  return hair_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_RefuseSet::mutable_hair() {
  return &hair_;
}

// repeated string shells = 7;
inline int StockpileSettings_RefuseSet::shells_size() const {
  return shells_.size();
}
inline void StockpileSettings_RefuseSet::clear_shells() {
  shells_.Clear();
}
inline const ::std::string& StockpileSettings_RefuseSet::shells(int index) const {
  return shells_.Get(index);
}
inline ::std::string* StockpileSettings_RefuseSet::mutable_shells(int index) {
  return shells_.Mutable(index);
}
inline void StockpileSettings_RefuseSet::set_shells(int index, const ::std::string& value) {
  shells_.Mutable(index)->assign(value);
}
inline void StockpileSettings_RefuseSet::set_shells(int index, const char* value) {
  shells_.Mutable(index)->assign(value);
}
inline void StockpileSettings_RefuseSet::set_shells(int index, const char* value, size_t size) {
  shells_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_RefuseSet::add_shells() {
  return shells_.Add();
}
inline void StockpileSettings_RefuseSet::add_shells(const ::std::string& value) {
  shells_.Add()->assign(value);
}
inline void StockpileSettings_RefuseSet::add_shells(const char* value) {
  shells_.Add()->assign(value);
}
inline void StockpileSettings_RefuseSet::add_shells(const char* value, size_t size) {
  shells_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_RefuseSet::shells() const {
  return shells_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_RefuseSet::mutable_shells() {
  return &shells_;
}

// repeated string teeth = 8;
inline int StockpileSettings_RefuseSet::teeth_size() const {
  return teeth_.size();
}
inline void StockpileSettings_RefuseSet::clear_teeth() {
  teeth_.Clear();
}
inline const ::std::string& StockpileSettings_RefuseSet::teeth(int index) const {
  return teeth_.Get(index);
}
inline ::std::string* StockpileSettings_RefuseSet::mutable_teeth(int index) {
  return teeth_.Mutable(index);
}
inline void StockpileSettings_RefuseSet::set_teeth(int index, const ::std::string& value) {
  teeth_.Mutable(index)->assign(value);
}
inline void StockpileSettings_RefuseSet::set_teeth(int index, const char* value) {
  teeth_.Mutable(index)->assign(value);
}
inline void StockpileSettings_RefuseSet::set_teeth(int index, const char* value, size_t size) {
  teeth_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_RefuseSet::add_teeth() {
  return teeth_.Add();
}
inline void StockpileSettings_RefuseSet::add_teeth(const ::std::string& value) {
  teeth_.Add()->assign(value);
}
inline void StockpileSettings_RefuseSet::add_teeth(const char* value) {
  teeth_.Add()->assign(value);
}
inline void StockpileSettings_RefuseSet::add_teeth(const char* value, size_t size) {
  teeth_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_RefuseSet::teeth() const {
  return teeth_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_RefuseSet::mutable_teeth() {
  return &teeth_;
}

// repeated string horns = 9;
inline int StockpileSettings_RefuseSet::horns_size() const {
  return horns_.size();
}
inline void StockpileSettings_RefuseSet::clear_horns() {
  horns_.Clear();
}
inline const ::std::string& StockpileSettings_RefuseSet::horns(int index) const {
  return horns_.Get(index);
}
inline ::std::string* StockpileSettings_RefuseSet::mutable_horns(int index) {
  return horns_.Mutable(index);
}
inline void StockpileSettings_RefuseSet::set_horns(int index, const ::std::string& value) {
  horns_.Mutable(index)->assign(value);
}
inline void StockpileSettings_RefuseSet::set_horns(int index, const char* value) {
  horns_.Mutable(index)->assign(value);
}
inline void StockpileSettings_RefuseSet::set_horns(int index, const char* value, size_t size) {
  horns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_RefuseSet::add_horns() {
  return horns_.Add();
}
inline void StockpileSettings_RefuseSet::add_horns(const ::std::string& value) {
  horns_.Add()->assign(value);
}
inline void StockpileSettings_RefuseSet::add_horns(const char* value) {
  horns_.Add()->assign(value);
}
inline void StockpileSettings_RefuseSet::add_horns(const char* value, size_t size) {
  horns_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_RefuseSet::horns() const {
  return horns_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_RefuseSet::mutable_horns() {
  return &horns_;
}

// optional bool fresh_raw_hide = 10;
inline bool StockpileSettings_RefuseSet::has_fresh_raw_hide() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StockpileSettings_RefuseSet::set_has_fresh_raw_hide() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StockpileSettings_RefuseSet::clear_has_fresh_raw_hide() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StockpileSettings_RefuseSet::clear_fresh_raw_hide() {
  fresh_raw_hide_ = false;
  clear_has_fresh_raw_hide();
}
inline bool StockpileSettings_RefuseSet::fresh_raw_hide() const {
  return fresh_raw_hide_;
}
inline void StockpileSettings_RefuseSet::set_fresh_raw_hide(bool value) {
  set_has_fresh_raw_hide();
  fresh_raw_hide_ = value;
}

// optional bool rotten_raw_hide = 11;
inline bool StockpileSettings_RefuseSet::has_rotten_raw_hide() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StockpileSettings_RefuseSet::set_has_rotten_raw_hide() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StockpileSettings_RefuseSet::clear_has_rotten_raw_hide() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StockpileSettings_RefuseSet::clear_rotten_raw_hide() {
  rotten_raw_hide_ = false;
  clear_has_rotten_raw_hide();
}
inline bool StockpileSettings_RefuseSet::rotten_raw_hide() const {
  return rotten_raw_hide_;
}
inline void StockpileSettings_RefuseSet::set_rotten_raw_hide(bool value) {
  set_has_rotten_raw_hide();
  rotten_raw_hide_ = value;
}

// -------------------------------------------------------------------

// StockpileSettings_StoneSet

// repeated string mats = 1;
inline int StockpileSettings_StoneSet::mats_size() const {
  return mats_.size();
}
inline void StockpileSettings_StoneSet::clear_mats() {
  mats_.Clear();
}
inline const ::std::string& StockpileSettings_StoneSet::mats(int index) const {
  return mats_.Get(index);
}
inline ::std::string* StockpileSettings_StoneSet::mutable_mats(int index) {
  return mats_.Mutable(index);
}
inline void StockpileSettings_StoneSet::set_mats(int index, const ::std::string& value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_StoneSet::set_mats(int index, const char* value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_StoneSet::set_mats(int index, const char* value, size_t size) {
  mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_StoneSet::add_mats() {
  return mats_.Add();
}
inline void StockpileSettings_StoneSet::add_mats(const ::std::string& value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_StoneSet::add_mats(const char* value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_StoneSet::add_mats(const char* value, size_t size) {
  mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_StoneSet::mats() const {
  return mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_StoneSet::mutable_mats() {
  return &mats_;
}

// -------------------------------------------------------------------

// StockpileSettings_OreSet

// repeated string mats = 1;
inline int StockpileSettings_OreSet::mats_size() const {
  return mats_.size();
}
inline void StockpileSettings_OreSet::clear_mats() {
  mats_.Clear();
}
inline const ::std::string& StockpileSettings_OreSet::mats(int index) const {
  return mats_.Get(index);
}
inline ::std::string* StockpileSettings_OreSet::mutable_mats(int index) {
  return mats_.Mutable(index);
}
inline void StockpileSettings_OreSet::set_mats(int index, const ::std::string& value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_OreSet::set_mats(int index, const char* value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_OreSet::set_mats(int index, const char* value, size_t size) {
  mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_OreSet::add_mats() {
  return mats_.Add();
}
inline void StockpileSettings_OreSet::add_mats(const ::std::string& value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_OreSet::add_mats(const char* value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_OreSet::add_mats(const char* value, size_t size) {
  mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_OreSet::mats() const {
  return mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_OreSet::mutable_mats() {
  return &mats_;
}

// -------------------------------------------------------------------

// StockpileSettings_AmmoSet

// repeated string type = 1;
inline int StockpileSettings_AmmoSet::type_size() const {
  return type_.size();
}
inline void StockpileSettings_AmmoSet::clear_type() {
  type_.Clear();
}
inline const ::std::string& StockpileSettings_AmmoSet::type(int index) const {
  return type_.Get(index);
}
inline ::std::string* StockpileSettings_AmmoSet::mutable_type(int index) {
  return type_.Mutable(index);
}
inline void StockpileSettings_AmmoSet::set_type(int index, const ::std::string& value) {
  type_.Mutable(index)->assign(value);
}
inline void StockpileSettings_AmmoSet::set_type(int index, const char* value) {
  type_.Mutable(index)->assign(value);
}
inline void StockpileSettings_AmmoSet::set_type(int index, const char* value, size_t size) {
  type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_AmmoSet::add_type() {
  return type_.Add();
}
inline void StockpileSettings_AmmoSet::add_type(const ::std::string& value) {
  type_.Add()->assign(value);
}
inline void StockpileSettings_AmmoSet::add_type(const char* value) {
  type_.Add()->assign(value);
}
inline void StockpileSettings_AmmoSet::add_type(const char* value, size_t size) {
  type_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_AmmoSet::type() const {
  return type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_AmmoSet::mutable_type() {
  return &type_;
}

// repeated string other_mats = 2;
inline int StockpileSettings_AmmoSet::other_mats_size() const {
  return other_mats_.size();
}
inline void StockpileSettings_AmmoSet::clear_other_mats() {
  other_mats_.Clear();
}
inline const ::std::string& StockpileSettings_AmmoSet::other_mats(int index) const {
  return other_mats_.Get(index);
}
inline ::std::string* StockpileSettings_AmmoSet::mutable_other_mats(int index) {
  return other_mats_.Mutable(index);
}
inline void StockpileSettings_AmmoSet::set_other_mats(int index, const ::std::string& value) {
  other_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_AmmoSet::set_other_mats(int index, const char* value) {
  other_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_AmmoSet::set_other_mats(int index, const char* value, size_t size) {
  other_mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_AmmoSet::add_other_mats() {
  return other_mats_.Add();
}
inline void StockpileSettings_AmmoSet::add_other_mats(const ::std::string& value) {
  other_mats_.Add()->assign(value);
}
inline void StockpileSettings_AmmoSet::add_other_mats(const char* value) {
  other_mats_.Add()->assign(value);
}
inline void StockpileSettings_AmmoSet::add_other_mats(const char* value, size_t size) {
  other_mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_AmmoSet::other_mats() const {
  return other_mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_AmmoSet::mutable_other_mats() {
  return &other_mats_;
}

// repeated string mats = 3;
inline int StockpileSettings_AmmoSet::mats_size() const {
  return mats_.size();
}
inline void StockpileSettings_AmmoSet::clear_mats() {
  mats_.Clear();
}
inline const ::std::string& StockpileSettings_AmmoSet::mats(int index) const {
  return mats_.Get(index);
}
inline ::std::string* StockpileSettings_AmmoSet::mutable_mats(int index) {
  return mats_.Mutable(index);
}
inline void StockpileSettings_AmmoSet::set_mats(int index, const ::std::string& value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_AmmoSet::set_mats(int index, const char* value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_AmmoSet::set_mats(int index, const char* value, size_t size) {
  mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_AmmoSet::add_mats() {
  return mats_.Add();
}
inline void StockpileSettings_AmmoSet::add_mats(const ::std::string& value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_AmmoSet::add_mats(const char* value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_AmmoSet::add_mats(const char* value, size_t size) {
  mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_AmmoSet::mats() const {
  return mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_AmmoSet::mutable_mats() {
  return &mats_;
}

// repeated string quality_core = 4;
inline int StockpileSettings_AmmoSet::quality_core_size() const {
  return quality_core_.size();
}
inline void StockpileSettings_AmmoSet::clear_quality_core() {
  quality_core_.Clear();
}
inline const ::std::string& StockpileSettings_AmmoSet::quality_core(int index) const {
  return quality_core_.Get(index);
}
inline ::std::string* StockpileSettings_AmmoSet::mutable_quality_core(int index) {
  return quality_core_.Mutable(index);
}
inline void StockpileSettings_AmmoSet::set_quality_core(int index, const ::std::string& value) {
  quality_core_.Mutable(index)->assign(value);
}
inline void StockpileSettings_AmmoSet::set_quality_core(int index, const char* value) {
  quality_core_.Mutable(index)->assign(value);
}
inline void StockpileSettings_AmmoSet::set_quality_core(int index, const char* value, size_t size) {
  quality_core_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_AmmoSet::add_quality_core() {
  return quality_core_.Add();
}
inline void StockpileSettings_AmmoSet::add_quality_core(const ::std::string& value) {
  quality_core_.Add()->assign(value);
}
inline void StockpileSettings_AmmoSet::add_quality_core(const char* value) {
  quality_core_.Add()->assign(value);
}
inline void StockpileSettings_AmmoSet::add_quality_core(const char* value, size_t size) {
  quality_core_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_AmmoSet::quality_core() const {
  return quality_core_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_AmmoSet::mutable_quality_core() {
  return &quality_core_;
}

// repeated string quality_total = 5;
inline int StockpileSettings_AmmoSet::quality_total_size() const {
  return quality_total_.size();
}
inline void StockpileSettings_AmmoSet::clear_quality_total() {
  quality_total_.Clear();
}
inline const ::std::string& StockpileSettings_AmmoSet::quality_total(int index) const {
  return quality_total_.Get(index);
}
inline ::std::string* StockpileSettings_AmmoSet::mutable_quality_total(int index) {
  return quality_total_.Mutable(index);
}
inline void StockpileSettings_AmmoSet::set_quality_total(int index, const ::std::string& value) {
  quality_total_.Mutable(index)->assign(value);
}
inline void StockpileSettings_AmmoSet::set_quality_total(int index, const char* value) {
  quality_total_.Mutable(index)->assign(value);
}
inline void StockpileSettings_AmmoSet::set_quality_total(int index, const char* value, size_t size) {
  quality_total_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_AmmoSet::add_quality_total() {
  return quality_total_.Add();
}
inline void StockpileSettings_AmmoSet::add_quality_total(const ::std::string& value) {
  quality_total_.Add()->assign(value);
}
inline void StockpileSettings_AmmoSet::add_quality_total(const char* value) {
  quality_total_.Add()->assign(value);
}
inline void StockpileSettings_AmmoSet::add_quality_total(const char* value, size_t size) {
  quality_total_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_AmmoSet::quality_total() const {
  return quality_total_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_AmmoSet::mutable_quality_total() {
  return &quality_total_;
}

// -------------------------------------------------------------------

// StockpileSettings_CoinSet

// repeated string mats = 1;
inline int StockpileSettings_CoinSet::mats_size() const {
  return mats_.size();
}
inline void StockpileSettings_CoinSet::clear_mats() {
  mats_.Clear();
}
inline const ::std::string& StockpileSettings_CoinSet::mats(int index) const {
  return mats_.Get(index);
}
inline ::std::string* StockpileSettings_CoinSet::mutable_mats(int index) {
  return mats_.Mutable(index);
}
inline void StockpileSettings_CoinSet::set_mats(int index, const ::std::string& value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_CoinSet::set_mats(int index, const char* value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_CoinSet::set_mats(int index, const char* value, size_t size) {
  mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_CoinSet::add_mats() {
  return mats_.Add();
}
inline void StockpileSettings_CoinSet::add_mats(const ::std::string& value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_CoinSet::add_mats(const char* value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_CoinSet::add_mats(const char* value, size_t size) {
  mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_CoinSet::mats() const {
  return mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_CoinSet::mutable_mats() {
  return &mats_;
}

// -------------------------------------------------------------------

// StockpileSettings_BarsBlocksSet

// repeated string bars_other_mats = 1;
inline int StockpileSettings_BarsBlocksSet::bars_other_mats_size() const {
  return bars_other_mats_.size();
}
inline void StockpileSettings_BarsBlocksSet::clear_bars_other_mats() {
  bars_other_mats_.Clear();
}
inline const ::std::string& StockpileSettings_BarsBlocksSet::bars_other_mats(int index) const {
  return bars_other_mats_.Get(index);
}
inline ::std::string* StockpileSettings_BarsBlocksSet::mutable_bars_other_mats(int index) {
  return bars_other_mats_.Mutable(index);
}
inline void StockpileSettings_BarsBlocksSet::set_bars_other_mats(int index, const ::std::string& value) {
  bars_other_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_BarsBlocksSet::set_bars_other_mats(int index, const char* value) {
  bars_other_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_BarsBlocksSet::set_bars_other_mats(int index, const char* value, size_t size) {
  bars_other_mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_BarsBlocksSet::add_bars_other_mats() {
  return bars_other_mats_.Add();
}
inline void StockpileSettings_BarsBlocksSet::add_bars_other_mats(const ::std::string& value) {
  bars_other_mats_.Add()->assign(value);
}
inline void StockpileSettings_BarsBlocksSet::add_bars_other_mats(const char* value) {
  bars_other_mats_.Add()->assign(value);
}
inline void StockpileSettings_BarsBlocksSet::add_bars_other_mats(const char* value, size_t size) {
  bars_other_mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_BarsBlocksSet::bars_other_mats() const {
  return bars_other_mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_BarsBlocksSet::mutable_bars_other_mats() {
  return &bars_other_mats_;
}

// repeated string blocks_other_mats = 2;
inline int StockpileSettings_BarsBlocksSet::blocks_other_mats_size() const {
  return blocks_other_mats_.size();
}
inline void StockpileSettings_BarsBlocksSet::clear_blocks_other_mats() {
  blocks_other_mats_.Clear();
}
inline const ::std::string& StockpileSettings_BarsBlocksSet::blocks_other_mats(int index) const {
  return blocks_other_mats_.Get(index);
}
inline ::std::string* StockpileSettings_BarsBlocksSet::mutable_blocks_other_mats(int index) {
  return blocks_other_mats_.Mutable(index);
}
inline void StockpileSettings_BarsBlocksSet::set_blocks_other_mats(int index, const ::std::string& value) {
  blocks_other_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_BarsBlocksSet::set_blocks_other_mats(int index, const char* value) {
  blocks_other_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_BarsBlocksSet::set_blocks_other_mats(int index, const char* value, size_t size) {
  blocks_other_mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_BarsBlocksSet::add_blocks_other_mats() {
  return blocks_other_mats_.Add();
}
inline void StockpileSettings_BarsBlocksSet::add_blocks_other_mats(const ::std::string& value) {
  blocks_other_mats_.Add()->assign(value);
}
inline void StockpileSettings_BarsBlocksSet::add_blocks_other_mats(const char* value) {
  blocks_other_mats_.Add()->assign(value);
}
inline void StockpileSettings_BarsBlocksSet::add_blocks_other_mats(const char* value, size_t size) {
  blocks_other_mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_BarsBlocksSet::blocks_other_mats() const {
  return blocks_other_mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_BarsBlocksSet::mutable_blocks_other_mats() {
  return &blocks_other_mats_;
}

// repeated string bars_mats = 3;
inline int StockpileSettings_BarsBlocksSet::bars_mats_size() const {
  return bars_mats_.size();
}
inline void StockpileSettings_BarsBlocksSet::clear_bars_mats() {
  bars_mats_.Clear();
}
inline const ::std::string& StockpileSettings_BarsBlocksSet::bars_mats(int index) const {
  return bars_mats_.Get(index);
}
inline ::std::string* StockpileSettings_BarsBlocksSet::mutable_bars_mats(int index) {
  return bars_mats_.Mutable(index);
}
inline void StockpileSettings_BarsBlocksSet::set_bars_mats(int index, const ::std::string& value) {
  bars_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_BarsBlocksSet::set_bars_mats(int index, const char* value) {
  bars_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_BarsBlocksSet::set_bars_mats(int index, const char* value, size_t size) {
  bars_mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_BarsBlocksSet::add_bars_mats() {
  return bars_mats_.Add();
}
inline void StockpileSettings_BarsBlocksSet::add_bars_mats(const ::std::string& value) {
  bars_mats_.Add()->assign(value);
}
inline void StockpileSettings_BarsBlocksSet::add_bars_mats(const char* value) {
  bars_mats_.Add()->assign(value);
}
inline void StockpileSettings_BarsBlocksSet::add_bars_mats(const char* value, size_t size) {
  bars_mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_BarsBlocksSet::bars_mats() const {
  return bars_mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_BarsBlocksSet::mutable_bars_mats() {
  return &bars_mats_;
}

// repeated string blocks_mats = 4;
inline int StockpileSettings_BarsBlocksSet::blocks_mats_size() const {
  return blocks_mats_.size();
}
inline void StockpileSettings_BarsBlocksSet::clear_blocks_mats() {
  blocks_mats_.Clear();
}
inline const ::std::string& StockpileSettings_BarsBlocksSet::blocks_mats(int index) const {
  return blocks_mats_.Get(index);
}
inline ::std::string* StockpileSettings_BarsBlocksSet::mutable_blocks_mats(int index) {
  return blocks_mats_.Mutable(index);
}
inline void StockpileSettings_BarsBlocksSet::set_blocks_mats(int index, const ::std::string& value) {
  blocks_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_BarsBlocksSet::set_blocks_mats(int index, const char* value) {
  blocks_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_BarsBlocksSet::set_blocks_mats(int index, const char* value, size_t size) {
  blocks_mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_BarsBlocksSet::add_blocks_mats() {
  return blocks_mats_.Add();
}
inline void StockpileSettings_BarsBlocksSet::add_blocks_mats(const ::std::string& value) {
  blocks_mats_.Add()->assign(value);
}
inline void StockpileSettings_BarsBlocksSet::add_blocks_mats(const char* value) {
  blocks_mats_.Add()->assign(value);
}
inline void StockpileSettings_BarsBlocksSet::add_blocks_mats(const char* value, size_t size) {
  blocks_mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_BarsBlocksSet::blocks_mats() const {
  return blocks_mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_BarsBlocksSet::mutable_blocks_mats() {
  return &blocks_mats_;
}

// -------------------------------------------------------------------

// StockpileSettings_GemsSet

// repeated string rough_other_mats = 1;
inline int StockpileSettings_GemsSet::rough_other_mats_size() const {
  return rough_other_mats_.size();
}
inline void StockpileSettings_GemsSet::clear_rough_other_mats() {
  rough_other_mats_.Clear();
}
inline const ::std::string& StockpileSettings_GemsSet::rough_other_mats(int index) const {
  return rough_other_mats_.Get(index);
}
inline ::std::string* StockpileSettings_GemsSet::mutable_rough_other_mats(int index) {
  return rough_other_mats_.Mutable(index);
}
inline void StockpileSettings_GemsSet::set_rough_other_mats(int index, const ::std::string& value) {
  rough_other_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_GemsSet::set_rough_other_mats(int index, const char* value) {
  rough_other_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_GemsSet::set_rough_other_mats(int index, const char* value, size_t size) {
  rough_other_mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_GemsSet::add_rough_other_mats() {
  return rough_other_mats_.Add();
}
inline void StockpileSettings_GemsSet::add_rough_other_mats(const ::std::string& value) {
  rough_other_mats_.Add()->assign(value);
}
inline void StockpileSettings_GemsSet::add_rough_other_mats(const char* value) {
  rough_other_mats_.Add()->assign(value);
}
inline void StockpileSettings_GemsSet::add_rough_other_mats(const char* value, size_t size) {
  rough_other_mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_GemsSet::rough_other_mats() const {
  return rough_other_mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_GemsSet::mutable_rough_other_mats() {
  return &rough_other_mats_;
}

// repeated string cut_other_mats = 2;
inline int StockpileSettings_GemsSet::cut_other_mats_size() const {
  return cut_other_mats_.size();
}
inline void StockpileSettings_GemsSet::clear_cut_other_mats() {
  cut_other_mats_.Clear();
}
inline const ::std::string& StockpileSettings_GemsSet::cut_other_mats(int index) const {
  return cut_other_mats_.Get(index);
}
inline ::std::string* StockpileSettings_GemsSet::mutable_cut_other_mats(int index) {
  return cut_other_mats_.Mutable(index);
}
inline void StockpileSettings_GemsSet::set_cut_other_mats(int index, const ::std::string& value) {
  cut_other_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_GemsSet::set_cut_other_mats(int index, const char* value) {
  cut_other_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_GemsSet::set_cut_other_mats(int index, const char* value, size_t size) {
  cut_other_mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_GemsSet::add_cut_other_mats() {
  return cut_other_mats_.Add();
}
inline void StockpileSettings_GemsSet::add_cut_other_mats(const ::std::string& value) {
  cut_other_mats_.Add()->assign(value);
}
inline void StockpileSettings_GemsSet::add_cut_other_mats(const char* value) {
  cut_other_mats_.Add()->assign(value);
}
inline void StockpileSettings_GemsSet::add_cut_other_mats(const char* value, size_t size) {
  cut_other_mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_GemsSet::cut_other_mats() const {
  return cut_other_mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_GemsSet::mutable_cut_other_mats() {
  return &cut_other_mats_;
}

// repeated string rough_mats = 3;
inline int StockpileSettings_GemsSet::rough_mats_size() const {
  return rough_mats_.size();
}
inline void StockpileSettings_GemsSet::clear_rough_mats() {
  rough_mats_.Clear();
}
inline const ::std::string& StockpileSettings_GemsSet::rough_mats(int index) const {
  return rough_mats_.Get(index);
}
inline ::std::string* StockpileSettings_GemsSet::mutable_rough_mats(int index) {
  return rough_mats_.Mutable(index);
}
inline void StockpileSettings_GemsSet::set_rough_mats(int index, const ::std::string& value) {
  rough_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_GemsSet::set_rough_mats(int index, const char* value) {
  rough_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_GemsSet::set_rough_mats(int index, const char* value, size_t size) {
  rough_mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_GemsSet::add_rough_mats() {
  return rough_mats_.Add();
}
inline void StockpileSettings_GemsSet::add_rough_mats(const ::std::string& value) {
  rough_mats_.Add()->assign(value);
}
inline void StockpileSettings_GemsSet::add_rough_mats(const char* value) {
  rough_mats_.Add()->assign(value);
}
inline void StockpileSettings_GemsSet::add_rough_mats(const char* value, size_t size) {
  rough_mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_GemsSet::rough_mats() const {
  return rough_mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_GemsSet::mutable_rough_mats() {
  return &rough_mats_;
}

// repeated string cut_mats = 4;
inline int StockpileSettings_GemsSet::cut_mats_size() const {
  return cut_mats_.size();
}
inline void StockpileSettings_GemsSet::clear_cut_mats() {
  cut_mats_.Clear();
}
inline const ::std::string& StockpileSettings_GemsSet::cut_mats(int index) const {
  return cut_mats_.Get(index);
}
inline ::std::string* StockpileSettings_GemsSet::mutable_cut_mats(int index) {
  return cut_mats_.Mutable(index);
}
inline void StockpileSettings_GemsSet::set_cut_mats(int index, const ::std::string& value) {
  cut_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_GemsSet::set_cut_mats(int index, const char* value) {
  cut_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_GemsSet::set_cut_mats(int index, const char* value, size_t size) {
  cut_mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_GemsSet::add_cut_mats() {
  return cut_mats_.Add();
}
inline void StockpileSettings_GemsSet::add_cut_mats(const ::std::string& value) {
  cut_mats_.Add()->assign(value);
}
inline void StockpileSettings_GemsSet::add_cut_mats(const char* value) {
  cut_mats_.Add()->assign(value);
}
inline void StockpileSettings_GemsSet::add_cut_mats(const char* value, size_t size) {
  cut_mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_GemsSet::cut_mats() const {
  return cut_mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_GemsSet::mutable_cut_mats() {
  return &cut_mats_;
}

// -------------------------------------------------------------------

// StockpileSettings_FinishedGoodsSet

// repeated string type = 1;
inline int StockpileSettings_FinishedGoodsSet::type_size() const {
  return type_.size();
}
inline void StockpileSettings_FinishedGoodsSet::clear_type() {
  type_.Clear();
}
inline const ::std::string& StockpileSettings_FinishedGoodsSet::type(int index) const {
  return type_.Get(index);
}
inline ::std::string* StockpileSettings_FinishedGoodsSet::mutable_type(int index) {
  return type_.Mutable(index);
}
inline void StockpileSettings_FinishedGoodsSet::set_type(int index, const ::std::string& value) {
  type_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::set_type(int index, const char* value) {
  type_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::set_type(int index, const char* value, size_t size) {
  type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FinishedGoodsSet::add_type() {
  return type_.Add();
}
inline void StockpileSettings_FinishedGoodsSet::add_type(const ::std::string& value) {
  type_.Add()->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::add_type(const char* value) {
  type_.Add()->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::add_type(const char* value, size_t size) {
  type_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FinishedGoodsSet::type() const {
  return type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FinishedGoodsSet::mutable_type() {
  return &type_;
}

// repeated string other_mats = 2;
inline int StockpileSettings_FinishedGoodsSet::other_mats_size() const {
  return other_mats_.size();
}
inline void StockpileSettings_FinishedGoodsSet::clear_other_mats() {
  other_mats_.Clear();
}
inline const ::std::string& StockpileSettings_FinishedGoodsSet::other_mats(int index) const {
  return other_mats_.Get(index);
}
inline ::std::string* StockpileSettings_FinishedGoodsSet::mutable_other_mats(int index) {
  return other_mats_.Mutable(index);
}
inline void StockpileSettings_FinishedGoodsSet::set_other_mats(int index, const ::std::string& value) {
  other_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::set_other_mats(int index, const char* value) {
  other_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::set_other_mats(int index, const char* value, size_t size) {
  other_mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FinishedGoodsSet::add_other_mats() {
  return other_mats_.Add();
}
inline void StockpileSettings_FinishedGoodsSet::add_other_mats(const ::std::string& value) {
  other_mats_.Add()->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::add_other_mats(const char* value) {
  other_mats_.Add()->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::add_other_mats(const char* value, size_t size) {
  other_mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FinishedGoodsSet::other_mats() const {
  return other_mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FinishedGoodsSet::mutable_other_mats() {
  return &other_mats_;
}

// repeated string mats = 3;
inline int StockpileSettings_FinishedGoodsSet::mats_size() const {
  return mats_.size();
}
inline void StockpileSettings_FinishedGoodsSet::clear_mats() {
  mats_.Clear();
}
inline const ::std::string& StockpileSettings_FinishedGoodsSet::mats(int index) const {
  return mats_.Get(index);
}
inline ::std::string* StockpileSettings_FinishedGoodsSet::mutable_mats(int index) {
  return mats_.Mutable(index);
}
inline void StockpileSettings_FinishedGoodsSet::set_mats(int index, const ::std::string& value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::set_mats(int index, const char* value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::set_mats(int index, const char* value, size_t size) {
  mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FinishedGoodsSet::add_mats() {
  return mats_.Add();
}
inline void StockpileSettings_FinishedGoodsSet::add_mats(const ::std::string& value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::add_mats(const char* value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::add_mats(const char* value, size_t size) {
  mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FinishedGoodsSet::mats() const {
  return mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FinishedGoodsSet::mutable_mats() {
  return &mats_;
}

// repeated string quality_core = 4;
inline int StockpileSettings_FinishedGoodsSet::quality_core_size() const {
  return quality_core_.size();
}
inline void StockpileSettings_FinishedGoodsSet::clear_quality_core() {
  quality_core_.Clear();
}
inline const ::std::string& StockpileSettings_FinishedGoodsSet::quality_core(int index) const {
  return quality_core_.Get(index);
}
inline ::std::string* StockpileSettings_FinishedGoodsSet::mutable_quality_core(int index) {
  return quality_core_.Mutable(index);
}
inline void StockpileSettings_FinishedGoodsSet::set_quality_core(int index, const ::std::string& value) {
  quality_core_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::set_quality_core(int index, const char* value) {
  quality_core_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::set_quality_core(int index, const char* value, size_t size) {
  quality_core_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FinishedGoodsSet::add_quality_core() {
  return quality_core_.Add();
}
inline void StockpileSettings_FinishedGoodsSet::add_quality_core(const ::std::string& value) {
  quality_core_.Add()->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::add_quality_core(const char* value) {
  quality_core_.Add()->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::add_quality_core(const char* value, size_t size) {
  quality_core_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FinishedGoodsSet::quality_core() const {
  return quality_core_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FinishedGoodsSet::mutable_quality_core() {
  return &quality_core_;
}

// repeated string quality_total = 5;
inline int StockpileSettings_FinishedGoodsSet::quality_total_size() const {
  return quality_total_.size();
}
inline void StockpileSettings_FinishedGoodsSet::clear_quality_total() {
  quality_total_.Clear();
}
inline const ::std::string& StockpileSettings_FinishedGoodsSet::quality_total(int index) const {
  return quality_total_.Get(index);
}
inline ::std::string* StockpileSettings_FinishedGoodsSet::mutable_quality_total(int index) {
  return quality_total_.Mutable(index);
}
inline void StockpileSettings_FinishedGoodsSet::set_quality_total(int index, const ::std::string& value) {
  quality_total_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::set_quality_total(int index, const char* value) {
  quality_total_.Mutable(index)->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::set_quality_total(int index, const char* value, size_t size) {
  quality_total_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_FinishedGoodsSet::add_quality_total() {
  return quality_total_.Add();
}
inline void StockpileSettings_FinishedGoodsSet::add_quality_total(const ::std::string& value) {
  quality_total_.Add()->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::add_quality_total(const char* value) {
  quality_total_.Add()->assign(value);
}
inline void StockpileSettings_FinishedGoodsSet::add_quality_total(const char* value, size_t size) {
  quality_total_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_FinishedGoodsSet::quality_total() const {
  return quality_total_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_FinishedGoodsSet::mutable_quality_total() {
  return &quality_total_;
}

// -------------------------------------------------------------------

// StockpileSettings_LeatherSet

// repeated string mats = 1;
inline int StockpileSettings_LeatherSet::mats_size() const {
  return mats_.size();
}
inline void StockpileSettings_LeatherSet::clear_mats() {
  mats_.Clear();
}
inline const ::std::string& StockpileSettings_LeatherSet::mats(int index) const {
  return mats_.Get(index);
}
inline ::std::string* StockpileSettings_LeatherSet::mutable_mats(int index) {
  return mats_.Mutable(index);
}
inline void StockpileSettings_LeatherSet::set_mats(int index, const ::std::string& value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_LeatherSet::set_mats(int index, const char* value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_LeatherSet::set_mats(int index, const char* value, size_t size) {
  mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_LeatherSet::add_mats() {
  return mats_.Add();
}
inline void StockpileSettings_LeatherSet::add_mats(const ::std::string& value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_LeatherSet::add_mats(const char* value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_LeatherSet::add_mats(const char* value, size_t size) {
  mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_LeatherSet::mats() const {
  return mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_LeatherSet::mutable_mats() {
  return &mats_;
}

// -------------------------------------------------------------------

// StockpileSettings_ClothSet

// repeated string thread_silk = 1;
inline int StockpileSettings_ClothSet::thread_silk_size() const {
  return thread_silk_.size();
}
inline void StockpileSettings_ClothSet::clear_thread_silk() {
  thread_silk_.Clear();
}
inline const ::std::string& StockpileSettings_ClothSet::thread_silk(int index) const {
  return thread_silk_.Get(index);
}
inline ::std::string* StockpileSettings_ClothSet::mutable_thread_silk(int index) {
  return thread_silk_.Mutable(index);
}
inline void StockpileSettings_ClothSet::set_thread_silk(int index, const ::std::string& value) {
  thread_silk_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ClothSet::set_thread_silk(int index, const char* value) {
  thread_silk_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ClothSet::set_thread_silk(int index, const char* value, size_t size) {
  thread_silk_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_ClothSet::add_thread_silk() {
  return thread_silk_.Add();
}
inline void StockpileSettings_ClothSet::add_thread_silk(const ::std::string& value) {
  thread_silk_.Add()->assign(value);
}
inline void StockpileSettings_ClothSet::add_thread_silk(const char* value) {
  thread_silk_.Add()->assign(value);
}
inline void StockpileSettings_ClothSet::add_thread_silk(const char* value, size_t size) {
  thread_silk_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_ClothSet::thread_silk() const {
  return thread_silk_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_ClothSet::mutable_thread_silk() {
  return &thread_silk_;
}

// repeated string thread_plant = 2;
inline int StockpileSettings_ClothSet::thread_plant_size() const {
  return thread_plant_.size();
}
inline void StockpileSettings_ClothSet::clear_thread_plant() {
  thread_plant_.Clear();
}
inline const ::std::string& StockpileSettings_ClothSet::thread_plant(int index) const {
  return thread_plant_.Get(index);
}
inline ::std::string* StockpileSettings_ClothSet::mutable_thread_plant(int index) {
  return thread_plant_.Mutable(index);
}
inline void StockpileSettings_ClothSet::set_thread_plant(int index, const ::std::string& value) {
  thread_plant_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ClothSet::set_thread_plant(int index, const char* value) {
  thread_plant_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ClothSet::set_thread_plant(int index, const char* value, size_t size) {
  thread_plant_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_ClothSet::add_thread_plant() {
  return thread_plant_.Add();
}
inline void StockpileSettings_ClothSet::add_thread_plant(const ::std::string& value) {
  thread_plant_.Add()->assign(value);
}
inline void StockpileSettings_ClothSet::add_thread_plant(const char* value) {
  thread_plant_.Add()->assign(value);
}
inline void StockpileSettings_ClothSet::add_thread_plant(const char* value, size_t size) {
  thread_plant_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_ClothSet::thread_plant() const {
  return thread_plant_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_ClothSet::mutable_thread_plant() {
  return &thread_plant_;
}

// repeated string thread_yarn = 3;
inline int StockpileSettings_ClothSet::thread_yarn_size() const {
  return thread_yarn_.size();
}
inline void StockpileSettings_ClothSet::clear_thread_yarn() {
  thread_yarn_.Clear();
}
inline const ::std::string& StockpileSettings_ClothSet::thread_yarn(int index) const {
  return thread_yarn_.Get(index);
}
inline ::std::string* StockpileSettings_ClothSet::mutable_thread_yarn(int index) {
  return thread_yarn_.Mutable(index);
}
inline void StockpileSettings_ClothSet::set_thread_yarn(int index, const ::std::string& value) {
  thread_yarn_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ClothSet::set_thread_yarn(int index, const char* value) {
  thread_yarn_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ClothSet::set_thread_yarn(int index, const char* value, size_t size) {
  thread_yarn_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_ClothSet::add_thread_yarn() {
  return thread_yarn_.Add();
}
inline void StockpileSettings_ClothSet::add_thread_yarn(const ::std::string& value) {
  thread_yarn_.Add()->assign(value);
}
inline void StockpileSettings_ClothSet::add_thread_yarn(const char* value) {
  thread_yarn_.Add()->assign(value);
}
inline void StockpileSettings_ClothSet::add_thread_yarn(const char* value, size_t size) {
  thread_yarn_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_ClothSet::thread_yarn() const {
  return thread_yarn_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_ClothSet::mutable_thread_yarn() {
  return &thread_yarn_;
}

// repeated string thread_metal = 4;
inline int StockpileSettings_ClothSet::thread_metal_size() const {
  return thread_metal_.size();
}
inline void StockpileSettings_ClothSet::clear_thread_metal() {
  thread_metal_.Clear();
}
inline const ::std::string& StockpileSettings_ClothSet::thread_metal(int index) const {
  return thread_metal_.Get(index);
}
inline ::std::string* StockpileSettings_ClothSet::mutable_thread_metal(int index) {
  return thread_metal_.Mutable(index);
}
inline void StockpileSettings_ClothSet::set_thread_metal(int index, const ::std::string& value) {
  thread_metal_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ClothSet::set_thread_metal(int index, const char* value) {
  thread_metal_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ClothSet::set_thread_metal(int index, const char* value, size_t size) {
  thread_metal_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_ClothSet::add_thread_metal() {
  return thread_metal_.Add();
}
inline void StockpileSettings_ClothSet::add_thread_metal(const ::std::string& value) {
  thread_metal_.Add()->assign(value);
}
inline void StockpileSettings_ClothSet::add_thread_metal(const char* value) {
  thread_metal_.Add()->assign(value);
}
inline void StockpileSettings_ClothSet::add_thread_metal(const char* value, size_t size) {
  thread_metal_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_ClothSet::thread_metal() const {
  return thread_metal_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_ClothSet::mutable_thread_metal() {
  return &thread_metal_;
}

// repeated string cloth_silk = 5;
inline int StockpileSettings_ClothSet::cloth_silk_size() const {
  return cloth_silk_.size();
}
inline void StockpileSettings_ClothSet::clear_cloth_silk() {
  cloth_silk_.Clear();
}
inline const ::std::string& StockpileSettings_ClothSet::cloth_silk(int index) const {
  return cloth_silk_.Get(index);
}
inline ::std::string* StockpileSettings_ClothSet::mutable_cloth_silk(int index) {
  return cloth_silk_.Mutable(index);
}
inline void StockpileSettings_ClothSet::set_cloth_silk(int index, const ::std::string& value) {
  cloth_silk_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ClothSet::set_cloth_silk(int index, const char* value) {
  cloth_silk_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ClothSet::set_cloth_silk(int index, const char* value, size_t size) {
  cloth_silk_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_ClothSet::add_cloth_silk() {
  return cloth_silk_.Add();
}
inline void StockpileSettings_ClothSet::add_cloth_silk(const ::std::string& value) {
  cloth_silk_.Add()->assign(value);
}
inline void StockpileSettings_ClothSet::add_cloth_silk(const char* value) {
  cloth_silk_.Add()->assign(value);
}
inline void StockpileSettings_ClothSet::add_cloth_silk(const char* value, size_t size) {
  cloth_silk_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_ClothSet::cloth_silk() const {
  return cloth_silk_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_ClothSet::mutable_cloth_silk() {
  return &cloth_silk_;
}

// repeated string cloth_plant = 6;
inline int StockpileSettings_ClothSet::cloth_plant_size() const {
  return cloth_plant_.size();
}
inline void StockpileSettings_ClothSet::clear_cloth_plant() {
  cloth_plant_.Clear();
}
inline const ::std::string& StockpileSettings_ClothSet::cloth_plant(int index) const {
  return cloth_plant_.Get(index);
}
inline ::std::string* StockpileSettings_ClothSet::mutable_cloth_plant(int index) {
  return cloth_plant_.Mutable(index);
}
inline void StockpileSettings_ClothSet::set_cloth_plant(int index, const ::std::string& value) {
  cloth_plant_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ClothSet::set_cloth_plant(int index, const char* value) {
  cloth_plant_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ClothSet::set_cloth_plant(int index, const char* value, size_t size) {
  cloth_plant_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_ClothSet::add_cloth_plant() {
  return cloth_plant_.Add();
}
inline void StockpileSettings_ClothSet::add_cloth_plant(const ::std::string& value) {
  cloth_plant_.Add()->assign(value);
}
inline void StockpileSettings_ClothSet::add_cloth_plant(const char* value) {
  cloth_plant_.Add()->assign(value);
}
inline void StockpileSettings_ClothSet::add_cloth_plant(const char* value, size_t size) {
  cloth_plant_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_ClothSet::cloth_plant() const {
  return cloth_plant_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_ClothSet::mutable_cloth_plant() {
  return &cloth_plant_;
}

// repeated string cloth_yarn = 7;
inline int StockpileSettings_ClothSet::cloth_yarn_size() const {
  return cloth_yarn_.size();
}
inline void StockpileSettings_ClothSet::clear_cloth_yarn() {
  cloth_yarn_.Clear();
}
inline const ::std::string& StockpileSettings_ClothSet::cloth_yarn(int index) const {
  return cloth_yarn_.Get(index);
}
inline ::std::string* StockpileSettings_ClothSet::mutable_cloth_yarn(int index) {
  return cloth_yarn_.Mutable(index);
}
inline void StockpileSettings_ClothSet::set_cloth_yarn(int index, const ::std::string& value) {
  cloth_yarn_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ClothSet::set_cloth_yarn(int index, const char* value) {
  cloth_yarn_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ClothSet::set_cloth_yarn(int index, const char* value, size_t size) {
  cloth_yarn_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_ClothSet::add_cloth_yarn() {
  return cloth_yarn_.Add();
}
inline void StockpileSettings_ClothSet::add_cloth_yarn(const ::std::string& value) {
  cloth_yarn_.Add()->assign(value);
}
inline void StockpileSettings_ClothSet::add_cloth_yarn(const char* value) {
  cloth_yarn_.Add()->assign(value);
}
inline void StockpileSettings_ClothSet::add_cloth_yarn(const char* value, size_t size) {
  cloth_yarn_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_ClothSet::cloth_yarn() const {
  return cloth_yarn_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_ClothSet::mutable_cloth_yarn() {
  return &cloth_yarn_;
}

// repeated string cloth_metal = 8;
inline int StockpileSettings_ClothSet::cloth_metal_size() const {
  return cloth_metal_.size();
}
inline void StockpileSettings_ClothSet::clear_cloth_metal() {
  cloth_metal_.Clear();
}
inline const ::std::string& StockpileSettings_ClothSet::cloth_metal(int index) const {
  return cloth_metal_.Get(index);
}
inline ::std::string* StockpileSettings_ClothSet::mutable_cloth_metal(int index) {
  return cloth_metal_.Mutable(index);
}
inline void StockpileSettings_ClothSet::set_cloth_metal(int index, const ::std::string& value) {
  cloth_metal_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ClothSet::set_cloth_metal(int index, const char* value) {
  cloth_metal_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ClothSet::set_cloth_metal(int index, const char* value, size_t size) {
  cloth_metal_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_ClothSet::add_cloth_metal() {
  return cloth_metal_.Add();
}
inline void StockpileSettings_ClothSet::add_cloth_metal(const ::std::string& value) {
  cloth_metal_.Add()->assign(value);
}
inline void StockpileSettings_ClothSet::add_cloth_metal(const char* value) {
  cloth_metal_.Add()->assign(value);
}
inline void StockpileSettings_ClothSet::add_cloth_metal(const char* value, size_t size) {
  cloth_metal_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_ClothSet::cloth_metal() const {
  return cloth_metal_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_ClothSet::mutable_cloth_metal() {
  return &cloth_metal_;
}

// -------------------------------------------------------------------

// StockpileSettings_WoodSet

// repeated string mats = 1;
inline int StockpileSettings_WoodSet::mats_size() const {
  return mats_.size();
}
inline void StockpileSettings_WoodSet::clear_mats() {
  mats_.Clear();
}
inline const ::std::string& StockpileSettings_WoodSet::mats(int index) const {
  return mats_.Get(index);
}
inline ::std::string* StockpileSettings_WoodSet::mutable_mats(int index) {
  return mats_.Mutable(index);
}
inline void StockpileSettings_WoodSet::set_mats(int index, const ::std::string& value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_WoodSet::set_mats(int index, const char* value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_WoodSet::set_mats(int index, const char* value, size_t size) {
  mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_WoodSet::add_mats() {
  return mats_.Add();
}
inline void StockpileSettings_WoodSet::add_mats(const ::std::string& value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_WoodSet::add_mats(const char* value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_WoodSet::add_mats(const char* value, size_t size) {
  mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_WoodSet::mats() const {
  return mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_WoodSet::mutable_mats() {
  return &mats_;
}

// -------------------------------------------------------------------

// StockpileSettings_WeaponsSet

// repeated string weapon_type = 1;
inline int StockpileSettings_WeaponsSet::weapon_type_size() const {
  return weapon_type_.size();
}
inline void StockpileSettings_WeaponsSet::clear_weapon_type() {
  weapon_type_.Clear();
}
inline const ::std::string& StockpileSettings_WeaponsSet::weapon_type(int index) const {
  return weapon_type_.Get(index);
}
inline ::std::string* StockpileSettings_WeaponsSet::mutable_weapon_type(int index) {
  return weapon_type_.Mutable(index);
}
inline void StockpileSettings_WeaponsSet::set_weapon_type(int index, const ::std::string& value) {
  weapon_type_.Mutable(index)->assign(value);
}
inline void StockpileSettings_WeaponsSet::set_weapon_type(int index, const char* value) {
  weapon_type_.Mutable(index)->assign(value);
}
inline void StockpileSettings_WeaponsSet::set_weapon_type(int index, const char* value, size_t size) {
  weapon_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_WeaponsSet::add_weapon_type() {
  return weapon_type_.Add();
}
inline void StockpileSettings_WeaponsSet::add_weapon_type(const ::std::string& value) {
  weapon_type_.Add()->assign(value);
}
inline void StockpileSettings_WeaponsSet::add_weapon_type(const char* value) {
  weapon_type_.Add()->assign(value);
}
inline void StockpileSettings_WeaponsSet::add_weapon_type(const char* value, size_t size) {
  weapon_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_WeaponsSet::weapon_type() const {
  return weapon_type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_WeaponsSet::mutable_weapon_type() {
  return &weapon_type_;
}

// repeated string trapcomp_type = 2;
inline int StockpileSettings_WeaponsSet::trapcomp_type_size() const {
  return trapcomp_type_.size();
}
inline void StockpileSettings_WeaponsSet::clear_trapcomp_type() {
  trapcomp_type_.Clear();
}
inline const ::std::string& StockpileSettings_WeaponsSet::trapcomp_type(int index) const {
  return trapcomp_type_.Get(index);
}
inline ::std::string* StockpileSettings_WeaponsSet::mutable_trapcomp_type(int index) {
  return trapcomp_type_.Mutable(index);
}
inline void StockpileSettings_WeaponsSet::set_trapcomp_type(int index, const ::std::string& value) {
  trapcomp_type_.Mutable(index)->assign(value);
}
inline void StockpileSettings_WeaponsSet::set_trapcomp_type(int index, const char* value) {
  trapcomp_type_.Mutable(index)->assign(value);
}
inline void StockpileSettings_WeaponsSet::set_trapcomp_type(int index, const char* value, size_t size) {
  trapcomp_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_WeaponsSet::add_trapcomp_type() {
  return trapcomp_type_.Add();
}
inline void StockpileSettings_WeaponsSet::add_trapcomp_type(const ::std::string& value) {
  trapcomp_type_.Add()->assign(value);
}
inline void StockpileSettings_WeaponsSet::add_trapcomp_type(const char* value) {
  trapcomp_type_.Add()->assign(value);
}
inline void StockpileSettings_WeaponsSet::add_trapcomp_type(const char* value, size_t size) {
  trapcomp_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_WeaponsSet::trapcomp_type() const {
  return trapcomp_type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_WeaponsSet::mutable_trapcomp_type() {
  return &trapcomp_type_;
}

// repeated string other_mats = 3;
inline int StockpileSettings_WeaponsSet::other_mats_size() const {
  return other_mats_.size();
}
inline void StockpileSettings_WeaponsSet::clear_other_mats() {
  other_mats_.Clear();
}
inline const ::std::string& StockpileSettings_WeaponsSet::other_mats(int index) const {
  return other_mats_.Get(index);
}
inline ::std::string* StockpileSettings_WeaponsSet::mutable_other_mats(int index) {
  return other_mats_.Mutable(index);
}
inline void StockpileSettings_WeaponsSet::set_other_mats(int index, const ::std::string& value) {
  other_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_WeaponsSet::set_other_mats(int index, const char* value) {
  other_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_WeaponsSet::set_other_mats(int index, const char* value, size_t size) {
  other_mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_WeaponsSet::add_other_mats() {
  return other_mats_.Add();
}
inline void StockpileSettings_WeaponsSet::add_other_mats(const ::std::string& value) {
  other_mats_.Add()->assign(value);
}
inline void StockpileSettings_WeaponsSet::add_other_mats(const char* value) {
  other_mats_.Add()->assign(value);
}
inline void StockpileSettings_WeaponsSet::add_other_mats(const char* value, size_t size) {
  other_mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_WeaponsSet::other_mats() const {
  return other_mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_WeaponsSet::mutable_other_mats() {
  return &other_mats_;
}

// repeated string mats = 4;
inline int StockpileSettings_WeaponsSet::mats_size() const {
  return mats_.size();
}
inline void StockpileSettings_WeaponsSet::clear_mats() {
  mats_.Clear();
}
inline const ::std::string& StockpileSettings_WeaponsSet::mats(int index) const {
  return mats_.Get(index);
}
inline ::std::string* StockpileSettings_WeaponsSet::mutable_mats(int index) {
  return mats_.Mutable(index);
}
inline void StockpileSettings_WeaponsSet::set_mats(int index, const ::std::string& value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_WeaponsSet::set_mats(int index, const char* value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_WeaponsSet::set_mats(int index, const char* value, size_t size) {
  mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_WeaponsSet::add_mats() {
  return mats_.Add();
}
inline void StockpileSettings_WeaponsSet::add_mats(const ::std::string& value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_WeaponsSet::add_mats(const char* value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_WeaponsSet::add_mats(const char* value, size_t size) {
  mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_WeaponsSet::mats() const {
  return mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_WeaponsSet::mutable_mats() {
  return &mats_;
}

// repeated string quality_core = 5;
inline int StockpileSettings_WeaponsSet::quality_core_size() const {
  return quality_core_.size();
}
inline void StockpileSettings_WeaponsSet::clear_quality_core() {
  quality_core_.Clear();
}
inline const ::std::string& StockpileSettings_WeaponsSet::quality_core(int index) const {
  return quality_core_.Get(index);
}
inline ::std::string* StockpileSettings_WeaponsSet::mutable_quality_core(int index) {
  return quality_core_.Mutable(index);
}
inline void StockpileSettings_WeaponsSet::set_quality_core(int index, const ::std::string& value) {
  quality_core_.Mutable(index)->assign(value);
}
inline void StockpileSettings_WeaponsSet::set_quality_core(int index, const char* value) {
  quality_core_.Mutable(index)->assign(value);
}
inline void StockpileSettings_WeaponsSet::set_quality_core(int index, const char* value, size_t size) {
  quality_core_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_WeaponsSet::add_quality_core() {
  return quality_core_.Add();
}
inline void StockpileSettings_WeaponsSet::add_quality_core(const ::std::string& value) {
  quality_core_.Add()->assign(value);
}
inline void StockpileSettings_WeaponsSet::add_quality_core(const char* value) {
  quality_core_.Add()->assign(value);
}
inline void StockpileSettings_WeaponsSet::add_quality_core(const char* value, size_t size) {
  quality_core_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_WeaponsSet::quality_core() const {
  return quality_core_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_WeaponsSet::mutable_quality_core() {
  return &quality_core_;
}

// repeated string quality_total = 6;
inline int StockpileSettings_WeaponsSet::quality_total_size() const {
  return quality_total_.size();
}
inline void StockpileSettings_WeaponsSet::clear_quality_total() {
  quality_total_.Clear();
}
inline const ::std::string& StockpileSettings_WeaponsSet::quality_total(int index) const {
  return quality_total_.Get(index);
}
inline ::std::string* StockpileSettings_WeaponsSet::mutable_quality_total(int index) {
  return quality_total_.Mutable(index);
}
inline void StockpileSettings_WeaponsSet::set_quality_total(int index, const ::std::string& value) {
  quality_total_.Mutable(index)->assign(value);
}
inline void StockpileSettings_WeaponsSet::set_quality_total(int index, const char* value) {
  quality_total_.Mutable(index)->assign(value);
}
inline void StockpileSettings_WeaponsSet::set_quality_total(int index, const char* value, size_t size) {
  quality_total_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_WeaponsSet::add_quality_total() {
  return quality_total_.Add();
}
inline void StockpileSettings_WeaponsSet::add_quality_total(const ::std::string& value) {
  quality_total_.Add()->assign(value);
}
inline void StockpileSettings_WeaponsSet::add_quality_total(const char* value) {
  quality_total_.Add()->assign(value);
}
inline void StockpileSettings_WeaponsSet::add_quality_total(const char* value, size_t size) {
  quality_total_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_WeaponsSet::quality_total() const {
  return quality_total_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_WeaponsSet::mutable_quality_total() {
  return &quality_total_;
}

// optional bool usable = 7;
inline bool StockpileSettings_WeaponsSet::has_usable() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockpileSettings_WeaponsSet::set_has_usable() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockpileSettings_WeaponsSet::clear_has_usable() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockpileSettings_WeaponsSet::clear_usable() {
  usable_ = false;
  clear_has_usable();
}
inline bool StockpileSettings_WeaponsSet::usable() const {
  return usable_;
}
inline void StockpileSettings_WeaponsSet::set_usable(bool value) {
  set_has_usable();
  usable_ = value;
}

// optional bool unusable = 8;
inline bool StockpileSettings_WeaponsSet::has_unusable() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockpileSettings_WeaponsSet::set_has_unusable() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockpileSettings_WeaponsSet::clear_has_unusable() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockpileSettings_WeaponsSet::clear_unusable() {
  unusable_ = false;
  clear_has_unusable();
}
inline bool StockpileSettings_WeaponsSet::unusable() const {
  return unusable_;
}
inline void StockpileSettings_WeaponsSet::set_unusable(bool value) {
  set_has_unusable();
  unusable_ = value;
}

// -------------------------------------------------------------------

// StockpileSettings_ArmorSet

// repeated string body = 1;
inline int StockpileSettings_ArmorSet::body_size() const {
  return body_.size();
}
inline void StockpileSettings_ArmorSet::clear_body() {
  body_.Clear();
}
inline const ::std::string& StockpileSettings_ArmorSet::body(int index) const {
  return body_.Get(index);
}
inline ::std::string* StockpileSettings_ArmorSet::mutable_body(int index) {
  return body_.Mutable(index);
}
inline void StockpileSettings_ArmorSet::set_body(int index, const ::std::string& value) {
  body_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_body(int index, const char* value) {
  body_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_body(int index, const char* value, size_t size) {
  body_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_ArmorSet::add_body() {
  return body_.Add();
}
inline void StockpileSettings_ArmorSet::add_body(const ::std::string& value) {
  body_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_body(const char* value) {
  body_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_body(const char* value, size_t size) {
  body_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_ArmorSet::body() const {
  return body_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_ArmorSet::mutable_body() {
  return &body_;
}

// repeated string head = 2;
inline int StockpileSettings_ArmorSet::head_size() const {
  return head_.size();
}
inline void StockpileSettings_ArmorSet::clear_head() {
  head_.Clear();
}
inline const ::std::string& StockpileSettings_ArmorSet::head(int index) const {
  return head_.Get(index);
}
inline ::std::string* StockpileSettings_ArmorSet::mutable_head(int index) {
  return head_.Mutable(index);
}
inline void StockpileSettings_ArmorSet::set_head(int index, const ::std::string& value) {
  head_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_head(int index, const char* value) {
  head_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_head(int index, const char* value, size_t size) {
  head_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_ArmorSet::add_head() {
  return head_.Add();
}
inline void StockpileSettings_ArmorSet::add_head(const ::std::string& value) {
  head_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_head(const char* value) {
  head_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_head(const char* value, size_t size) {
  head_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_ArmorSet::head() const {
  return head_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_ArmorSet::mutable_head() {
  return &head_;
}

// repeated string feet = 3;
inline int StockpileSettings_ArmorSet::feet_size() const {
  return feet_.size();
}
inline void StockpileSettings_ArmorSet::clear_feet() {
  feet_.Clear();
}
inline const ::std::string& StockpileSettings_ArmorSet::feet(int index) const {
  return feet_.Get(index);
}
inline ::std::string* StockpileSettings_ArmorSet::mutable_feet(int index) {
  return feet_.Mutable(index);
}
inline void StockpileSettings_ArmorSet::set_feet(int index, const ::std::string& value) {
  feet_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_feet(int index, const char* value) {
  feet_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_feet(int index, const char* value, size_t size) {
  feet_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_ArmorSet::add_feet() {
  return feet_.Add();
}
inline void StockpileSettings_ArmorSet::add_feet(const ::std::string& value) {
  feet_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_feet(const char* value) {
  feet_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_feet(const char* value, size_t size) {
  feet_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_ArmorSet::feet() const {
  return feet_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_ArmorSet::mutable_feet() {
  return &feet_;
}

// repeated string hands = 4;
inline int StockpileSettings_ArmorSet::hands_size() const {
  return hands_.size();
}
inline void StockpileSettings_ArmorSet::clear_hands() {
  hands_.Clear();
}
inline const ::std::string& StockpileSettings_ArmorSet::hands(int index) const {
  return hands_.Get(index);
}
inline ::std::string* StockpileSettings_ArmorSet::mutable_hands(int index) {
  return hands_.Mutable(index);
}
inline void StockpileSettings_ArmorSet::set_hands(int index, const ::std::string& value) {
  hands_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_hands(int index, const char* value) {
  hands_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_hands(int index, const char* value, size_t size) {
  hands_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_ArmorSet::add_hands() {
  return hands_.Add();
}
inline void StockpileSettings_ArmorSet::add_hands(const ::std::string& value) {
  hands_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_hands(const char* value) {
  hands_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_hands(const char* value, size_t size) {
  hands_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_ArmorSet::hands() const {
  return hands_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_ArmorSet::mutable_hands() {
  return &hands_;
}

// repeated string legs = 5;
inline int StockpileSettings_ArmorSet::legs_size() const {
  return legs_.size();
}
inline void StockpileSettings_ArmorSet::clear_legs() {
  legs_.Clear();
}
inline const ::std::string& StockpileSettings_ArmorSet::legs(int index) const {
  return legs_.Get(index);
}
inline ::std::string* StockpileSettings_ArmorSet::mutable_legs(int index) {
  return legs_.Mutable(index);
}
inline void StockpileSettings_ArmorSet::set_legs(int index, const ::std::string& value) {
  legs_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_legs(int index, const char* value) {
  legs_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_legs(int index, const char* value, size_t size) {
  legs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_ArmorSet::add_legs() {
  return legs_.Add();
}
inline void StockpileSettings_ArmorSet::add_legs(const ::std::string& value) {
  legs_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_legs(const char* value) {
  legs_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_legs(const char* value, size_t size) {
  legs_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_ArmorSet::legs() const {
  return legs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_ArmorSet::mutable_legs() {
  return &legs_;
}

// repeated string shield = 6;
inline int StockpileSettings_ArmorSet::shield_size() const {
  return shield_.size();
}
inline void StockpileSettings_ArmorSet::clear_shield() {
  shield_.Clear();
}
inline const ::std::string& StockpileSettings_ArmorSet::shield(int index) const {
  return shield_.Get(index);
}
inline ::std::string* StockpileSettings_ArmorSet::mutable_shield(int index) {
  return shield_.Mutable(index);
}
inline void StockpileSettings_ArmorSet::set_shield(int index, const ::std::string& value) {
  shield_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_shield(int index, const char* value) {
  shield_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_shield(int index, const char* value, size_t size) {
  shield_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_ArmorSet::add_shield() {
  return shield_.Add();
}
inline void StockpileSettings_ArmorSet::add_shield(const ::std::string& value) {
  shield_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_shield(const char* value) {
  shield_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_shield(const char* value, size_t size) {
  shield_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_ArmorSet::shield() const {
  return shield_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_ArmorSet::mutable_shield() {
  return &shield_;
}

// repeated string other_mats = 7;
inline int StockpileSettings_ArmorSet::other_mats_size() const {
  return other_mats_.size();
}
inline void StockpileSettings_ArmorSet::clear_other_mats() {
  other_mats_.Clear();
}
inline const ::std::string& StockpileSettings_ArmorSet::other_mats(int index) const {
  return other_mats_.Get(index);
}
inline ::std::string* StockpileSettings_ArmorSet::mutable_other_mats(int index) {
  return other_mats_.Mutable(index);
}
inline void StockpileSettings_ArmorSet::set_other_mats(int index, const ::std::string& value) {
  other_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_other_mats(int index, const char* value) {
  other_mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_other_mats(int index, const char* value, size_t size) {
  other_mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_ArmorSet::add_other_mats() {
  return other_mats_.Add();
}
inline void StockpileSettings_ArmorSet::add_other_mats(const ::std::string& value) {
  other_mats_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_other_mats(const char* value) {
  other_mats_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_other_mats(const char* value, size_t size) {
  other_mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_ArmorSet::other_mats() const {
  return other_mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_ArmorSet::mutable_other_mats() {
  return &other_mats_;
}

// repeated string mats = 8;
inline int StockpileSettings_ArmorSet::mats_size() const {
  return mats_.size();
}
inline void StockpileSettings_ArmorSet::clear_mats() {
  mats_.Clear();
}
inline const ::std::string& StockpileSettings_ArmorSet::mats(int index) const {
  return mats_.Get(index);
}
inline ::std::string* StockpileSettings_ArmorSet::mutable_mats(int index) {
  return mats_.Mutable(index);
}
inline void StockpileSettings_ArmorSet::set_mats(int index, const ::std::string& value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_mats(int index, const char* value) {
  mats_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_mats(int index, const char* value, size_t size) {
  mats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_ArmorSet::add_mats() {
  return mats_.Add();
}
inline void StockpileSettings_ArmorSet::add_mats(const ::std::string& value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_mats(const char* value) {
  mats_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_mats(const char* value, size_t size) {
  mats_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_ArmorSet::mats() const {
  return mats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_ArmorSet::mutable_mats() {
  return &mats_;
}

// repeated string quality_core = 9;
inline int StockpileSettings_ArmorSet::quality_core_size() const {
  return quality_core_.size();
}
inline void StockpileSettings_ArmorSet::clear_quality_core() {
  quality_core_.Clear();
}
inline const ::std::string& StockpileSettings_ArmorSet::quality_core(int index) const {
  return quality_core_.Get(index);
}
inline ::std::string* StockpileSettings_ArmorSet::mutable_quality_core(int index) {
  return quality_core_.Mutable(index);
}
inline void StockpileSettings_ArmorSet::set_quality_core(int index, const ::std::string& value) {
  quality_core_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_quality_core(int index, const char* value) {
  quality_core_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_quality_core(int index, const char* value, size_t size) {
  quality_core_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_ArmorSet::add_quality_core() {
  return quality_core_.Add();
}
inline void StockpileSettings_ArmorSet::add_quality_core(const ::std::string& value) {
  quality_core_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_quality_core(const char* value) {
  quality_core_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_quality_core(const char* value, size_t size) {
  quality_core_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_ArmorSet::quality_core() const {
  return quality_core_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_ArmorSet::mutable_quality_core() {
  return &quality_core_;
}

// repeated string quality_total = 10;
inline int StockpileSettings_ArmorSet::quality_total_size() const {
  return quality_total_.size();
}
inline void StockpileSettings_ArmorSet::clear_quality_total() {
  quality_total_.Clear();
}
inline const ::std::string& StockpileSettings_ArmorSet::quality_total(int index) const {
  return quality_total_.Get(index);
}
inline ::std::string* StockpileSettings_ArmorSet::mutable_quality_total(int index) {
  return quality_total_.Mutable(index);
}
inline void StockpileSettings_ArmorSet::set_quality_total(int index, const ::std::string& value) {
  quality_total_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_quality_total(int index, const char* value) {
  quality_total_.Mutable(index)->assign(value);
}
inline void StockpileSettings_ArmorSet::set_quality_total(int index, const char* value, size_t size) {
  quality_total_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockpileSettings_ArmorSet::add_quality_total() {
  return quality_total_.Add();
}
inline void StockpileSettings_ArmorSet::add_quality_total(const ::std::string& value) {
  quality_total_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_quality_total(const char* value) {
  quality_total_.Add()->assign(value);
}
inline void StockpileSettings_ArmorSet::add_quality_total(const char* value, size_t size) {
  quality_total_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StockpileSettings_ArmorSet::quality_total() const {
  return quality_total_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StockpileSettings_ArmorSet::mutable_quality_total() {
  return &quality_total_;
}

// optional bool usable = 11;
inline bool StockpileSettings_ArmorSet::has_usable() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StockpileSettings_ArmorSet::set_has_usable() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StockpileSettings_ArmorSet::clear_has_usable() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StockpileSettings_ArmorSet::clear_usable() {
  usable_ = false;
  clear_has_usable();
}
inline bool StockpileSettings_ArmorSet::usable() const {
  return usable_;
}
inline void StockpileSettings_ArmorSet::set_usable(bool value) {
  set_has_usable();
  usable_ = value;
}

// optional bool unusable = 12;
inline bool StockpileSettings_ArmorSet::has_unusable() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StockpileSettings_ArmorSet::set_has_unusable() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StockpileSettings_ArmorSet::clear_has_unusable() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StockpileSettings_ArmorSet::clear_unusable() {
  unusable_ = false;
  clear_has_unusable();
}
inline bool StockpileSettings_ArmorSet::unusable() const {
  return unusable_;
}
inline void StockpileSettings_ArmorSet::set_unusable(bool value) {
  set_has_unusable();
  unusable_ = value;
}

// -------------------------------------------------------------------

// StockpileSettings

// optional .dfstockpiles.StockpileSettings.AnimalsSet animals = 1;
inline bool StockpileSettings::has_animals() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockpileSettings::set_has_animals() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockpileSettings::clear_has_animals() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockpileSettings::clear_animals() {
  if (animals_ != NULL) animals_->::dfstockpiles::StockpileSettings_AnimalsSet::Clear();
  clear_has_animals();
}
inline const ::dfstockpiles::StockpileSettings_AnimalsSet& StockpileSettings::animals() const {
  return animals_ != NULL ? *animals_ : *default_instance_->animals_;
}
inline ::dfstockpiles::StockpileSettings_AnimalsSet* StockpileSettings::mutable_animals() {
  set_has_animals();
  if (animals_ == NULL) animals_ = new ::dfstockpiles::StockpileSettings_AnimalsSet;
  return animals_;
}
inline ::dfstockpiles::StockpileSettings_AnimalsSet* StockpileSettings::release_animals() {
  clear_has_animals();
  ::dfstockpiles::StockpileSettings_AnimalsSet* temp = animals_;
  animals_ = NULL;
  return temp;
}

// optional .dfstockpiles.StockpileSettings.FoodSet food = 2;
inline bool StockpileSettings::has_food() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockpileSettings::set_has_food() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockpileSettings::clear_has_food() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockpileSettings::clear_food() {
  if (food_ != NULL) food_->::dfstockpiles::StockpileSettings_FoodSet::Clear();
  clear_has_food();
}
inline const ::dfstockpiles::StockpileSettings_FoodSet& StockpileSettings::food() const {
  return food_ != NULL ? *food_ : *default_instance_->food_;
}
inline ::dfstockpiles::StockpileSettings_FoodSet* StockpileSettings::mutable_food() {
  set_has_food();
  if (food_ == NULL) food_ = new ::dfstockpiles::StockpileSettings_FoodSet;
  return food_;
}
inline ::dfstockpiles::StockpileSettings_FoodSet* StockpileSettings::release_food() {
  clear_has_food();
  ::dfstockpiles::StockpileSettings_FoodSet* temp = food_;
  food_ = NULL;
  return temp;
}

// optional .dfstockpiles.StockpileSettings.FurnitureSet furniture = 3;
inline bool StockpileSettings::has_furniture() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockpileSettings::set_has_furniture() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockpileSettings::clear_has_furniture() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockpileSettings::clear_furniture() {
  if (furniture_ != NULL) furniture_->::dfstockpiles::StockpileSettings_FurnitureSet::Clear();
  clear_has_furniture();
}
inline const ::dfstockpiles::StockpileSettings_FurnitureSet& StockpileSettings::furniture() const {
  return furniture_ != NULL ? *furniture_ : *default_instance_->furniture_;
}
inline ::dfstockpiles::StockpileSettings_FurnitureSet* StockpileSettings::mutable_furniture() {
  set_has_furniture();
  if (furniture_ == NULL) furniture_ = new ::dfstockpiles::StockpileSettings_FurnitureSet;
  return furniture_;
}
inline ::dfstockpiles::StockpileSettings_FurnitureSet* StockpileSettings::release_furniture() {
  clear_has_furniture();
  ::dfstockpiles::StockpileSettings_FurnitureSet* temp = furniture_;
  furniture_ = NULL;
  return temp;
}

// optional int32 unknown1 = 4;
inline bool StockpileSettings::has_unknown1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockpileSettings::set_has_unknown1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockpileSettings::clear_has_unknown1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockpileSettings::clear_unknown1() {
  unknown1_ = 0;
  clear_has_unknown1();
}
inline ::google::protobuf::int32 StockpileSettings::unknown1() const {
  return unknown1_;
}
inline void StockpileSettings::set_unknown1(::google::protobuf::int32 value) {
  set_has_unknown1();
  unknown1_ = value;
}

// optional .dfstockpiles.StockpileSettings.RefuseSet refuse = 5;
inline bool StockpileSettings::has_refuse() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockpileSettings::set_has_refuse() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockpileSettings::clear_has_refuse() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockpileSettings::clear_refuse() {
  if (refuse_ != NULL) refuse_->::dfstockpiles::StockpileSettings_RefuseSet::Clear();
  clear_has_refuse();
}
inline const ::dfstockpiles::StockpileSettings_RefuseSet& StockpileSettings::refuse() const {
  return refuse_ != NULL ? *refuse_ : *default_instance_->refuse_;
}
inline ::dfstockpiles::StockpileSettings_RefuseSet* StockpileSettings::mutable_refuse() {
  set_has_refuse();
  if (refuse_ == NULL) refuse_ = new ::dfstockpiles::StockpileSettings_RefuseSet;
  return refuse_;
}
inline ::dfstockpiles::StockpileSettings_RefuseSet* StockpileSettings::release_refuse() {
  clear_has_refuse();
  ::dfstockpiles::StockpileSettings_RefuseSet* temp = refuse_;
  refuse_ = NULL;
  return temp;
}

// optional .dfstockpiles.StockpileSettings.StoneSet stone = 6;
inline bool StockpileSettings::has_stone() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockpileSettings::set_has_stone() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockpileSettings::clear_has_stone() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockpileSettings::clear_stone() {
  if (stone_ != NULL) stone_->::dfstockpiles::StockpileSettings_StoneSet::Clear();
  clear_has_stone();
}
inline const ::dfstockpiles::StockpileSettings_StoneSet& StockpileSettings::stone() const {
  return stone_ != NULL ? *stone_ : *default_instance_->stone_;
}
inline ::dfstockpiles::StockpileSettings_StoneSet* StockpileSettings::mutable_stone() {
  set_has_stone();
  if (stone_ == NULL) stone_ = new ::dfstockpiles::StockpileSettings_StoneSet;
  return stone_;
}
inline ::dfstockpiles::StockpileSettings_StoneSet* StockpileSettings::release_stone() {
  clear_has_stone();
  ::dfstockpiles::StockpileSettings_StoneSet* temp = stone_;
  stone_ = NULL;
  return temp;
}

// optional .dfstockpiles.StockpileSettings.OreSet ore = 7;
inline bool StockpileSettings::has_ore() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockpileSettings::set_has_ore() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockpileSettings::clear_has_ore() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockpileSettings::clear_ore() {
  if (ore_ != NULL) ore_->::dfstockpiles::StockpileSettings_OreSet::Clear();
  clear_has_ore();
}
inline const ::dfstockpiles::StockpileSettings_OreSet& StockpileSettings::ore() const {
  return ore_ != NULL ? *ore_ : *default_instance_->ore_;
}
inline ::dfstockpiles::StockpileSettings_OreSet* StockpileSettings::mutable_ore() {
  set_has_ore();
  if (ore_ == NULL) ore_ = new ::dfstockpiles::StockpileSettings_OreSet;
  return ore_;
}
inline ::dfstockpiles::StockpileSettings_OreSet* StockpileSettings::release_ore() {
  clear_has_ore();
  ::dfstockpiles::StockpileSettings_OreSet* temp = ore_;
  ore_ = NULL;
  return temp;
}

// optional .dfstockpiles.StockpileSettings.AmmoSet ammo = 8;
inline bool StockpileSettings::has_ammo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockpileSettings::set_has_ammo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockpileSettings::clear_has_ammo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockpileSettings::clear_ammo() {
  if (ammo_ != NULL) ammo_->::dfstockpiles::StockpileSettings_AmmoSet::Clear();
  clear_has_ammo();
}
inline const ::dfstockpiles::StockpileSettings_AmmoSet& StockpileSettings::ammo() const {
  return ammo_ != NULL ? *ammo_ : *default_instance_->ammo_;
}
inline ::dfstockpiles::StockpileSettings_AmmoSet* StockpileSettings::mutable_ammo() {
  set_has_ammo();
  if (ammo_ == NULL) ammo_ = new ::dfstockpiles::StockpileSettings_AmmoSet;
  return ammo_;
}
inline ::dfstockpiles::StockpileSettings_AmmoSet* StockpileSettings::release_ammo() {
  clear_has_ammo();
  ::dfstockpiles::StockpileSettings_AmmoSet* temp = ammo_;
  ammo_ = NULL;
  return temp;
}

// optional .dfstockpiles.StockpileSettings.CoinSet coin = 9;
inline bool StockpileSettings::has_coin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StockpileSettings::set_has_coin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StockpileSettings::clear_has_coin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StockpileSettings::clear_coin() {
  if (coin_ != NULL) coin_->::dfstockpiles::StockpileSettings_CoinSet::Clear();
  clear_has_coin();
}
inline const ::dfstockpiles::StockpileSettings_CoinSet& StockpileSettings::coin() const {
  return coin_ != NULL ? *coin_ : *default_instance_->coin_;
}
inline ::dfstockpiles::StockpileSettings_CoinSet* StockpileSettings::mutable_coin() {
  set_has_coin();
  if (coin_ == NULL) coin_ = new ::dfstockpiles::StockpileSettings_CoinSet;
  return coin_;
}
inline ::dfstockpiles::StockpileSettings_CoinSet* StockpileSettings::release_coin() {
  clear_has_coin();
  ::dfstockpiles::StockpileSettings_CoinSet* temp = coin_;
  coin_ = NULL;
  return temp;
}

// optional .dfstockpiles.StockpileSettings.BarsBlocksSet barsblocks = 10;
inline bool StockpileSettings::has_barsblocks() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StockpileSettings::set_has_barsblocks() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StockpileSettings::clear_has_barsblocks() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StockpileSettings::clear_barsblocks() {
  if (barsblocks_ != NULL) barsblocks_->::dfstockpiles::StockpileSettings_BarsBlocksSet::Clear();
  clear_has_barsblocks();
}
inline const ::dfstockpiles::StockpileSettings_BarsBlocksSet& StockpileSettings::barsblocks() const {
  return barsblocks_ != NULL ? *barsblocks_ : *default_instance_->barsblocks_;
}
inline ::dfstockpiles::StockpileSettings_BarsBlocksSet* StockpileSettings::mutable_barsblocks() {
  set_has_barsblocks();
  if (barsblocks_ == NULL) barsblocks_ = new ::dfstockpiles::StockpileSettings_BarsBlocksSet;
  return barsblocks_;
}
inline ::dfstockpiles::StockpileSettings_BarsBlocksSet* StockpileSettings::release_barsblocks() {
  clear_has_barsblocks();
  ::dfstockpiles::StockpileSettings_BarsBlocksSet* temp = barsblocks_;
  barsblocks_ = NULL;
  return temp;
}

// optional .dfstockpiles.StockpileSettings.GemsSet gems = 11;
inline bool StockpileSettings::has_gems() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StockpileSettings::set_has_gems() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StockpileSettings::clear_has_gems() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StockpileSettings::clear_gems() {
  if (gems_ != NULL) gems_->::dfstockpiles::StockpileSettings_GemsSet::Clear();
  clear_has_gems();
}
inline const ::dfstockpiles::StockpileSettings_GemsSet& StockpileSettings::gems() const {
  return gems_ != NULL ? *gems_ : *default_instance_->gems_;
}
inline ::dfstockpiles::StockpileSettings_GemsSet* StockpileSettings::mutable_gems() {
  set_has_gems();
  if (gems_ == NULL) gems_ = new ::dfstockpiles::StockpileSettings_GemsSet;
  return gems_;
}
inline ::dfstockpiles::StockpileSettings_GemsSet* StockpileSettings::release_gems() {
  clear_has_gems();
  ::dfstockpiles::StockpileSettings_GemsSet* temp = gems_;
  gems_ = NULL;
  return temp;
}

// optional .dfstockpiles.StockpileSettings.FinishedGoodsSet finished_goods = 12;
inline bool StockpileSettings::has_finished_goods() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StockpileSettings::set_has_finished_goods() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StockpileSettings::clear_has_finished_goods() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StockpileSettings::clear_finished_goods() {
  if (finished_goods_ != NULL) finished_goods_->::dfstockpiles::StockpileSettings_FinishedGoodsSet::Clear();
  clear_has_finished_goods();
}
inline const ::dfstockpiles::StockpileSettings_FinishedGoodsSet& StockpileSettings::finished_goods() const {
  return finished_goods_ != NULL ? *finished_goods_ : *default_instance_->finished_goods_;
}
inline ::dfstockpiles::StockpileSettings_FinishedGoodsSet* StockpileSettings::mutable_finished_goods() {
  set_has_finished_goods();
  if (finished_goods_ == NULL) finished_goods_ = new ::dfstockpiles::StockpileSettings_FinishedGoodsSet;
  return finished_goods_;
}
inline ::dfstockpiles::StockpileSettings_FinishedGoodsSet* StockpileSettings::release_finished_goods() {
  clear_has_finished_goods();
  ::dfstockpiles::StockpileSettings_FinishedGoodsSet* temp = finished_goods_;
  finished_goods_ = NULL;
  return temp;
}

// optional .dfstockpiles.StockpileSettings.LeatherSet leather = 13;
inline bool StockpileSettings::has_leather() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StockpileSettings::set_has_leather() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StockpileSettings::clear_has_leather() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StockpileSettings::clear_leather() {
  if (leather_ != NULL) leather_->::dfstockpiles::StockpileSettings_LeatherSet::Clear();
  clear_has_leather();
}
inline const ::dfstockpiles::StockpileSettings_LeatherSet& StockpileSettings::leather() const {
  return leather_ != NULL ? *leather_ : *default_instance_->leather_;
}
inline ::dfstockpiles::StockpileSettings_LeatherSet* StockpileSettings::mutable_leather() {
  set_has_leather();
  if (leather_ == NULL) leather_ = new ::dfstockpiles::StockpileSettings_LeatherSet;
  return leather_;
}
inline ::dfstockpiles::StockpileSettings_LeatherSet* StockpileSettings::release_leather() {
  clear_has_leather();
  ::dfstockpiles::StockpileSettings_LeatherSet* temp = leather_;
  leather_ = NULL;
  return temp;
}

// optional .dfstockpiles.StockpileSettings.ClothSet cloth = 14;
inline bool StockpileSettings::has_cloth() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void StockpileSettings::set_has_cloth() {
  _has_bits_[0] |= 0x00002000u;
}
inline void StockpileSettings::clear_has_cloth() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void StockpileSettings::clear_cloth() {
  if (cloth_ != NULL) cloth_->::dfstockpiles::StockpileSettings_ClothSet::Clear();
  clear_has_cloth();
}
inline const ::dfstockpiles::StockpileSettings_ClothSet& StockpileSettings::cloth() const {
  return cloth_ != NULL ? *cloth_ : *default_instance_->cloth_;
}
inline ::dfstockpiles::StockpileSettings_ClothSet* StockpileSettings::mutable_cloth() {
  set_has_cloth();
  if (cloth_ == NULL) cloth_ = new ::dfstockpiles::StockpileSettings_ClothSet;
  return cloth_;
}
inline ::dfstockpiles::StockpileSettings_ClothSet* StockpileSettings::release_cloth() {
  clear_has_cloth();
  ::dfstockpiles::StockpileSettings_ClothSet* temp = cloth_;
  cloth_ = NULL;
  return temp;
}

// optional .dfstockpiles.StockpileSettings.WoodSet wood = 15;
inline bool StockpileSettings::has_wood() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void StockpileSettings::set_has_wood() {
  _has_bits_[0] |= 0x00004000u;
}
inline void StockpileSettings::clear_has_wood() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void StockpileSettings::clear_wood() {
  if (wood_ != NULL) wood_->::dfstockpiles::StockpileSettings_WoodSet::Clear();
  clear_has_wood();
}
inline const ::dfstockpiles::StockpileSettings_WoodSet& StockpileSettings::wood() const {
  return wood_ != NULL ? *wood_ : *default_instance_->wood_;
}
inline ::dfstockpiles::StockpileSettings_WoodSet* StockpileSettings::mutable_wood() {
  set_has_wood();
  if (wood_ == NULL) wood_ = new ::dfstockpiles::StockpileSettings_WoodSet;
  return wood_;
}
inline ::dfstockpiles::StockpileSettings_WoodSet* StockpileSettings::release_wood() {
  clear_has_wood();
  ::dfstockpiles::StockpileSettings_WoodSet* temp = wood_;
  wood_ = NULL;
  return temp;
}

// optional .dfstockpiles.StockpileSettings.WeaponsSet weapons = 16;
inline bool StockpileSettings::has_weapons() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void StockpileSettings::set_has_weapons() {
  _has_bits_[0] |= 0x00008000u;
}
inline void StockpileSettings::clear_has_weapons() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void StockpileSettings::clear_weapons() {
  if (weapons_ != NULL) weapons_->::dfstockpiles::StockpileSettings_WeaponsSet::Clear();
  clear_has_weapons();
}
inline const ::dfstockpiles::StockpileSettings_WeaponsSet& StockpileSettings::weapons() const {
  return weapons_ != NULL ? *weapons_ : *default_instance_->weapons_;
}
inline ::dfstockpiles::StockpileSettings_WeaponsSet* StockpileSettings::mutable_weapons() {
  set_has_weapons();
  if (weapons_ == NULL) weapons_ = new ::dfstockpiles::StockpileSettings_WeaponsSet;
  return weapons_;
}
inline ::dfstockpiles::StockpileSettings_WeaponsSet* StockpileSettings::release_weapons() {
  clear_has_weapons();
  ::dfstockpiles::StockpileSettings_WeaponsSet* temp = weapons_;
  weapons_ = NULL;
  return temp;
}

// optional .dfstockpiles.StockpileSettings.ArmorSet armor = 17;
inline bool StockpileSettings::has_armor() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void StockpileSettings::set_has_armor() {
  _has_bits_[0] |= 0x00010000u;
}
inline void StockpileSettings::clear_has_armor() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void StockpileSettings::clear_armor() {
  if (armor_ != NULL) armor_->::dfstockpiles::StockpileSettings_ArmorSet::Clear();
  clear_has_armor();
}
inline const ::dfstockpiles::StockpileSettings_ArmorSet& StockpileSettings::armor() const {
  return armor_ != NULL ? *armor_ : *default_instance_->armor_;
}
inline ::dfstockpiles::StockpileSettings_ArmorSet* StockpileSettings::mutable_armor() {
  set_has_armor();
  if (armor_ == NULL) armor_ = new ::dfstockpiles::StockpileSettings_ArmorSet;
  return armor_;
}
inline ::dfstockpiles::StockpileSettings_ArmorSet* StockpileSettings::release_armor() {
  clear_has_armor();
  ::dfstockpiles::StockpileSettings_ArmorSet* temp = armor_;
  armor_ = NULL;
  return temp;
}

// optional bool allow_organic = 18;
inline bool StockpileSettings::has_allow_organic() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void StockpileSettings::set_has_allow_organic() {
  _has_bits_[0] |= 0x00020000u;
}
inline void StockpileSettings::clear_has_allow_organic() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void StockpileSettings::clear_allow_organic() {
  allow_organic_ = false;
  clear_has_allow_organic();
}
inline bool StockpileSettings::allow_organic() const {
  return allow_organic_;
}
inline void StockpileSettings::set_allow_organic(bool value) {
  set_has_allow_organic();
  allow_organic_ = value;
}

// optional bool allow_inorganic = 19;
inline bool StockpileSettings::has_allow_inorganic() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void StockpileSettings::set_has_allow_inorganic() {
  _has_bits_[0] |= 0x00040000u;
}
inline void StockpileSettings::clear_has_allow_inorganic() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void StockpileSettings::clear_allow_inorganic() {
  allow_inorganic_ = false;
  clear_has_allow_inorganic();
}
inline bool StockpileSettings::allow_inorganic() const {
  return allow_inorganic_;
}
inline void StockpileSettings::set_allow_inorganic(bool value) {
  set_has_allow_inorganic();
  allow_inorganic_ = value;
}

// optional bool corpses = 24;
inline bool StockpileSettings::has_corpses() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void StockpileSettings::set_has_corpses() {
  _has_bits_[0] |= 0x00080000u;
}
inline void StockpileSettings::clear_has_corpses() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void StockpileSettings::clear_corpses() {
  corpses_ = false;
  clear_has_corpses();
}
inline bool StockpileSettings::corpses() const {
  return corpses_;
}
inline void StockpileSettings::set_corpses(bool value) {
  set_has_corpses();
  corpses_ = value;
}

// optional int32 max_barrels = 20;
inline bool StockpileSettings::has_max_barrels() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void StockpileSettings::set_has_max_barrels() {
  _has_bits_[0] |= 0x00100000u;
}
inline void StockpileSettings::clear_has_max_barrels() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void StockpileSettings::clear_max_barrels() {
  max_barrels_ = 0;
  clear_has_max_barrels();
}
inline ::google::protobuf::int32 StockpileSettings::max_barrels() const {
  return max_barrels_;
}
inline void StockpileSettings::set_max_barrels(::google::protobuf::int32 value) {
  set_has_max_barrels();
  max_barrels_ = value;
}

// optional int32 max_bins = 21;
inline bool StockpileSettings::has_max_bins() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void StockpileSettings::set_has_max_bins() {
  _has_bits_[0] |= 0x00200000u;
}
inline void StockpileSettings::clear_has_max_bins() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void StockpileSettings::clear_max_bins() {
  max_bins_ = 0;
  clear_has_max_bins();
}
inline ::google::protobuf::int32 StockpileSettings::max_bins() const {
  return max_bins_;
}
inline void StockpileSettings::set_max_bins(::google::protobuf::int32 value) {
  set_has_max_bins();
  max_bins_ = value;
}

// optional int32 max_wheelbarrows = 22;
inline bool StockpileSettings::has_max_wheelbarrows() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void StockpileSettings::set_has_max_wheelbarrows() {
  _has_bits_[0] |= 0x00400000u;
}
inline void StockpileSettings::clear_has_max_wheelbarrows() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void StockpileSettings::clear_max_wheelbarrows() {
  max_wheelbarrows_ = 0;
  clear_has_max_wheelbarrows();
}
inline ::google::protobuf::int32 StockpileSettings::max_wheelbarrows() const {
  return max_wheelbarrows_;
}
inline void StockpileSettings::set_max_wheelbarrows(::google::protobuf::int32 value) {
  set_has_max_wheelbarrows();
  max_wheelbarrows_ = value;
}

// optional bool use_links_only = 23;
inline bool StockpileSettings::has_use_links_only() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void StockpileSettings::set_has_use_links_only() {
  _has_bits_[0] |= 0x00800000u;
}
inline void StockpileSettings::clear_has_use_links_only() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void StockpileSettings::clear_use_links_only() {
  use_links_only_ = false;
  clear_has_use_links_only();
}
inline bool StockpileSettings::use_links_only() const {
  return use_links_only_;
}
inline void StockpileSettings::set_use_links_only(bool value) {
  set_has_use_links_only();
  use_links_only_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dfstockpiles

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_stockpiles_2eproto__INCLUDED
