{"version":1,"ops":[{"type":1,"author":{"id":"be523fe0f95fc478bda36c722e6f106f8f7a41b5"},"timestamp":1422222716,"metadata":{"github-id":"MDU6SXNzdWU1NTQzMTg0OQ==","github-url":"https://github.com/DFHack/dfhack/issues/503","origin":"github"},"title":"Lua scripts as Modules","message":"I will paraphrase an idea @warmist suggested on the irc channel as I understand it.\n\nThere are cases where scripts provide functionality that would be useful to other scripts. The current standard way to do this is to use dfhack.run_script and pass arguments as strings. This is a little clunky at best and each script can effectively only provide one function to scripts that use it.\n\nAlternatively, you can export all useful functionality to an lua module in library/lua and defer to that in the script. This works, but it requires separating functionality across two different files. See repeat.lua and repeat-util.lua for an example of this method.\n\nIt would be nice if we could use scripts as modules and have them export useful functions to dependent scripts and also be executable from the console. That way a script with externally useful functionality can be one self-contained file instead of a console interface script and a separate lua module.\n\nOne issue that will come up is that when a script is executed it will need to know whether it is being run as a result of require('blah.lua') (in which case it needs to not print anything) or whether it is being run as a result of run_script or a console command, in which case it may need to print output. There are a few possibilities but I don't know what the right answer is yet.\n\nAs scripts become more powerful and diverse the importance of this issue will slowly increase but for now it is not urgent.","files":null}]}