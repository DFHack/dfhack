{"version":1,"ops":[{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1498828474,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxMjI2MzkxMw==","github-url":"https://github.com/DFHack/dfhack/issues/1123#issuecomment-312263913"},"message":"The prompt color is weird. I haven't seen the prompt change color before, although I haven't tested it on Windows.\nHere's the result of running y(), then z():\n![image](https://user-images.githubusercontent.com/3719547/27736910-271a383a-5d74-11e7-87cf-693b301891db.png)\n\nAs for z() followed by y(), that looks intentional - when printerr() returns, it's supposed to restore the color of the console before it was called, not reset the color. See [here](https://github.com/DFHack/dfhack/blob/7b3efeafc9d8a8b6856a826755473236321958dc/library/ColorText.cpp#L126).","files":null},{"type":3,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1498830750,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxMjI3MjgyNw==","github-url":"https://github.com/DFHack/dfhack/issues/1123#issuecomment-312272827"},"message":"Sloppy reporting on my part. I should have mentioned that I'm using Windows 10.1 (and I'm also behind on DFHack, at alpha-2, 32 bit).\n\nWell, the second result isn't what I would have expected, but testing it shows that this is the way it works without prior corruption as well.\n\nHowever, I would have expected the DFHack prompt invocation to provide each script with a \"standard environment\" where e.g. the color setting for the next script would be returned to the standard one as part of the invoker's finalization regardless of how sloppy the previous script was.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1498831366,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxMjI3NTQ3MQ==","github-url":"https://github.com/DFHack/dfhack/issues/1123#issuecomment-312275471"},"message":"I suppose it could reset the color when invoking a command. That wouldn't help with some timeouts and other things, but it could avoid some issues.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1498831885,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxMjI3NzY3NQ==","github-url":"https://github.com/DFHack/dfhack/issues/1123#issuecomment-312277675"},"message":"It does look like printerr() is resetting the color correctly when it wasn't set before (i.e. it's calling color(COLOR_RESET) instead of color(COLOR_WHITE) or something like that). My guess is that the colored prompt has something to do with the Windows console. Essentially, these two are the same, as long as the console wasn't colored before:\n```lua\ndfhack.printerr(\"foo\")\n-- and\nprev = dfhack.color(COLOR_LIGHTRED)\nprint(\"foo\")\ndfhack.color(prev)\n```","files":null},{"type":3,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1498833801,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxMjI4NjA1OA==","github-url":"https://github.com/DFHack/dfhack/issues/1123#issuecomment-312286058"},"message":"I agree it's probably not the printerr that's the culprit, but rather the console/script interaction. Since one script can influence a subsequent one with the prompt in between being unaffected (normally) there ought to be two color settings in operation in parallel: one for the console and one for scripts. The DFHack console competes with the error output (a lot of DFHack console prompts flashing by to be replaced by the next error output and a new prompt could be seen when using errors generation during rendering, but the script above writes too fast for me to see anything), so the DFHack console probably triggers the writing of a new prompt as soon as a script output action is finished, the next script output action then overwrites the prompt and triggers the display of a new prompt. However, if the console thread is sluggish the next script thread output may appear before the console one is finished, possibly resulting in the console color command to being written to the wrong pen state object (because the critical region isn't protected properly). Since it appears to happen on Windows only, it can be a bug in the console itself, or it can be Windows specific integration code (or something present for other OS' as well, but happening too infrequently to be detected due to OS timing).\nA lot of speculation...","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1498834127,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxMjI4NzU2MA==","github-url":"https://github.com/DFHack/dfhack/issues/1123#issuecomment-312287560"},"message":"\u003e there ought to be two color settings in operation in parallel: one for the console and one for scripts.\n\nWhat? Don't (most) scripts use the console? Any that don't wouldn't meaningfully be able to set output colors in any case.\n\nI haven't looked into the console code much, especially on Windows, and it's pretty ancient. However, there's really just a single variable keeping track of what color the console output currently is. The actual color is supposed to get reset for prompts, as I understand it (I *think* color_ostream handles calls to dfhack.color(), which then get fed to the console, and the console then handles resetting the color for the prompt itself, but I could be wrong about that).\n\nDo you see the same issue if you build a 1000+-line message, then use dfhack.printerr() to send it to the console all at once?","files":null},{"type":3,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1498834923,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxMjI5MTU5Mg==","github-url":"https://github.com/DFHack/dfhack/issues/1123#issuecomment-312291592"},"message":"If script 1 sets the color to blue prints something and finishes, and the DFHack console prints a white prompt, while script 2's output becomes blue again without any color definition in the script there must be two color settings at play. So what I meant with one color for the console, I meant for the console's own output (the prompt). I know the console has another one as well, since if you try to execute garbage you get it in red. Of course, both the prompt and the error message outputs can be hard coded with what I called the script one being cashed while the console performs its own output, but then it shouldn't be possible to corrupt the prompt.\nI'll be back with an update when I've tried 1000 line barfs.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1498835318,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxMjI5MzI1MA==","github-url":"https://github.com/DFHack/dfhack/issues/1123#issuecomment-312293250"},"message":"\u003e there must be two color settings at play\n\nWhat I was saying is that the console resets the color for the prompt. It also changes its color whenever it's told to by the color_ostream that controls it. As far as I know, there is only one color setting, which is held in the color_ostream instance. The color_ostream feeds each chunk of text to the console along with its color.\n\nAnyway, it looks like the console resets its color every time before redisplaying the prompt on all platforms, so I'm not sure what's going on here. Maybe try something shorter too, if you can (say 500 lines, or a large number that's small enough that you can scroll back all the way to the command you ran).","files":null},{"type":3,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1498837076,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxMjMwMDc2Mw==","github-url":"https://github.com/DFHack/dfhack/issues/1123#issuecomment-312300763"},"message":"Yes, it did corrupt the prompt, which I wouldn't have expected.\n`function Blue ()\n  local l = \"A junk line\\n\"\n\n  for i = 0, 12 do\n    l = l .. l\n  end\n  \n  dfhack.printerr (l)\nend\n\nBlue ()`\n\n(The name is selected to confuse the enemy..) This script resulted in a whole bunch of \"A junk line\" lines followed by a blank line and the DFHack prompt in corrupted red. I've only run it one. Hitting return on the console can result in the prompt returning to the normal color, but running z causes both the output and the prompt to turn blue. Hitting return once cause the prompt to return to normal again, another return resulted in a second normal prompt, but executing z again resulted in a blue prompt and hitting return again there resulted in the DFHack error message in blue followed by a normal prompt.\nSomehow, there is a corruption happening that causes subsequent prompts to take on whatever color the script sets, but this color can be reset temporarily by hitting return again.\n\nI changed the script above to iterate from 2 to 8. I than ran it without problems a few times (3-4? without starting a fresh console in between) and then finally got a corruption. Scrolling up showed that the prompt above was still the standard color, which I guess is what you wanted that test to check?\n\nI did get a new idea: I output 1000 lines of \"A junk line\\n\" using dfhack.println () and then ran a script that simply produced a single dfhack.printerr line, and the prompt turned red. This indicates you can get entanglement corruption just from normal output, without specifying any colors at all. When you do specify the color the entanglement manifests itself.","files":null},{"type":3,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1498837722,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxMjMwMzU1Ng==","github-url":"https://github.com/DFHack/dfhack/issues/1123#issuecomment-312303556"},"message":"Another minor experiment: Changing the script that output a single error line to follow that line with a dfhack.prinln() one caused the color to return to normal (but the corruption is still present, waiting for an opportunity to show itself). This indicates that the color restoration done by printerr doesn't get effected unless there is another line of output (as in my code you commented upon where I did this manually just because of this failure of a change to take effect).\n\nEdit: A really strange result:\n`function err ()\n  dfhack.printerr (\"Error line\")\n  dfhack.print (bar)\nend\n\nerr ()\n` \nrun when the corruption was visible (red prompt):\n\"Error line\" in red followed by:\n\"[DFHack]#\" where the 3 first characters where white and the others red!\n\nEdit 2: Correcting the code by adding quotes around bar and adding a character ('barz') resulted in a not unexpected 4 white characters followed by red ones in the prompt.\n\nEdit 3: Trying the above modified by adding dfhack.color (COLOR_YELLOW) in a fresh console\nresulted in the prompt getting 4 yellow characters followed by the rest in standard white.\n\nAnd getting a script to print \"barzoom\" without newline or color designation in this state caused 7 yellow prompt characters followed by two white ones.","files":null},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1498842058,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDExNDYzMTgxNTU="},"added":["bug"],"removed":[]},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1498842058,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDExNDYzMTgxNTY="},"added":["internal"],"removed":[]},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1498842712,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxMjMyMzE3NQ==","github-url":"https://github.com/DFHack/dfhack/issues/1124#issuecomment-312323175"},"message":"A string dump of Win64 0.43.05 contains these strings:\n```\n/stdout.txt\n/stderr.txt\n```\nIt would probably be possible to call freopen() again in Core::Init(), since DF appears to be opening these files before Core::Init() is called.","files":null},{"type":4,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1498946644,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTE0NzA2NzgxNQ=="},"status":2},{"type":3,"author":{"id":"be523fe0f95fc478bda36c722e6f106f8f7a41b5"},"timestamp":1498956980,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxMjQ2NDEyMA==","github-url":"https://github.com/DFHack/dfhack/issues/1124#issuecomment-312464120"},"message":"I had always assumed this was intended behavior, so that logging could be done without spamming the console. I don't have a strong opinion on it either way.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1498959042,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxMjQ2NTEwNg==","github-url":"https://github.com/DFHack/dfhack/issues/1124#issuecomment-312465106"},"message":"This is separate from the console. DFHack is logging to *.log files, and DF logs to *.txt files on Windows by default (which may be new). It looks like I forgot to update the issue to mention that, sorry.","files":null},{"type":3,"author":{"id":"be523fe0f95fc478bda36c722e6f106f8f7a41b5"},"timestamp":1498959136,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxMjQ2NTE0NQ==","github-url":"https://github.com/DFHack/dfhack/issues/1124#issuecomment-312465145"},"message":"Oh, I see now. Thanks for clarifying.","files":null},{"type":2,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1499017367,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50MTE0NzI4NTgxOA=="},"title":"Most of DFHack's stderr gets sent to \"stderr.txt\" on Windows instead of \"stderr.log\"","was":"The DFHack console can get its colors confused."},{"type":3,"author":{"id":"0541b7dd92e4d9285c31215454cda686ef6b8a4e"},"timestamp":1500025841,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxNTMxOTgxNg==","github-url":"https://github.com/DFHack/dfhack/issues/1124#issuecomment-315319816"},"message":"DF logs to stderr.txt on Windows because there's no \"console\" for vanilla DF on windows; it runs as a pure GUI app. Without the redirects, there'd be no log _at all_.\n\nRedirecting the logs might make it \"hard\" to submit the logs when reporting a DF bug, but since Toady is not obliged to accept bug reports from reporters who are running DFHack anyway, that's a moot point, and having them redirected to the DFHack log might make taking those bug reports via DFHack easier.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1500033461,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxNTM0MjMwNw==","github-url":"https://github.com/DFHack/dfhack/issues/1124#issuecomment-315342307"},"message":"Right, that's probably why Toady added it. However, it was added fairly recently (between 0.40.24 and 0.43.05, probably on the newer end, since I don't remember reports of stderr.txt containing DFHack stuff before 0.43.05), and before that, DFHack always logged to stderr.log. I also added messages to the txt files before switching to the log files in that commit, which should hopefully make it obvious if someone does send Toady one.","files":null},{"type":3,"author":{"id":"0541b7dd92e4d9285c31215454cda686ef6b8a4e"},"timestamp":1500051292,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxNTQxMDE5Mw==","github-url":"https://github.com/DFHack/dfhack/issues/1124#issuecomment-315410193"},"message":"I doubt Toady explicitly \"decided\" to do this; rather, it's an optional behavior of SDL on Windows, and presumably Toady changed SDL options (intentionally or not) when he migrated to VS2015.\n\nSee http://sdl.beuc.net/sdl.wiki/FAQ_Console for more on where stdout.txt and stderr.txt come from.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1500051818,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxNTQxMjI1Ng==","github-url":"https://github.com/DFHack/dfhack/issues/1124#issuecomment-315412256"},"message":"Oh, that would make sense. It looks like that's controlled by the `NO_STDIO_REDIRECT` flag in main/win32/SDL_win32_main.c in SDL (1.2.15). I thought Toady added it for diagnostics, but he could have just removed that flag unintentionally. (The behavior changed in *both* builds of 0.43.05, so it's probably from when he recompiled SDL.)","files":null},{"type":3,"author":{"id":"fefd87bd170e69ba989c5932b26d53a6f30e8666"},"timestamp":1500136334,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxNTU0NTYxOA==","github-url":"https://github.com/DFHack/dfhack/issues/1124#issuecomment-315545618"},"message":"Since we replace SDL completely on Windows, can we compile a version that doesn't redirect stdio and distribute that as SDLReal instead of the version Toady distributes?","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1500136590,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxNTU0NTg3Ng==","github-url":"https://github.com/DFHack/dfhack/issues/1124#issuecomment-315545876"},"message":"Sure, but that would be extra effort for something that's mostly fixed. (It's still possible for some of DF's output to get sent to the *.txt files, but that typically isn't something we care about).","files":null}]}