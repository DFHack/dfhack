{"version":1,"ops":[{"type":3,"author":{"id":"4f2823b111a40d19603a11dc9e0f3c589bea0f03"},"timestamp":1310423384,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NTA1NDk=","github-url":"https://github.com/DFHack/dfhack/issues/94#issuecomment-1550549"},"message":"This is not a good idea. A vector isn't t_vecTriplet. t_vecTriplet is a commonly used structure, but depending on platform, it can be placed anywhere in the actual STL vector object. For quite a while, DF on Windows used an old version of MSVC, where the triplet started at vector + 8. Now it's vector + 4 I think.\n\nWhy it crashes is a mystery to me. I'd have to poke around and see what happens I guess.\n\nAnyway, I'm mostly working on the dfapi branch. If you want to really add new things to DFHack, it should be done there. I'll be branching master into some kind of support branch in case people find bugs that need fixing, and to support the existing tools until they are ported to the new DFHack. Then, dfapi will be merged into master.\n\nIn the dfapi branch, you'd do something like this:\n`std::vector\u003cstd::vector\u003ct_like *\u003e \u003e *likes = (/*some cast here*/) 0x123456; // some address, better be the real one`\nAnd then just use it like if it was a real vector pointer.","files":null},{"type":3,"author":{"id":"4f2823b111a40d19603a11dc9e0f3c589bea0f03"},"timestamp":1310470699,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NTM1OTg=","github-url":"https://github.com/DFHack/dfhack/issues/94#issuecomment-1553598"},"message":"Oh, one more thing. There's an IRC channel for dfhack on freenode - #dfhack\nStop by some time :)","files":null},{"type":3,"author":{"id":"41007559e74fa0638bf8bfc0dd1caa1fcff75fb0"},"timestamp":1310548403,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NjEyNDE=","github-url":"https://github.com/DFHack/dfhack/issues/94#issuecomment-1561241"},"message":"The Dwarf Therapist folks already figured out how to read the likes data.  Argh, it's horrible.  The Therapist code can be seen here: http://www.google.com/codesearch#lLracqvy1TQ/src/dwarf.cpp\u0026q=likes%20package:http://dwarftherapist%5C.googlecode%5C.com\u0026ct=rc\u0026cd=2\u0026l=840","files":null},{"type":4,"author":{"id":"41007559e74fa0638bf8bfc0dd1caa1fcff75fb0"},"timestamp":1310548403,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTc1NTg4MA=="},"status":2},{"type":4,"author":{"id":"41007559e74fa0638bf8bfc0dd1caa1fcff75fb0"},"timestamp":1310548417,"metadata":{"github-id":"MDEzOlJlb3BlbmVkRXZlbnQxNzU1ODgy"},"status":1},{"type":3,"author":{"id":"4f2823b111a40d19603a11dc9e0f3c589bea0f03"},"timestamp":1310555978,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NjE5MTQ=","github-url":"https://github.com/DFHack/dfhack/issues/94#issuecomment-1561914"},"message":"They talk about directly calling the function. It's certainly something worth trying, although it won't result in structured data you can easily use for sorting for example...\n\nEDIT: This cached code is ancient. It might be inaccurate.","files":null},{"type":3,"author":{"id":"5221f59e75ea9db114593bbdfb180b7354aef9ed"},"timestamp":1341937637,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY4ODA3MDI=","github-url":"https://github.com/DFHack/dfhack/issues/94#issuecomment-6880702"},"message":"The actual structure of unit preference data has been fully documented in df-structures, so supporting this is now trivial.","files":null},{"type":4,"author":{"id":"4f2823b111a40d19603a11dc9e0f3c589bea0f03"},"timestamp":1342053914,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTk5Mjk2NDI="},"status":2},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1423176853,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDIzMTEzMDYxOA=="},"added":["structures"],"removed":[]}]}