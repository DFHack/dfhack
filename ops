{"version":1,"ops":[{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1534472848,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxMzczOTIzMw==","github-url":"https://github.com/DFHack/dfhack/issues/1396#issuecomment-413739233"},"message":"The file exists in your local copy, right? Have you tried re-running CMake? If neither of those address the issue, the exact compiler command for RemoteClient.cpp would help (run `make VERBOSE=1` or `ninja -v`).","files":null},{"type":3,"author":{"id":"34fcf18192ac8b8a77f4ce499e48b2944baa9cfd"},"timestamp":1534486093,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxMzc2NzM0MA==","github-url":"https://github.com/DFHack/dfhack/issues/1396#issuecomment-413767340"},"message":"This comes from a fresh run of cmake, since I had accidentally cleared out my build directory when updating the repository. Here's the precise command:\n\n`\ncd /mnt/d2/repos/git/dfhack/BUILD/library \u0026\u0026 /usr/bin/c++  -DBUILD_DFHACK_LIB -DDFHACK64 -DHAVE_CUCHAR -DLINUX_BUILD -DLUA_BUILD_AS_DLL -DPROTOBUF_USE_DLLS -D_GLIBCXX_USE_C99 -D_GLIBCXX_USE_CXX11_ABI=0 -D_LINUX -Ddfhack_EXPORTS -I/mnt/d2/repos/git/dfhack/depends/protobuf -I/mnt/d2/repos/git/dfhack/depends/lua/include -I/mnt/d2/repos/git/dfhack/depends/md5 -I/mnt/d2/repos/git/dfhack/depends/tthread -I/mnt/d2/repos/git/dfhack/depends/clsocket/src -I/mnt/d2/repos/git/dfhack/library/proto -I/mnt/d2/repos/git/dfhack/library/include  -fvisibility=hidden -mtune=generic -m64 -mno-avx -O3 -DNDEBUG -fPIC   -include Export.h -std=c++11 -o CMakeFiles/dfhack.dir/RemoteClient.cpp.o -c /mnt/d2/repos/git/dfhack/library/RemoteClient.cpp\n`","files":null},{"type":3,"author":{"id":"34fcf18192ac8b8a77f4ce499e48b2944baa9cfd"},"timestamp":1534510251,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxMzg1NTM1Mw==","github-url":"https://github.com/DFHack/dfhack/issues/1396#issuecomment-413855353"},"message":"It turns out commit 2b79b4cce74a4e5ad728b9cd4d0d8042ef86ec05 may be to blame. When jsoncpp was changed to be a submodule, an include line in the top-level `CMakeLists.txt` was removed without being replaced. Adding it back in, modified for the change to submodule, allows dfhack to compile.\n\nHere is the diff output for the change I made:\n\n````\ndiff --git a/CMakeLists.txt b/CMakeLists.txt\nindex e05e5cf2..d618543d 100644\n--- a/CMakeLists.txt\n+++ b/CMakeLists.txt\n@@ -370,6 +370,7 @@ find_package(ZLIB REQUIRED)\n include_directories(depends/protobuf)\n include_directories(depends/lua/include)\n include_directories(depends/md5)\n+include_directories(depends/jsoncpp-sub/include)\n \n # Support linking against external tinyxml\n # If we find an external tinyxml, set the DFHACK_TINYXML variable to \"tinyxml\"\n\n````","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1534513167,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxMzg2OTE3Mg==","github-url":"https://github.com/DFHack/dfhack/issues/1396#issuecomment-413869172"},"message":"I'm pretty sure that was removed intentionally, and at any rate, it's worked on Travis, Buildmaster, and for (most) individuals building it since then. What CMake version are you using?","files":null},{"type":3,"author":{"id":"34fcf18192ac8b8a77f4ce499e48b2944baa9cfd"},"timestamp":1534537093,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxMzk3NzQ0NQ==","github-url":"https://github.com/DFHack/dfhack/issues/1396#issuecomment-413977445"},"message":"I currently have cmake 3.12.1 and I'm on gentoo. Interestingly, just in case it's relevant, the cmake package in portage has a `system-jsoncpp` USE flag, which in my case is enabled. I also have jsoncpp 1.8.4 installed via portage.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1534539511,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxMzk4NjUzMA==","github-url":"https://github.com/DFHack/dfhack/issues/1396#issuecomment-413986530"},"message":"Try not using your system jsoncpp, then","files":null},{"type":3,"author":{"id":"34fcf18192ac8b8a77f4ce499e48b2944baa9cfd"},"timestamp":1534544891,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxMzk5MDQzNA==","github-url":"https://github.com/DFHack/dfhack/issues/1396#issuecomment-413990434"},"message":"I'm confused as to how that would affect things, though. That useflag just means that the compilation of cmake doesn't use the jsoncpp that's bundled with cmake's source. I'd be willing to try recompiling cmake with its bundled jsoncpp, but I don't see how that would affect a project using cmake.","files":null},{"type":6,"author":{"id":"34fcf18192ac8b8a77f4ce499e48b2944baa9cfd"},"timestamp":1534544891,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDEyMDYzMDQ0NA=="},"target":"b63ca5793171434b63efabd7fa59035109919534b901fdf5b12dd05fb4e394b2","message":"I'm confused as to how that would affect things, though. That useflag just means that the compilation of cmake doesn't use the jsoncpp that's bundled with cmake's source. I'd be willing to try recompiling cmake with its bundled jsoncpp, but I don't see how that would affect a project using cmake.\n\nEdit: it turns out that having cmake use its bundled jsoncpp somehow, **somehow**, allows the compilation to work. Here is the same command now:\n\n`\ncd /mnt/d2/repos/git/dfhack/BUILD/library \u0026\u0026 /usr/bin/c++  -DBUILD_DFHACK_LIB -DDFHACK64 -DHAVE_CUCHAR -DLINUX_BUILD -DLUA_BUILD_AS_DLL -DPROTOBUF_USE_DLLS -D_GLIBCXX_USE_C99 -D_GLIBCXX_USE_CXX11_ABI=0 -D_LINUX -Ddfhack_EXPORTS -I/mnt/d2/repos/git/dfhack/depends/protobuf -I/mnt/d2/repos/git/dfhack/depends/lua/include -I/mnt/d2/repos/git/dfhack/depends/md5 -I/mnt/d2/repos/git/dfhack/depends/tthread -I/mnt/d2/repos/git/dfhack/depends/clsocket/src -I/mnt/d2/repos/git/dfhack/library/proto -I/mnt/d2/repos/git/dfhack/library/include -I/mnt/d2/repos/git/dfhack/depends/jsoncpp-sub/src/lib_json/../../include  -fvisibility=hidden -mtune=generic -m64 -mno-avx -O3 -DNDEBUG -fPIC   -include Export.h -std=c++11 -o CMakeFiles/dfhack.dir/RemoteClient.cpp.o -c /mnt/d2/repos/git/dfhack/library/RemoteClient.cpp\n`\n\nI'll revert my cmake to using the system's jsoncpp again, just in case this is being really weird and it just works now. But barring that, it seems there's a problem in dfhack where it won't add in the proper `-I` option when cmake doesn't compile with its bundled jsoncpp. The change I had made to `CMakeLists.txt` would of course work, but right now I feel like that's just a workaround. I'll try poking around some more to see how to make dfhack not require cmake to be compiled in a specific way.","files":null},{"type":3,"author":{"id":"34fcf18192ac8b8a77f4ce499e48b2944baa9cfd"},"timestamp":1534592459,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxNDA1MjEwNA==","github-url":"https://github.com/DFHack/dfhack/issues/1396#issuecomment-414052104"},"message":"Well then, apparently it just works now, even with the system-jsoncpp version of cmake. Even going for a new, clean build directory won't trigger the compilation error anymore. I'll close this bug and hope it never comes back.","files":null},{"type":4,"author":{"id":"34fcf18192ac8b8a77f4ce499e48b2944baa9cfd"},"timestamp":1534592459,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTc5NTk0OTUyMg=="},"status":2},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1546391872,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDIwNDk2NTk2MzU="},"added":["build"],"removed":[]}]}