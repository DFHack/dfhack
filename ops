{"version":1,"ops":[{"type":3,"author":{"id":"2db698130da1786957d2ab8d36b79f746d91090a"},"timestamp":1573079260,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1MDUyOTY5OA==","github-url":"https://github.com/DFHack/dfhack/issues/1466#issuecomment-550529698"},"message":"For some context, this came up while experimenting with running DF within a rootless podman container.","files":null},{"type":3,"author":{"id":"2db698130da1786957d2ab8d36b79f746d91090a"},"timestamp":1573079829,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1MDUzMjgwNQ==","github-url":"https://github.com/DFHack/dfhack/issues/1466#issuecomment-550532805"},"message":"Ah, I see. This is being done to disable address space randomization and you can't seem to run setarch at all without specifying a personality.\n\nIn this case, `setarch linux64 -R` works, where `x86_64` fails. I can't think of any reason not to use linux64 over x64_64. That might be a suitable fix?","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1573081135,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1MDUzMjk5OQ==","github-url":"https://github.com/DFHack/dfhack/issues/1466#issuecomment-550532999"},"message":"We don't just put random commands in the launcher script for fun. It looks like `setarch` was introduced in https://github.com/DFHack/dfhack/commit/c423bb6e8858559d044f21fb412dabe09ffbe35c for the purposes of disabling ASLR, which is extremely important, since DFHack on non-Windows can't handle ASLR.","files":null},{"type":6,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1573081135,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwNTAwMDEzNQ=="},"target":"0ca004d900ceeba49481c951a57cc058c219078ab2c24c52a49c365249f4456e","message":"~We don't just put random commands in the launcher script for fun.~ It looks like `setarch` was introduced in https://github.com/DFHack/dfhack/commit/c423bb6e8858559d044f21fb412dabe09ffbe35c for the purposes of disabling ASLR, which is extremely important, since DFHack on non-Windows can't handle ASLR.","files":null},{"type":3,"author":{"id":"2db698130da1786957d2ab8d36b79f746d91090a"},"timestamp":1573079994,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1MDUzMzQ0OA==","github-url":"https://github.com/DFHack/dfhack/issues/1466#issuecomment-550533448"},"message":"Please excuse my tone, I wasn't intending to imply it was done for giggles.\n\nAlso note I added a comment with just that realization about the same time you replied.\n\nUsing 'linux64' instead of 'x86_64' looks to solve the issue in containers, but I am not 100% if this will have any detrimental effect outside of one.","files":null},{"type":6,"author":{"id":"2db698130da1786957d2ab8d36b79f746d91090a"},"timestamp":1573079994,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwNDk5MTEyNQ=="},"target":"f99f2de1f2aeb851529149ca72f1bf1d1fe203b9dac509148f9552985e6d2ba7","message":"Please excuse my tone, I wasn't intending to imply it was done for giggles.\n\nAlso note I added a comment with just that realization about the same time you replied.\n\nUsing 'linux64' instead of 'x86_64' looks to solve the issue in containers, but I am not 100% if this will have any detrimental effect outside of one.\n\nWe could maybe check `setarch --list` to see if it contains linux64, and use that - else fall back to x86_64?","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1573080320,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1MDUzNTUwMQ==","github-url":"https://github.com/DFHack/dfhack/issues/1466#issuecomment-550535501"},"message":"Yeah, I just saw your reply, thanks.\n\n\u003e In this case, `setarch linux64 -R` works, where `x86_64` fails. I can't think of any reason not to use linux64 over x64_64. That might be a suitable fix?\n\nIs there a list of valid architectures somewhere? This is the first time I've seen `linux64` mentioned as a valid option, and I'm wary of changing to that in case other systems don't support that. Plus, the DF executable is specifically built for x86-64 - is your container able to run DF?\n\nThe argument to `setarch` is currently determined at build time, because reliably detecting the architecture at runtime across distros/etc. proved to be difficult. `setarch --list` could work, though, assuming that's portable.","files":null},{"type":3,"author":{"id":"2db698130da1786957d2ab8d36b79f746d91090a"},"timestamp":1573080561,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1MDUzNjI2Ng==","github-url":"https://github.com/DFHack/dfhack/issues/1466#issuecomment-550536266"},"message":"... and now it has stopped working, and I don't understand what changed in my environment to do so.\n\nBut it *did* work for several starts. Not sure what the heck is going on, there, or how to properly mitigate it beyond yelling at the Moby or CRI-O projects to allow \"changing\" the personality.","files":null},{"type":6,"author":{"id":"2db698130da1786957d2ab8d36b79f746d91090a"},"timestamp":1573080561,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwNDk5NTgxMA=="},"target":"0469a3d606ae0707e0925576513b39dc834abc7fb69ee311f962811ab87152a1","message":"... and now it has stopped working, and I don't understand what changed in my environment to do so.\n\nBut it *did* work for several starts. Not sure what the heck is going on, there, or how to properly mitigate it beyond yelling at the Moby or CRI-O projects to allow \"changing\" the personality. I don't think there's a way to disable this for a binary beyond usage of setarch, though I am looking for one. (disabling with sysctl wouldn't work either in the context of a container)","files":null},{"type":3,"author":{"id":"2db698130da1786957d2ab8d36b79f746d91090a"},"timestamp":1573080724,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1MDUzNzIxMg==","github-url":"https://github.com/DFHack/dfhack/issues/1466#issuecomment-550537212"},"message":"As far as portability of `setarch --list` - this was added to the upstream util-linux codebase [about 5 years back.](https://github.com/karelzak/util-linux/commit/5edb0ea6bbd57dd916417737f98c9109dc1ecb5b)","files":null},{"type":6,"author":{"id":"2db698130da1786957d2ab8d36b79f746d91090a"},"timestamp":1573080724,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwNDk5NzA4Ng=="},"target":"ecf8f5d4665229010f685ae659ab5475a311deed8aaf91fccf69f74bf515aec1","message":"As far as portability of `setarch --list` - this was added to the upstream util-linux codebase [about 7 years back.](https://github.com/karelzak/util-linux/commit/5d1607e260be44a03067f09cc2034d2208c713de)","files":null},{"type":6,"author":{"id":"2db698130da1786957d2ab8d36b79f746d91090a"},"timestamp":1573080775,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwNDk5NzQ1Nw=="},"target":"ecf8f5d4665229010f685ae659ab5475a311deed8aaf91fccf69f74bf515aec1","message":"As far as portability of `setarch --list` - this was added to the upstream util-linux codebase [about 7 years back.](https://git.kernel.org/pub/scm/utils/util-linux/util-linux.git/commit/?id=5d1607e260be44a03067f09cc2034d2208c713de)","files":null},{"type":6,"author":{"id":"2db698130da1786957d2ab8d36b79f746d91090a"},"timestamp":1573080885,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwNDk5ODM0OQ=="},"target":"ecf8f5d4665229010f685ae659ab5475a311deed8aaf91fccf69f74bf515aec1","message":"As far as portability of `setarch --list` - this was added to the upstream util-linux codebase [about 7 years back.](https://git.kernel.org/pub/scm/utils/util-linux/util-linux.git/commit/?id=5d1607e260be44a03067f09cc2034d2208c713de)\n\nSo it might be worth checking before running setarch, to catch odd environments and respond with a more helpful message than what setarch would supply (eg, someone trying to run the game on a raspberry pi with dfhack and getting this far before realizing it wasn't going to happen).","files":null},{"type":6,"author":{"id":"2db698130da1786957d2ab8d36b79f746d91090a"},"timestamp":1573080977,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwNDk5OTA1MQ=="},"target":"ecf8f5d4665229010f685ae659ab5475a311deed8aaf91fccf69f74bf515aec1","message":"As far as portability of `setarch --list` - this was added to the upstream util-linux codebase [about 7 years back.](https://git.kernel.org/pub/scm/utils/util-linux/util-linux.git/commit/?id=5d1607e260be44a03067f09cc2034d2208c713de)\n\nSo it might be worth checking before running setarch, to catch odd environments and respond with a more helpful message than what setarch would supply (eg, someone trying to run the game on a raspberry pi with dfhack and getting this far before realizing it wasn't going to happen).\n\nWe can probably close this, I don't see a good resolution in dfhack's scope (like I allude earlier, the real problem is on the container runtime side as you do have a very valid reason to need the `-R` argument.)\n\nUnless... unless a simple forking wrapper binary could be built and used to just add `ADDR_NO_RANDOMIZE`? I *think* that survives a fork()?","files":null},{"type":6,"author":{"id":"2db698130da1786957d2ab8d36b79f746d91090a"},"timestamp":1573081397,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwNTAwMjEyMQ=="},"target":"ecf8f5d4665229010f685ae659ab5475a311deed8aaf91fccf69f74bf515aec1","message":"As far as portability of `setarch --list` - this was added to the upstream util-linux codebase [about 7 years back.](https://git.kernel.org/pub/scm/utils/util-linux/util-linux.git/commit/?id=5d1607e260be44a03067f09cc2034d2208c713de)\n\nSo it might be worth checking before running setarch, to catch odd environments and respond with a more helpful message than what setarch would supply (eg, someone trying to run the game on a raspberry pi with dfhack and getting this far before realizing it wasn't going to happen - df is x86, and wouldn't run natively on ARM).","files":null},{"type":6,"author":{"id":"2db698130da1786957d2ab8d36b79f746d91090a"},"timestamp":1573081410,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwNTAwMjIzMQ=="},"target":"ecf8f5d4665229010f685ae659ab5475a311deed8aaf91fccf69f74bf515aec1","message":"As far as portability of `setarch --list` - this was added to the upstream util-linux codebase [about 7 years back.](https://git.kernel.org/pub/scm/utils/util-linux/util-linux.git/commit/?id=5d1607e260be44a03067f09cc2034d2208c713de)\n\nSo it might be worth checking before running setarch, to catch odd environments and respond with a more helpful message than what setarch would supply (eg, someone trying to run the game on a raspberry pi with dfhack and getting this far before realizing it wasn't going to happen (df is x86, and wouldn't run natively on ARM)).","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1573081073,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1MDUzOTQ1MQ==","github-url":"https://github.com/DFHack/dfhack/issues/1466#issuecomment-550539451"},"message":"I guess another thing we could try is `setarch some_arch -R true` to find an architecture that works before starting DF. Checking this on a Pi is an interesting idea too. I'll leave this open until we can come up with something a bit more robust.\n\nIn your case, I expect you can change the contents of `hack/dfhack_setarch.txt` to an architecture that works in your container (if you're able to find one... if it only works intermittently, I'm not sure how to deal with that from our end)","files":null},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1573081093,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDI3NzcxODMzMzQ="},"added":["os-specific"],"removed":[]},{"type":2,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1573081125,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50Mjc3NzE4NDU3Nw=="},"title":"`setarch` in Linux launcher breaks in podman containers","was":"Noisy Gatekeeper on Catalina"},{"type":3,"author":{"id":"2db698130da1786957d2ab8d36b79f746d91090a"},"timestamp":1573081262,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1MDUzOTc1OA==","github-url":"https://github.com/DFHack/dfhack/issues/1466#issuecomment-550539758"},"message":"Someone has covered this ground on the container runtime side and there appears to be a solution that documented [here](https://github.com/BenLubar/df-docker/blob/3c08fafbadfd60788e12d6a9e0e11c05f4ed751b/README.md).\n\nAgain though, this is out of scope for dfhack I think, unless we can find some *other* way to disable ASLR for a binary that doesn't depend on setarch or kernel tunables.\n\nThanks for your time!","files":null},{"type":6,"author":{"id":"2db698130da1786957d2ab8d36b79f746d91090a"},"timestamp":1573081262,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwNTAwMTA2MQ=="},"target":"cb539fb6483f66bdeda6bc0c4cc5d36fd900058540124cbe44bf78d578825329","message":"Someone has covered this ground on the container runtime side and there appears to be a solution that documented [here](https://github.com/BenLubar/df-docker/blob/3c08fafbadfd60788e12d6a9e0e11c05f4ed751b/README.md). TL;DR, add `--security-opt=seccomp=unconfined` to the container arguments, though this could theoretically open a security hole. If one wants to avoid that possibility, they can dig into the guts of their container engine to do better than just unconfine it.\n\nAgain though, this is out of scope for dfhack I think, unless we can find some *other* way to disable ASLR for a binary that doesn't depend on setarch or kernel tunables.\n\nThanks for your time!","files":null},{"type":4,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1579064858,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50Mjk0OTUxNDE1Ng=="},"status":2}]}