{"version":1,"ops":[{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1590201490,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDMzNjY2MTM1OTM="},"added":["bug"],"removed":[]},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1590201490,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDMzNjY2MTM1OTQ="},"added":["crash/hang"],"removed":[]},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1590201490,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDMzNjY2MTM1OTU="},"added":["structures"],"removed":[]},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1590201490,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDMzNjY2MTM1OTc="},"added":["develop only"],"removed":[]},{"type":3,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1590223746,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYzMzAwODkzOQ==","github-url":"https://github.com/DFHack/dfhack/issues/1576#issuecomment-633008939"},"message":"Win64:\nI haven't had any issue until trying to look at this issue, and it could be a matter of barking up the wrong tree (or me missing something). I've been using the latest df-structures, with my PR on top, plus the associated DFHack PR. I made sure the structures were up to date, recompiled, started DF and loaded a save, and didn't see anything usual. I then pulled the latest DFHack, and DF crashed when trying to load a save (I've tried it twice, with the same save I typically use).\n\nThis is what the pull produced:\nPS C:\\dfhack\u003e git pull origin develop\nremote: Enumerating objects: 57, done.\nremote: Counting objects: 100% (57/57), done.\nremote: Compressing objects: 100% (20/20), done.\nremote: Total 57 (delta 41), reused 53 (delta 37), pack-reused 0\nUnpacking objects: 100% (57/57), done.\nFrom https://github.com/DFHack/dfhack\n * branch              develop    -\u003e FETCH_HEAD\n   d0c030c3..f2044653  develop    -\u003e origin/develop\nRemoving depends/tthread/fast_mutex.h\nMerge made by the 'recursive' strategy.\n CMakeLists.txt                          |   4 +\n depends/tthread/CMakeLists.txt          |   2 +-\n depends/tthread/fast_mutex.h            | 249 --------------------------------\n depends/tthread/tinythread.h            |   1 -\n docs/Compile.rst                        | 181 ++++++++++++++---------\n docs/Introduction.rst                   |   3 +-\n docs/changelog.txt                      |   7 +\n library/LuaTypes.cpp                    |  22 +++\n library/include/BitArray.h              |  12 ++\n library/include/DataDefs.h              |  19 +++\n library/xml                             |   2 +-\n plugins/labormanager/joblabormapper.cpp |   4 +\n plugins/labormanager/labormanager.cpp   |   3 +\n plugins/rendermax/renderer_light.cpp    |   4 +-\n plugins/rendermax/renderer_light.hpp    |  24 +--\n plugins/rendermax/renderer_opengl.hpp   |  22 ++-\n plugins/rendermax/rendermax.cpp         |  24 ++-\n plugins/ruby/codegen.pl                 |   8 +\n plugins/ruby/ruby-autogen-defs.rb       |  16 ++\n plugins/stonesense                      |   2 +-\n 20 files changed, 250 insertions(+), 359 deletions(-)\n\nThus, something in that set changed DF from (apparently?) working to crashing. My primary (uneducated) guess would point to library/include/DataDefs.h, followed by BitArray.h and LuaTypes.cpp.","files":null},{"type":6,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1590223746,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzc0MTQ0Njgz"},"target":"9362af0f53a22f05a4f1bd754201ccbb66a913b198f5a0191a09c49707c51d11","message":"Win64:\nI haven't had any issue until trying to look at this issue, and it could be a matter of barking up the wrong tree (or me missing something). I've been using the latest df-structures, with my PR on top, plus the associated DFHack PR. I made sure the structures were up to date, recompiled, started DF and loaded a save (obviously after recompileing), and didn't see anything usual. I then pulled the latest DFHack, and DF crashed when trying to load a save (I've tried it twice, with the same save I typically use).\n\nThis is what the pull produced:\nPS C:\\dfhack\u003e git pull origin develop\nremote: Enumerating objects: 57, done.\nremote: Counting objects: 100% (57/57), done.\nremote: Compressing objects: 100% (20/20), done.\nremote: Total 57 (delta 41), reused 53 (delta 37), pack-reused 0\nUnpacking objects: 100% (57/57), done.\nFrom https://github.com/DFHack/dfhack\n * branch              develop    -\u003e FETCH_HEAD\n   d0c030c3..f2044653  develop    -\u003e origin/develop\nRemoving depends/tthread/fast_mutex.h\nMerge made by the 'recursive' strategy.\n CMakeLists.txt                          |   4 +\n depends/tthread/CMakeLists.txt          |   2 +-\n depends/tthread/fast_mutex.h            | 249 --------------------------------\n depends/tthread/tinythread.h            |   1 -\n docs/Compile.rst                        | 181 ++++++++++++++---------\n docs/Introduction.rst                   |   3 +-\n docs/changelog.txt                      |   7 +\n library/LuaTypes.cpp                    |  22 +++\n library/include/BitArray.h              |  12 ++\n library/include/DataDefs.h              |  19 +++\n library/xml                             |   2 +-\n plugins/labormanager/joblabormapper.cpp |   4 +\n plugins/labormanager/labormanager.cpp   |   3 +\n plugins/rendermax/renderer_light.cpp    |   4 +-\n plugins/rendermax/renderer_light.hpp    |  24 +--\n plugins/rendermax/renderer_opengl.hpp   |  22 ++-\n plugins/rendermax/rendermax.cpp         |  24 ++-\n plugins/ruby/codegen.pl                 |   8 +\n plugins/ruby/ruby-autogen-defs.rb       |  16 ++\n plugins/stonesense                      |   2 +-\n 20 files changed, 250 insertions(+), 359 deletions(-)\n\nThus, something in that set changed DF from (apparently?) working to crashing. My primary (uneducated) guess would point to library/include/DataDefs.h, followed by BitArray.h and LuaTypes.cpp.","files":null},{"type":6,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1590223756,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzc0MTQ0Njky"},"target":"9362af0f53a22f05a4f1bd754201ccbb66a913b198f5a0191a09c49707c51d11","message":"Win64:\nI haven't had any issue until trying to look at this issue, and it could be a matter of barking up the wrong tree (or me missing something). I've been using the latest df-structures, with my PR on top, plus the associated DFHack PR. I made sure the structures were up to date, recompiled, started DF and loaded a save (obviously after recompiling), and didn't see anything usual. I then pulled the latest DFHack, and DF crashed when trying to load a save (I've tried it twice, with the same save I typically use).\n\nThis is what the pull produced:\nPS C:\\dfhack\u003e git pull origin develop\nremote: Enumerating objects: 57, done.\nremote: Counting objects: 100% (57/57), done.\nremote: Compressing objects: 100% (20/20), done.\nremote: Total 57 (delta 41), reused 53 (delta 37), pack-reused 0\nUnpacking objects: 100% (57/57), done.\nFrom https://github.com/DFHack/dfhack\n * branch              develop    -\u003e FETCH_HEAD\n   d0c030c3..f2044653  develop    -\u003e origin/develop\nRemoving depends/tthread/fast_mutex.h\nMerge made by the 'recursive' strategy.\n CMakeLists.txt                          |   4 +\n depends/tthread/CMakeLists.txt          |   2 +-\n depends/tthread/fast_mutex.h            | 249 --------------------------------\n depends/tthread/tinythread.h            |   1 -\n docs/Compile.rst                        | 181 ++++++++++++++---------\n docs/Introduction.rst                   |   3 +-\n docs/changelog.txt                      |   7 +\n library/LuaTypes.cpp                    |  22 +++\n library/include/BitArray.h              |  12 ++\n library/include/DataDefs.h              |  19 +++\n library/xml                             |   2 +-\n plugins/labormanager/joblabormapper.cpp |   4 +\n plugins/labormanager/labormanager.cpp   |   3 +\n plugins/rendermax/renderer_light.cpp    |   4 +-\n plugins/rendermax/renderer_light.hpp    |  24 +--\n plugins/rendermax/renderer_opengl.hpp   |  22 ++-\n plugins/rendermax/rendermax.cpp         |  24 ++-\n plugins/ruby/codegen.pl                 |   8 +\n plugins/ruby/ruby-autogen-defs.rb       |  16 ++\n plugins/stonesense                      |   2 +-\n 20 files changed, 250 insertions(+), 359 deletions(-)\n\nThus, something in that set changed DF from (apparently?) working to crashing. My primary (uneducated) guess would point to library/include/DataDefs.h, followed by BitArray.h and LuaTypes.cpp.","files":null},{"type":6,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1590223795,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzc0MTQ0NzIz"},"target":"9362af0f53a22f05a4f1bd754201ccbb66a913b198f5a0191a09c49707c51d11","message":"Win64:\nI haven't had any issue until trying to look at this issue, and it could be a matter of barking up the wrong tree (or me missing something). I've been using the latest df-structures, with my PR on top, plus the associated DFHack PR. I made sure the structures were up to date, recompiled, started DF and loaded a save, and didn't see anything usual. I then pulled the latest DFHack, and DF crashed when trying to load a save (obviously after recompiling) (I've tried it twice, with the same save I typically use).\n\nThis is what the pull produced:\nPS C:\\dfhack\u003e git pull origin develop\nremote: Enumerating objects: 57, done.\nremote: Counting objects: 100% (57/57), done.\nremote: Compressing objects: 100% (20/20), done.\nremote: Total 57 (delta 41), reused 53 (delta 37), pack-reused 0\nUnpacking objects: 100% (57/57), done.\nFrom https://github.com/DFHack/dfhack\n * branch              develop    -\u003e FETCH_HEAD\n   d0c030c3..f2044653  develop    -\u003e origin/develop\nRemoving depends/tthread/fast_mutex.h\nMerge made by the 'recursive' strategy.\n CMakeLists.txt                          |   4 +\n depends/tthread/CMakeLists.txt          |   2 +-\n depends/tthread/fast_mutex.h            | 249 --------------------------------\n depends/tthread/tinythread.h            |   1 -\n docs/Compile.rst                        | 181 ++++++++++++++---------\n docs/Introduction.rst                   |   3 +-\n docs/changelog.txt                      |   7 +\n library/LuaTypes.cpp                    |  22 +++\n library/include/BitArray.h              |  12 ++\n library/include/DataDefs.h              |  19 +++\n library/xml                             |   2 +-\n plugins/labormanager/joblabormapper.cpp |   4 +\n plugins/labormanager/labormanager.cpp   |   3 +\n plugins/rendermax/renderer_light.cpp    |   4 +-\n plugins/rendermax/renderer_light.hpp    |  24 +--\n plugins/rendermax/renderer_opengl.hpp   |  22 ++-\n plugins/rendermax/rendermax.cpp         |  24 ++-\n plugins/ruby/codegen.pl                 |   8 +\n plugins/ruby/ruby-autogen-defs.rb       |  16 ++\n plugins/stonesense                      |   2 +-\n 20 files changed, 250 insertions(+), 359 deletions(-)\n\nThus, something in that set changed DF from (apparently?) working to crashing. My primary (uneducated) guess would point to library/include/DataDefs.h, followed by BitArray.h and LuaTypes.cpp.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1590268288,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYzMzEzODkyNw==","github-url":"https://github.com/DFHack/dfhack/issues/1576#issuecomment-633138927"},"message":"It's actually something in library/xml - the size of the `items.other` array changed","files":null},{"type":6,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1590268288,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzc0MTkwNDg5"},"target":"9e599e50ae385fa293d97bc18fb7a959d628358cfaea9249c01a4c5574f48849","message":"It's actually something in library/xml - the size of the `items.other` array changed (changes in submodules generally don't show up in diff stats in the main dfhack repo)","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1590721285,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYzNTcyOTE4NQ==","github-url":"https://github.com/DFHack/dfhack/issues/1576#issuecomment-635729185"},"message":"I switched world.items.other back to a static-array and now I'm getting a segfault on accessing world.machines (which also has a vtable). (Also when accessing world.cur_savegame, but that's later on.) I'm not sure what's going on here, since buildings.other was definitely the right size, but I'm inclined to roll back the df-other-vectors additions so we have a working develop build in the meantime.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1590722087,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYzNTczMjYzMw==","github-url":"https://github.com/DFHack/dfhack/issues/1576#issuecomment-635732633"},"message":"I rolled back some of the changes for now. Now that I think about it, one likely cause could be `items` being one vector too large and `buildings` (shortly after `items`, but before `cur_savegame`) being one vector too *small*, so fixing the size of `items` broke everything after `buildings`. I have some other PRs to deal with first, though.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1595744051,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY2Mzk0MDkwMQ==","github-url":"https://github.com/DFHack/dfhack/issues/1576#issuecomment-663940901"},"message":"`buildings.other` is fixed now. `items.other` is trickier because of the `world.items.other.BAD` and `world.items.bad` overlap, since there are existing tools that use both names (and at least one cross-reference to `items_other_id.BAD` from somewhere else in the XML files that would need to be removed).","files":null},{"type":3,"author":{"id":"5221f59e75ea9db114593bbdfb180b7354aef9ed"},"timestamp":1595782678,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY2NDAxMzM4Mw==","github-url":"https://github.com/DFHack/dfhack/issues/1576#issuecomment-664013383"},"message":"I question whether `items_other_id.BAD` actually exists, or if it's an instance of two very similar enums being shoehorned together (or perhaps a misunderstanding from some code that wasn't analyzed properly).","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1595801407,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY2NDA0NjcxOQ==","github-url":"https://github.com/DFHack/dfhack/issues/1576#issuecomment-664046719"},"message":"Yeah, I'm probably going to get rid of `items_other_id.BAD` along with `world.items.other.BAD`. It's possible that some DF code accesses `items.bad` as one item past the end of `items.other`, but I'd be surprised if it deliberately does that instead of accessing `items.bad` directly.","files":null},{"type":4,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1595819798,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MzU4Nzg2NTczMA=="},"status":2}]}