{"version":1,"ops":[{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1482012918,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDg5NzcwODEwOQ=="},"added":["crash/hang"],"removed":[]},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1482012918,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDg5NzcwODExMA=="},"added":["ruby"],"removed":[]},{"type":3,"author":{"id":"0541b7dd92e4d9285c31215454cda686ef6b8a4e"},"timestamp":1482013491,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2Nzc5MTA1Nw==","github-url":"https://github.com/DFHack/dfhack/issues/1049#issuecomment-267791057"},"message":"I managed to get a process dump by running Dwarf Fortress inside of procdump with exception traps enabled. Here's the crash reason in the dump: `Unhandled exception at 0x00007FF8B84A54C9 (ruby.plug.dll) in Dwarf Fortress.exe_161217_161850.dmp: 0xC0000005: Access violation reading location 0xFFFFFFFFFFFFFFFF.`\n\nThe call stack is:\n```\n\u003e\truby.plug.dll!rb_dfmemory_read_int32(unsigned __int64 self, unsigned __int64 addr) Line 678\tC++\n \tlibruby.dll!000000006f272615()\tUnknown\n \tlibruby.dll!000000006f276d08()\tUnknown\n \tlibruby.dll!000000006f27ac09()\tUnknown\n \tlibruby.dll!000000006f284638()\tUnknown\n \tlibruby.dll!000000006f1d0e0d()\tUnknown\n \tlibruby.dll!000000006f1d166d()\tUnknown\n \tlibruby.dll!000000006f1d22c5()\tUnknown\n \tlibruby.dll!000000006f272615()\tUnknown\n \tlibruby.dll!000000006f276ca1()\tUnknown\n \tlibruby.dll!000000006f27ac09()\tUnknown\n \tlibruby.dll!000000006f27b260()\tUnknown\n \tlibruby.dll!000000006f281d48()\tUnknown\n \tlibruby.dll!000000006f2740b4()\tUnknown\n \tlibruby.dll!000000006f274280()\tUnknown\n \tlibruby.dll!000000006f139667()\tUnknown\n \tlibruby.dll!000000006f272615()\tUnknown\n \tlibruby.dll!000000006f2817c1()\tUnknown\n \tlibruby.dll!000000006f276ca1()\tUnknown\n \tlibruby.dll!000000006f27ac09()\tUnknown\n \tlibruby.dll!000000006f284638()\tUnknown\n \tlibruby.dll!000000006f106871()\tUnknown\n \tlibruby.dll!000000006f272615()\tUnknown\n \tlibruby.dll!000000006f276ca1()\tUnknown\n \tlibruby.dll!000000006f27ac09()\tUnknown\n \tlibruby.dll!000000006f284638()\tUnknown\n \tlibruby.dll!000000006f106871()\tUnknown\n \tlibruby.dll!000000006f272615()\tUnknown\n \tlibruby.dll!000000006f276ca1()\tUnknown\n \tlibruby.dll!000000006f27ac09()\tUnknown\n \tlibruby.dll!000000006f282e30()\tUnknown\n \tlibruby.dll!000000006f283137()\tUnknown\n \tlibruby.dll!000000006f27451c()\tUnknown\n \tlibruby.dll!000000006f278ffc()\tUnknown\n \tlibruby.dll!000000006f27ac09()\tUnknown\n \tlibruby.dll!000000006f284638()\tUnknown\n \tlibruby.dll!000000006f1d2110()\tUnknown\n \tlibruby.dll!000000006f272615()\tUnknown\n \tlibruby.dll!000000006f2817c1()\tUnknown\n \tlibruby.dll!000000006f276ca1()\tUnknown\n \tlibruby.dll!000000006f27ac09()\tUnknown\n \tlibruby.dll!000000006f27b260()\tUnknown\n \tlibruby.dll!000000006f281d48()\tUnknown\n \tlibruby.dll!000000006f2740b4()\tUnknown\n \tlibruby.dll!000000006f274280()\tUnknown\n \tlibruby.dll!000000006f139667()\tUnknown\n \tlibruby.dll!000000006f272615()\tUnknown\n \tlibruby.dll!000000006f2817c1()\tUnknown\n \tlibruby.dll!000000006f276ca1()\tUnknown\n \tlibruby.dll!000000006f27ac09()\tUnknown\n \tlibruby.dll!000000006f284638()\tUnknown\n \tlibruby.dll!000000006f106871()\tUnknown\n \tlibruby.dll!000000006f272615()\tUnknown\n \tlibruby.dll!000000006f2817c1()\tUnknown\n \tlibruby.dll!000000006f276ca1()\tUnknown\n \tlibruby.dll!000000006f27ac09()\tUnknown\n \tlibruby.dll!000000006f284638()\tUnknown\n \tlibruby.dll!000000006f106871()\tUnknown\n \tlibruby.dll!000000006f272615()\tUnknown\n \tlibruby.dll!000000006f2817c1()\tUnknown\n \tlibruby.dll!000000006f276ca1()\tUnknown\n \tlibruby.dll!000000006f27ac09()\tUnknown\n \tlibruby.dll!000000006f2822f6()\tUnknown\n \tlibruby.dll!000000006f282ca0()\tUnknown\n \tlibruby.dll!000000006f14b0fc()\tUnknown\n \truby.plug.dll!df_rubythread(void * p) Line 485\tC++\n \truby.plug.dll!tthread::thread::wrapper_function(void * aArg) Line 169\tC++\n \t[External Code]\t\n```","files":null},{"type":3,"author":{"id":"17ae12cfab0ce339569b0d660b486a8eb9914c8b"},"timestamp":1482148589,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2Nzk0NzI5OA==","github-url":"https://github.com/DFHack/dfhack/issues/1049#issuecomment-267947298"},"message":"(edit) I find that sometimes only `df.world.entities.all[0]` causes the crash, at least on the embark screen, and `(1...df.world.entities.all.size).each {|i| p df.world.entities.all[i] }` doesn't crash. Other times just `df.world.entities.size`, but I'm not sure if that's even supposed to work.\n\nOn bigger worlds it's more than just index 0 that causes the crash. `df.world.entities.all[11].methods.each {|m| if m =~ /(.*[^=])=$/ then p $1 ; p df.world.entities.all[0].send($1) unless $1 == 'unknown2' end}` doesn't crash, but printing `df.world.entities.all[0].unknown2` does. Both 0 and 11 have `.type = :Civilization`.\n\n`df.world.entities.all[11].unknown2.methods.each {|m| if m =~ /(.*[^=])=$/ then p $1 ; p df.world.entities.all[0].unknown2.send($1) unless ['unk18', 'unk28'].include? $1 end}` again doesn't crash. Both 'unk18' and 'unk28' are stl-vectors. Lua gives `#df.global.world.entities.all[0].unknown2.unk18 == -181`, ruby 18446744073709551435. Trying to index unk18 in lua crashes lua too.","files":null},{"type":3,"author":{"id":"17ae12cfab0ce339569b0d660b486a8eb9914c8b"},"timestamp":1482154247,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2Nzk2NDIwOQ==","github-url":"https://github.com/DFHack/dfhack/issues/1049#issuecomment-267964209"},"message":"I have a dirty fix here: https://github.com/nocico/dfhack/commit/2c02e295eb282583d99cfa14afd733532dcd3a13 . Try it out to see if I have the real issue nailed down or if it's just the pattern of memory corruption on my machine or whatever.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1482155425,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2Nzk2ODMxOA==","github-url":"https://github.com/DFHack/dfhack/issues/1049#issuecomment-267968318"},"message":"We need to fix that structure instead. Where are the unk18/unk28 vectors (in what structure)?","files":null},{"type":3,"author":{"id":"0541b7dd92e4d9285c31215454cda686ef6b8a4e"},"timestamp":1482155765,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2Nzk2OTUxMg==","github-url":"https://github.com/DFHack/dfhack/issues/1049#issuecomment-267969512"},"message":"Those are probably incorrectly marked as being stl-vectors. In my test world, `world.entities.all[0].unknown.unk18` is a STL vector with 18446744073329726282 elements, which is... improbable. This most likely indicates that the STL vector's \"end\" pointer is earlier in memory than its \"start\" pointer, or even that its \"end\" pointer isn't a pointer at all.\n\nRef: https://github.com/DFHack/df-structures/blob/master/df.entities.xml#L752\n\nBoth fields should be changed to an pure unknown of the same size as a STL vector. Note that the start pointer of the STL appears valid, it just doesn't make sense with the end pointer. This suggests that we're looking at a pointer that isn't part of an STL vector.","files":null},{"type":3,"author":{"id":"0541b7dd92e4d9285c31215454cda686ef6b8a4e"},"timestamp":1482161660,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2Nzk5NDM3MA==","github-url":"https://github.com/DFHack/dfhack/issues/1049#issuecomment-267994370"},"message":"In my test world, the bytes at `world.entities.all[n].unknown.unk18` tend to be all zeros, or `FFFF0000FFFFFFFF` followed by 16 bytes of zeros. This obviously isn't an STL vector. \n\n`world.entities.all[n].unknown.unk28` tends to be all zeros. Also not an STL vector.\n\nPR (for df-structures) will issue shortly.","files":null},{"type":2,"author":{"id":"0541b7dd92e4d9285c31215454cda686ef6b8a4e"},"timestamp":1482288198,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50OTAxMDQwMTAw"},"title":"Infinite loop in stockflow","was":"Heisenbug in ruby runtime?"},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1482289702,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2ODQyMzE3NQ==","github-url":"https://github.com/DFHack/dfhack/issues/1051#issuecomment-268423175"},"message":"If it's a loop in Lua, `dfhack-run kill-lua` should stop it, by the way.","files":null},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1482899525,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDkwNjIxMzY2OA=="},"added":["bug"],"removed":[]},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1482899678,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDkwNjIxNDYyOQ=="},"added":["stockflow"],"removed":[]}]}