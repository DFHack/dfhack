{"version":1,"ops":[{"type":1,"author":{"id":"d4ba99f16422e9377de56dab81d2b84415f00388"},"timestamp":1592669129,"metadata":{"github-id":"MDU6SXNzdWU2NDI0MDIxMDI=","github-url":"https://github.com/DFHack/dfhack/issues/1594","origin":"github"},"title":"Legends Export Caste useless id","message":"In the legends export the following fields in the `historical_events` can not be used in the legends.\n* `\u003cslayer_caste\u003e`\n* `\u003cnew_caste\u003e`\n* `\u003cold_caste\u003e`\n* `\u003cwoundee_caste\u003e`\n\nThese values are exported as intergers (`0` or `1`) not as string `male` or `female`\nBut because they are race depended that can not be used unless the race-\u003ecastle mapping is also exported.\n\nFor `\u003ccaste\u003e` the value is inserted as: `(df.global.world.raws.creatures.all[event.race].caste[v].caste_id):lower()`\nThis should also be the case for the others mentioned above.\n\nTo proof the values are race dependent:\n```\n[DFHack]# lua ~df.global.world.raws.creatures.all[819].caste[0].caste_id\nMALE\n[DFHack]# lua ~df.global.world.raws.creatures.all[819].caste[1].caste_id\nFEMALE\n[DFHack]# lua ~df.global.world.raws.creatures.all[820].caste[1].caste_id\nMALE\n[DFHack]# lua ~df.global.world.raws.creatures.all[820].caste[0].caste_id\nFEMALE\n```\nFor some 0 is male, for others 0 is female. I think this just depends on the order in the raws.\n\nSo the values mentioned above should be printed using: `(df.global.world.raws.creatures.all[event.race].caste[v].caste_id):lower()` or similarly.\nI think they are currently just printed with the catch all `file:write(\"\\t\\t\u003c\"..k..\"\u003e\"..tostring(v)..\"\u003c/\"..k..\"\u003e\\n\")`","files":null}]}