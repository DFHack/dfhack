{"version":1,"ops":[{"type":3,"author":{"id":"a9962c95bf61bfe9c4990b27858bbe7812240f54"},"timestamp":1274883119,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI1NDMzMQ==","github-url":"https://github.com/DFHack/dfhack/issues/27#issuecomment-254331"},"message":"That was what I took a stab at before. Maybe the exceptions can include information about what modules need to be notified so they can handle a certain error? Although, Im still not convinced exceptions is the best route here, thats why I didnt take it further. I was actually waiting for something like this. Yea, some specs on the error handling. =)","files":null},{"type":3,"author":{"id":"4f2823b111a40d19603a11dc9e0f3c589bea0f03"},"timestamp":1274900677,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI1NDY3Nw==","github-url":"https://github.com/DFHack/dfhack/issues/27#issuecomment-254677"},"message":"Yep. I know :)\nExceptions are kinda bad in that they fall down the stack until they hit a try-catch. The idea here is to keep the stack really low, because extra layers of crud make things slower.\n\nSo. I have a few classes. One is ContextManager -- it does all the tracking of multiple Contexts/Processes. Then there's the Context, which wraps a Process class and a (currently hardcoded) set of Modules. Context and modules share a common state object (ContextShared). This object is actually what tracks all the individual parts of the Context. So modules know about each other. You could also use modules from other modules I think. Modules have their own private data on top of having a pointer to the Context state. A weird mixture of design patterns that fits surprisingly well :)\n\nThis should allow some form of error response. There are actually two layers here - the Process and the Modules. You work with the Process through Modules, which implement all the different read/write algorithms. So, error response should be implemented in the Context and Modules. We can catch errors from the Process there. \n\nProcesses can be used naked without the Context. You just use ProcessEnumerator + Process directly. Then you'd get the raw exceptions... \n\nQuestion is, what happens when you get the raw process from the Context and work with that directly? You certainly can... should the Context react to the Process being wrecked by some unsafe DF-segfault-causing action? Maybe there should be some guidelines on where is using the Process allowed... either in the Modules, or experimental code that doesn't belong in actual released tools...\n\nSo... some food for thought :)","files":null},{"type":3,"author":{"id":"4f2823b111a40d19603a11dc9e0f3c589bea0f03"},"timestamp":1316898253,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDIxODgxODM=","github-url":"https://github.com/DFHack/dfhack/issues/27#issuecomment-2188183"},"message":"Any error that's not produced by checking pointers before accessing them are now killing DF. As do unhandled exceptions. There are no Process or Context classes involved anymore and this seems irrelevant now. An altogether different approach is required.\n\nClosing.","files":null},{"type":4,"author":{"id":"4f2823b111a40d19603a11dc9e0f3c589bea0f03"},"timestamp":1316898253,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MzU3MDQzMA=="},"status":2}]}