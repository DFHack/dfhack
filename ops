{"version":1,"ops":[{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1587397796,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDMyNTIzOTcyNDE="},"added":["idea"],"removed":[]},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1587412123,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxNjc3MTU0MA==","github-url":"https://github.com/DFHack/dfhack/issues/1551#issuecomment-616771540"},"message":"I think it would be in the scope of the tweak plugin, at least. For a fix, were you thinking increasing unit sizes would work?\nThis reminds me a bit of [tweak fast-heat and stable-temp](https://github.com/DFHack/dfhack/tree/0.34.11-r5#tweak) from back in 0.34.11; those dealt with items, though, where the buggy code was in a vmethod which could easily be interposed. That's not the case with units, unfortunately.","files":null},{"type":3,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1587412404,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxNjc3Mzc3MA==","github-url":"https://github.com/DFHack/dfhack/issues/1551#issuecomment-616773770"},"message":"My intention was to just change the size and length fields from 0 to 1, so it would require iterating over all units, or at least the active ones, but fixing inactive ones before they enter play would probably be the better choice. Units don't tend to be that numerous that I think it would be a problem to iterate over them.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1587481261,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxNzIzNTM1Mg==","github-url":"https://github.com/DFHack/dfhack/issues/1551#issuecomment-617235352"},"message":"Yeah, if done in C++ it should hardly be noticeable (we could further optimize it by caching the length of the units vector and only scanning if it changes, although depending on exactly when units are added/removed, we could run into an edge case there).","files":null},{"type":3,"author":{"id":"88b79c31fdfd52952dafcabb16168259734368cc"},"timestamp":1587532533,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxNzU1NDgwNw==","github-url":"https://github.com/DFHack/dfhack/issues/1551#issuecomment-617554807"},"message":"Btw anyone knows why it happens? Maybe a small code patch would be more \"correct\" fix. Also that would help Toady narrow it down greatly.\n\nLink to mantis issue: https://www.bay12games.com/dwarves/mantisbt/view.php?id=8410","files":null},{"type":6,"author":{"id":"88b79c31fdfd52952dafcabb16168259734368cc"},"timestamp":1587532533,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY2ODY1NzA4"},"target":"4bb17e6a7e2dca84992d2d898e863231eb34cf3726cfec6e4271e1d3e0fff868","message":"Btw anyone knows why it happens? Maybe a small code patch would be more \"correct\" fix. Also that would help Toady narrow it down greatly.\n\nLink to mantis issue: https://www.bay12games.com/dwarves/mantisbt/view.php?id=8410\n\nEdit: seems that Quietust figured it out in mantis - genetic variation causes value to be 0. We could check all of raws and figure out which ones could cause this issue maybe fix the raws? This does not seem that hard.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1587535619,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxNzU3MDg4Ng==","github-url":"https://github.com/DFHack/dfhack/issues/1551#issuecomment-617570886"},"message":"Would changing the raws affect existing creatures, though? IMO a fix ought to handle those too.\n(Assuming in-memory raw changes affect _new_ creatures, we could use a two-fold approach of fixing broken creatures on world load and fixing the raws to prevent future creatures from having this issue, although I'm not entirely sure what raw changes would be necessary.)","files":null},{"type":3,"author":{"id":"88b79c31fdfd52952dafcabb16168259734368cc"},"timestamp":1587538830,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxNzU5MDU5NQ==","github-url":"https://github.com/DFHack/dfhack/issues/1551#issuecomment-617590595"},"message":"IIRC changing raws would not affect existing creatures (though setting recalc size would? not sure).\n\nThough maybe i'm bikeshedding too much - and just fixing all the broken 0 sized creatures would be enough for 99% of cases.","files":null},{"type":3,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1587540572,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxNzYwMzIxMA==","github-url":"https://github.com/DFHack/dfhack/issues/1551#issuecomment-617603210"},"message":"I don't think it's a raw issue as such: the code shouldn't crash just because you selected some legal values in your raws. I agree a code patch would be the best, assuming the code could be located.\n\nI managed to get a number of zero size creatures when failing to correctly identify which creatures are vermin and which are not (it's surprisingly messy), resulting in \"biodiversity\" addition of \"missing\" creatures from biomes setting some vermin as animals. I got (regular) Firefly animals that had a size of 0 or 1, split about evenly, for instance.\n\nI would assume the cause of the problem is the code that calculates size (and length) of spawned creatures that truncates the calculated size to an integer value either directly through an integer calculation or through a type conversion from a floating point value. What would be needed at that point is a selection of the larger of the calculated value or 1.","files":null},{"type":3,"author":{"id":"88b79c31fdfd52952dafcabb16168259734368cc"},"timestamp":1587542615,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxNzYxOTg1NA==","github-url":"https://github.com/DFHack/dfhack/issues/1551#issuecomment-617619854"},"message":"If i understand the issue correctly it's a raws + code issue: you have base size+ some variation with clamped gaussian distribution. On some corner cases the value you roll gets size to 0. Though even the mantis issue does not have \"proof\". Correct fix, from DF side, would just be to fix code to never have 0 there even if raws say otherwise. Though there could be other corner cases (e.g. creating true creature with race of a vermin) which would break a lot more stuff.","files":null},{"type":3,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1587543958,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxNzYzMDg2Mw==","github-url":"https://github.com/DFHack/dfhack/issues/1551#issuecomment-617630863"},"message":"Well, it's really an issue of math vs computer implementations of math. Unless the range is [0, 0] (which should be erroneous) you'd get a non zero value (that might be arbitrarily close to zero), but the computer implementation has chosen (wisely, I would assume) to use integer math, which would need a guard for the truncation to zero case. Thus, I think warmist and I are on the same page.\n\nMy accidental hacking of vermin as real creatures worked fine when they were size 1, so I think DF handles that part (and the only distinction between real animals and vermin from a raw perspective is a number of tags that indicate they're vermin and thus should behave differently. The Creepy Crawler is an example of an animal sized vermin that can be butchered, for instance).","files":null}]}