{"version":1,"ops":[{"type":6,"author":{"id":"678f4abbcdf8536bb17dd33ea11a056d23e6b550"},"timestamp":1583616789,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDozNTc5ODg5MDA="},"target":"ff3a3c38f57ff537a3731d393ec5132a8fc224369f76296941454a87e08c4aca","message":"Using a [recent commit](https://github.com/DFHack/dfhack/commit/5f83681fbc49eec0a1f49afedd61e16f2bc0fb84) version of dfhack, using [the current fortress in this save](http://dffd.bay12games.com/file.php?id=14906), I go into the status `z` screen, then `enter` the Animals tab, the game crash with a Segmentation fault, but only when running the game with dfhack (I can not reproduce when using df alone).\n\nEDIT: fix link to the commit I use","files":null},{"type":3,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1583667058,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NjE5NTIyOQ==","github-url":"https://github.com/DFHack/dfhack/issues/1514#issuecomment-596195229"},"message":"@BenLubar : Looks like your area of expertise. I repeated the actions with a save of mine (from 0.44.12), and it blows up at line 545 of DataDefs.cpp. In my case union_fields had an address of 800000ac, which is far too small for win64.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1583693598,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NjIzODYzOA==","github-url":"https://github.com/DFHack/dfhack/issues/1514#issuecomment-596238638"},"message":"Does disabling the `search` plugin help? Not sure if there others that run on that screen.","files":null},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1583693611,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDMxMDg2MjI1OTk="},"added":["bug"],"removed":[]},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1583693611,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDMxMDg2MjI2MDA="},"added":["crash/hang"],"removed":[]},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1583693611,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDMxMDg2MjI2MDE="},"added":["develop only"],"removed":[]},{"type":3,"author":{"id":"9332be531b7e272134e2b1bad79b4596cf311e19"},"timestamp":1583695207,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NjI0MTQ5MA==","github-url":"https://github.com/DFHack/dfhack/issues/1514#issuecomment-596241490"},"message":"Just ran into this independently using dfhack-0.47.04-alpha0-200308001-Linux-64-gcc-7 with a game started on 47.04.\n\nDisabling the search plugin made no difference.\n\nConsole returns message \"Common lua context stack top left at 4 after suspend.\" if that is any help.","files":null},{"type":6,"author":{"id":"9332be531b7e272134e2b1bad79b4596cf311e19"},"timestamp":1583695207,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2NTQyNTg3"},"target":"06ef2b6e14153aaeb7f6974953fc1321a1da0ad65553b9b65b7acd0e811ae761","message":"Just ran into this independently using dfhack-0.47.04-alpha0-200308001-Linux-64-gcc-7 with a game started on 47.04.\n\nDisabling the search plugin made no difference.\n\nConsole returns message \"Common lua context stack top left at 4 after suspend.\" after segfault if that is any help.","files":null},{"type":3,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1583705473,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NjI1ODc0NQ==","github-url":"https://github.com/DFHack/dfhack/issues/1514#issuecomment-596258745"},"message":"As feelotraveller commented, disabling \"search\" doesn't make any difference\nHere's the call stack from the debugger:\n´´´\n\u003e\tSDL.dll!DFHack::find_union_tag(const DFHack::struct_field_info * fields, const DFHack::struct_field_info * union_field) Line 545\tC++\n \tSDL.dll!IndexFields(lua_State * state, int base, DFHack::struct_identity * pstruct, bool globals) Line 1189\tC++\n \tSDL.dll!MakeFieldMetatable(lua_State * state, DFHack::struct_identity * pstruct, int(*)(lua_State *) reader, int(*)(lua_State *) writer, bool globals) Line 1261\tC++\n \tSDL.dll!DFHack::struct_identity::build_metatable(lua_State * state) Line 1407\tC++\n \tSDL.dll!BuildTypeMetatable(lua_State * state, DFHack::type_identity * type) Line 1300\tC++\n \tSDL.dll!DFHack::LuaWrapper::push_object_internal(lua_State * state, DFHack::type_identity * type, void * ptr, bool in_method) Line 226\tC++\n \tSDL.dll!DFHack::pointer_identity::lua_read(lua_State * state, int fname_idx, void * ptr, DFHack::type_identity * target) Line 195\tC++\n \tSDL.dll!DFHack::pointer_identity::lua_read(lua_State * state, int fname_idx, void * ptr) Line 200\tC++\n \tSDL.dll!df::function_wrapper\u003cdf::viewscreen * __ptr64 (__cdecl*)(bool),0\u003e::execute(lua_State * state, int base, df::viewscreen *(*)(bool) cb) Line 141\tC++\n \tSDL.dll!df::function_identity\u003cdf::viewscreen * __ptr64 (__cdecl*)(bool)\u003e::invoke(lua_State * state, int base) Line 271\tC++\n \tSDL.dll!DFHack::LuaWrapper::method_wrapper_core(lua_State * state, DFHack::function_identity_base * id) Line 1077\tC++\n \tSDL.dll!meta_call_function(lua_State * state) Line 1067\tC++\n \tlua.dll!luaD_precall(lua_State * L, lua_TValue * func, int nresults) Line 365\tC++\n \tlua.dll!luaV_execute(lua_State * L) Line 1134\tC++\n \tlua.dll!luaD_call(lua_State * L, lua_TValue * func, int nResults) Line 497\tC++\n \tlua.dll!luaD_callnoyield(lua_State * L, lua_TValue * func, int nResults) Line 507\tC++\n \tlua.dll!f_call(lua_State * L, void * ud) Line 943\tC++\n \tlua.dll!luaD_rawrunprotected(lua_State * L, void(*)(lua_State *, void *) f, void * ud) Line 142\tC++\n \tlua.dll!luaD_pcall(lua_State * L, void(*)(lua_State *, void *) func, void * u, __int64 old_top, __int64 ef) Line 727\tC++\n \tlua.dll!lua_pcallk(lua_State * L, int nargs, int nresults, int errfunc, __int64 ctx, int(*)(lua_State *, int, __int64) k) Line 968\tC++\n \tSDL.dll!do_invoke_event(lua_State * L, int argbase, int num_args, int errorfun) Line 1459\tC++\n \tSDL.dll!dfhack_event_invoke(lua_State * L, int base, bool from_c) Line 1498\tC++\n \tSDL.dll!DFHack::Lua::Event::Invoke(DFHack::color_ostream \u0026 out, lua_State * state, void * key, int num_args) Line 1553\tC++\n \tSDL.dll!DFHack::Lua::Core::onStateChange(DFHack::color_ostream \u0026 out, int code) Line 1851\tC++\n \tSDL.dll!DFHack::Core::onStateChange(DFHack::color_ostream \u0026 out, DFHack::state_change_event event) Line 2289\tC++\n \tSDL.dll!DFHack::Core::doUpdate(DFHack::color_ostream \u0026 out, bool first_update) Line 2032\tC++\n \tSDL.dll!DFHack::Core::Update() Line 2077\tC++\n \tSDL.dll!SDL_NumJoysticks() Line 611\tC++\n´´´","files":null},{"type":3,"author":{"id":"678f4abbcdf8536bb17dd33ea11a056d23e6b550"},"timestamp":1583716730,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NjI3ODk4Mw==","github-url":"https://github.com/DFHack/dfhack/issues/1514#issuecomment-596278983"},"message":"Here is the `bt` on a linux build (type `RelWithDebInfo`, from [this commit](https://github.com/DFHack/dfhack/commit/a2e34a3b7103f7645751911ca37230e7b1bdbb90)):\n\n\n```\nDFHack]# \n          Thread 3 \"Dwarf_Fortress\" received signal SIGSEGV, Segmentation fault.\n                                                                                [Switching to Thread 0x7ffff227a700 (LWP 14343)]\n0x00007ffff79be3ac in DFHack::find_union_tag (fields=fields@entry=0x7ffff7f3f720 \u003cdf::viewscreen_petst_fields\u003e, union_field=union_field@entry=0x7ffff7f3f750 \u003cdf::viewscreen_petst_fields+48\u003e)\n    at /usr/include/c++/9/bits/basic_string.h:6213\n6213\t    operator!=(const basic_string\u003c_CharT, _Traits, _Alloc\u003e\u0026 __lhs,\n(gdb) bt\n#0  0x00007ffff79be3ac in DFHack::find_union_tag(DFHack::struct_field_info const*, DFHack::struct_field_info const*)\n    (fields=fields@entry=0x7ffff7f3f720 \u003cdf::viewscreen_petst_fields\u003e, union_field=union_field@entry=0x7ffff7f3f750 \u003cdf::viewscreen_petst_fields+48\u003e) at /usr/include/c++/9/bits/basic_string.h:6213\n#1  0x00007ffff79cf626 in IndexFields(lua_State*, int, DFHack::struct_identity*, bool) (state=0x7fffec6dbb88, base=1, pstruct=0x7ffff7fbb540 \u003cdf::viewscreen_petst::_identity\u003e, globals=false)\n    at /home/pbelanger/dev/dfhack/library/LuaTypes.cpp:1189\n#2  0x00007ffff79cf80b in MakeFieldMetatable(lua_State*, DFHack::struct_identity*, lua_CFunction, lua_CFunction, bool) (\n    state=0x7fffec6dbb88, pstruct=\u003coptimized out\u003e, reader=0x7ffff79ce3e0 \u003cmeta_struct_index(lua_State*)\u003e, writer=0x7ffff79ce980 \u003cmeta_struct_newindex(lua_State*)\u003e, globals=\u003coptimized out\u003e)\n    at /home/pbelanger/dev/dfhack/library/LuaTypes.cpp:1258\n#3  0x00007ffff79cfa1a in DFHack::struct_identity::build_metatable(lua_State*) (this=0x7ffff7fbb540 \u003cdf::viewscreen_petst::_identity\u003e, state=0x7fffec6dbb88)\n    at /home/pbelanger/dev/dfhack/library/LuaTypes.cpp:1406\n#4  0x00007ffff79c8c99 in BuildTypeMetatable(lua_State*, DFHack::type_identity*) (state=0x7fffec6dbb88, type=0x7ffff7fbb540 \u003cdf::viewscreen_petst::_identity\u003e)\n    at /home/pbelanger/dev/dfhack/library/LuaWrapper.cpp:1298\n#5  0x00007ffff79c8de3 in DFHack::LuaWrapper::push_object_internal(lua_State*, DFHack::type_identity*, void*, bool) (state=0x7fffec6dbb88, type=\u003coptimized out\u003e, ptr=0x7fffed1989e0, in_method=\u003coptimized out\u003e)\n    at /home/pbelanger/dev/dfhack/library/LuaWrapper.cpp:224\n#6  0x00007ffff79ce2d4 in DFHack::pointer_identity::lua_read(lua_State*, int, void*, DFHack::type_identity*) (state=\u003coptimized out\u003e, fname_idx=\u003coptimized out\u003e, ptr=\u003coptimized out\u003e, target=\u003coptimized out\u003e)\n    at /home/pbelanger/dev/dfhack/library/LuaTypes.cpp:194\n#7  0x00007ffff79ce4c8 in DFHack::pointer_identity::lua_read(lua_State*, int, void*) (this=\u003coptimized out\u003e, state=\u003coptimized out\u003e, fname_idx=\u003coptimized out\u003e, ptr=\u003coptimized out\u003e)\n    at /home/pbelanger/dev/dfhack/library/LuaTypes.cpp:199\n#8  0x00007ffff79ebbea in df::function_wrapper\u003cdf::viewscreen* (*)(bool), false\u003e::execute(lua_State*, int, df::viewscreen* (*)(bool)) (cb=\n    0x7ffff7c0b720 \u003cDFHack::Gui::getCurViewscreen(bool)\u003e, base=\u003coptimized out\u003e, state=0x7fffec6dbb88) at /home/pbelanger/dev/dfhack/library/include/DataIdentity.h:640\n#9  0x00007ffff79ebbea in df::function_identity\u003cdf::viewscreen* (*)(bool)\u003e::invoke(lua_State*, int) (this=\u003coptimized out\u003e, state=0x7fffec6dbb88, base=\u003coptimized out\u003e)\n    at /home/pbelanger/dev/dfhack/library/include/DataFuncs.h:271\n#10 0x00007ffff79cf2b1 in DFHack::LuaWrapper::method_wrapper_core(lua_State*, DFHack::function_identity_base*) (state=0x7fffec6dbb88, id=0x2507c60) at /home/pbelanger/dev/dfhack/library/LuaTypes.cpp:1077\n#11 0x00007ffff66a3b4e in luaD_precall(lua_State*, lua_TValue*, int) (L=L@entry=0x7fffec6dbb88, func=func@entry=0x7fffecd00790, nresults=nresults@entry=1) at /home/pbelanger/dev/dfhack/depends/lua/src/ldo.c:365\n#12 0x00007ffff66b9845 in luaV_execute(lua_State*) (L=L@entry=0x7fffec6dbb88) at /home/pbelanger/dev/dfhack/depends/lua/src/lvm.c:1134\n#13 0x00007ffff66a4038 in luaD_call(lua_State*, lua_TValue*, int)\n    (L=L@entry=0x7fffec6dbb88, func=\u003cerror reading variable: value has been optimized out\u003e, nResults=\u003cerror reading variable: value has been optimized out\u003e)\n    at /home/pbelanger/dev/dfhack/depends/lua/src/ldo.c:496\n#14 0x00007ffff66a4065 in luaD_callnoyield(lua_State*, lua_TValue*, int) (L=0x7fffec6dbb88, \n    L@entry=\u003cerror reading variable: value has been optimized out\u003e, func=\u003cerror reading variable: value has been optimized out\u003e, nResults=\u003cerror reading variable: value has been optimized out\u003e)\n    at /home/pbelanger/dev/dfhack/depends/lua/src/ldo.c:506\n#15 0x00007ffff66a3354 in luaD_rawrunprotected(lua_State*, void (*)(lua_State*, void*), void*) (L=0x7fffec6dbb88, f=\u003coptimized out\u003e, ud=\u003coptimized out\u003e) at /home/pbelanger/dev/dfhack/depends/lua/src/ldo.c:142\n#16 0x00007ffff66a43df in luaD_pcall(lua_State*, void (*)(lua_State*, void*), void*, long, long)\n    (L=L@entry=0x7fffec6dbb88, func=func@entry=0x7ffff66980b0 \u003cf_call(lua_State*, void*)\u003e, u=u@entry=0x7ffff2279360, old_top=80, ef=\u003coptimized out\u003e) at /home/pbelanger/dev/dfhack/depends/lua/src/ldo.c:727\n#17 0x00007ffff669a6ac in lua_pcallk(lua_State*, int, int, int, long, int (*)(lua_State*, int, long))\n    (L=L@entry=0x7fffec6dbb88, nargs=nargs@entry=1, nresults=nresults@entry=0, errfunc=errfunc@entry=2, ctx=ctx@entry=0, k=k@entry=0x0) at /home/pbelanger/dev/dfhack/depends/lua/src/lapi.c:968\n#18 0x00007ffff79d1ff8 in do_invoke_event(lua_State*, int, int, int) (L=0x7fffec6dbb88, argbase=\u003coptimized out\u003e, num_args=1, errorfun=2) at /home/pbelanger/dev/dfhack/library/LuaTools.cpp:1459\n#19 0x00007ffff79d2099 in dfhack_event_invoke(lua_State*, int, bool) (L=0x7fffec6dbb88, base=0, from_c=\u003coptimized out\u003e) at /home/pbelanger/dev/dfhack/library/LuaTools.cpp:1497\n#20 0x00007ffff79d3363 in DFHack::Lua::Event::Invoke(DFHack::color_ostream\u0026, lua_State*, void*, int) (out=..., state=0x7fffec6dbb88, key=\u003coptimized out\u003e, num_args=\u003coptimized out\u003e)\n    at /home/pbelanger/dev/dfhack/library/LuaTools.cpp:1552\n#21 0x00007ffff7996abb in DFHack::Core::onStateChange(DFHack::color_ostream\u0026, DFHack::state_change_event)\n    (this=0x7ffff7f60540 \u003cDFHack::Core::getInstance()::instance\u003e, out=..., event=DFHack::SC_VIEWSCREEN_CHANGED) at /home/pbelanger/dev/dfhack/library/Core.cpp:2287\n#22 0x00007ffff7997618 in DFHack::Core::doUpdate(DFHack::color_ostream\u0026, bool) (this=0x7ffff7f60540 \u003cDFHack::Core::getInstance()::instance\u003e, out=..., first_update=\u003coptimized out\u003e)\n    at /home/pbelanger/dev/dfhack/library/Core.cpp:2030\n#23 0x00007ffff799a3bc in DFHack::Core::Update() (this=0x7ffff7f60540 \u003cDFHack::Core::getInstance()::instance\u003e) at /home/pbelanger/dev/dfhack/library/Core.cpp:2073\n#24 0x00007ffff6e97202 in enablerst::async_loop() () at /mnt/data/pbelanger/dev/df_linux/libs/libgraphics.so\n#25 0x00007ffff6e974e0 in call_loop(void*) () at /mnt/data/pbelanger/dev/df_linux/libs/libgraphics.so\n#26 0x00007ffff74a7f3c in  () at /lib/x86_64-linux-gnu/libSDL-1.2.so.0\n#27 0x00007ffff74e7baf in  () at /lib/x86_64-linux-gnu/libSDL-1.2.so.0\n#28 0x00007ffff666e669 in start_thread (arg=\u003coptimized out\u003e) at pthread_create.c:479\n#29 0x00007ffff682a323 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\n(gdb) \n```","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1583733100,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NjM0MzMxMw==","github-url":"https://github.com/DFHack/dfhack/issues/1514#issuecomment-596343313"},"message":"find_union_tag is a fairly recent addition - @BenLubar would be more familiar with that than I am. It's probably a Lua script with an onStateChange handler that's triggering this, and those are unfortunately harder to track down from a traceback and disable than plugins.","files":null},{"type":3,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1583738137,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NjM2NTM2Mg==","github-url":"https://github.com/DFHack/dfhack/issues/1514#issuecomment-596365362"},"message":"Well, if it's a script it's one that DFHack activates by default. The only thing I've done is to copy the .init_example file to .init (or whatever it was) without any change of the contents to silence the complaint when DF starts.\nEven if the script is located so it can be disabled to allow people to continue, the root cause still has to be tracked down and addressed for the longer perspective.","files":null},{"type":4,"author":{"id":"fefd87bd170e69ba989c5932b26d53a6f30e8666"},"timestamp":1583777525,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MzExMTgyOTE4Nw=="},"status":2}]}