{"version":1,"ops":[{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1587797412,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDMyNzE2NDgyMTg="},"added":["idea"],"removed":[]},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1587797412,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDMyNzE2NDgyMTk="},"added":["documentation"],"removed":[]},{"type":3,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1587808893,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxOTM1NDQxMw==","github-url":"https://github.com/DFHack/dfhack/issues/1553#issuecomment-619354413"},"message":"Rather than auto generation, I'd suggest auto indication, i.e. have a tool list the ones that are missing (and where they come from), as a human brain ought to have a better chance of providing a useful description (not an excuse for poor function names, of course).\nI'd also want the tool to indicate when something is listed but not actually present (ought to be rare, but could happen if something is renamed or the documentation, for some reason, is one step ahead of the code and thus describes something that didn't make it in yet).\n\nThe Santa list would include a parameter check as well, to catch when new parameters are added/the set modified.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1587828626,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxOTM5NjU3MQ==","github-url":"https://github.com/DFHack/dfhack/issues/1553#issuecomment-619396571"},"message":"Yeah, that would work too. My thought was to have the documentation live in the C++ source files and just be collected at build time (maybe with some automation to generate the proper signatures for Lua, etc), since a similar approach seems to have worked well at keeping script docs up-to-date. I guess it wouldn't work well for modules like `dfhack.internal` in Lua that don't correspond directly to a C++ module, though.\n\nWe do also have `devel/dump-rpc` and `travis/check-rpc.py`, which check all of the registered RPC procedures at runtime and verify them against documentation in the `.proto` files, respectively. Something similar might work to check for undocumented functions, if figuring out exactly what functions are available to Lua from looking at the C++ files is hard. (Actually, you might be right that just indicating missing docs is more feasible...)","files":null}]}