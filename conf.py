#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DFHack documentation build configuration file

This file is execfile()d with the current directory set to its
containing dir.

Note that not all possible configuration values are present in this
autogenerated file.

All configuration values have a default; values that are commented out
serve to show the default.
"""

# pylint:disable=redefined-builtin

import datetime
from io import open
import os
import re
import shlex  # pylint:disable=unused-import
import sys


# -- Support :dfhack-keybind:`command` ------------------------------------
# this is a custom directive that pulls info from dfhack.init-example

from docutils import nodes
from docutils.parsers.rst import roles


def get_keybinds():
    """Get the implemented keybinds, and return a dict of
    {tool: [(full_command, keybinding, context), ...]}.
    """
    with open('dfhack.init-example') as f:
        lines = [l.replace('keybinding add', '').strip() for l in f.readlines()
                 if l.startswith('keybinding add')]
    keybindings = dict()
    for k in lines:
        first, command = k.split(' ', 1)
        bind, context = (first.split('@') + [''])[:2]
        if ' ' not in command:
            command = command.replace('"', '')
        tool = command.split(' ')[0].replace('"', '')
        keybindings[tool] = keybindings.get(tool, []) + [
            (command, bind.split('-'), context)]
    return keybindings

KEYBINDS = get_keybinds()


# pylint:disable=unused-argument,dangerous-default-value,too-many-arguments
def dfhack_keybind_role_func(role, rawtext, text, lineno, inliner,
                             options={}, content=[]):
    """Custom role parser for DFHack default keybinds."""
    roles.set_classes(options)
    if text not in KEYBINDS:
        msg = inliner.reporter.error(
            'no keybinding for {} in dfhack.init-example'.format(text),
            line=lineno)
        prb = inliner.problematic(rawtext, rawtext, msg)
        return [prb], [msg]
    newnode = nodes.paragraph()
    for cmd, key, ctx in KEYBINDS[text]:
        n = nodes.paragraph()
        newnode += n
        n += nodes.strong('Keybinding: ', 'Keybinding: ')
        for k in key:
            n += nodes.inline(k, k, classes=['kbd'])
        if cmd != text:
            n += nodes.inline(' -> ', ' -> ')
            n += nodes.literal(cmd, cmd, classes=['guilabel'])
        if ctx:
            n += nodes.inline(' in ', ' in ')
            n += nodes.literal(ctx, ctx)
    return [newnode], []


roles.register_canonical_role('dfhack-keybind', dfhack_keybind_role_func)

# -- Autodoc for DFhack scripts -------------------------------------------

def doc_dir(dirname, files):
    """Yield (command, includepath) for each script in the directory."""
    sdir = os.path.relpath(dirname, '.').replace('\\', '/').replace('../', '')
    for f in files:
        if f[-3:] not in ('lua', '.rb'):
            continue
        with open(os.path.join(dirname, f), 'r', encoding='utf8') as fstream:
            text = [l.rstrip() for l in fstream.readlines() if l.strip()]
        # Some legacy lua files use the ruby tokens (in 3rdparty scripts)
        tokens = ('=begin', '=end')
        if f[-4:] == '.lua' and any('[====[' in line for line in text):
            tokens = ('[====[', ']====]')
        command = None
        for line in text:
            if command and line == len(line) * '=':
                yield command, sdir + '/' + f, tokens[0], tokens[1]
                break
            command = line


def doc_all_dirs():
    """Collect the commands and paths to include in our docs."""
    scripts = []
    for root, _, files in os.walk('scripts'):
        scripts.extend(doc_dir(root, files))
    return tuple(scripts)

DOC_ALL_DIRS = doc_all_dirs()


def document_scripts():
    """Autodoc for files with the magic script documentation marker strings.

    Returns a dict of script-kinds to lists of .rst include directives.
    """
    # Next we split by type and create include directives sorted by command
    kinds = {'base': [], 'devel': [], 'fix': [], 'gui': [], 'modtools': []}
    for s in DOC_ALL_DIRS:
        k_fname = s[0].split('/', 1)
        if len(k_fname) == 1:
            kinds['base'].append(s)
        else:
            kinds[k_fname[0]].append(s)

    def template(arg):
        tmp = '.. _{}:\n\n.. include:: /{}\n' +\
            '   :start-after: {}\n   :end-before: {}\n'
        if arg[0] in KEYBINDS:
            tmp += '\n:dfhack-keybind:`{}`\n'.format(arg[0])
        return tmp.format(*arg)

    return {key: '\n\n'.join(map(template, sorted(value)))
            for key, value in kinds.items()}


def write_script_docs():
    """
    Creates a file for eack kind of script (base/devel/fix/gui/modtools)
    with all the ".. include::" directives to pull out docs between the
    magic strings.
    """
    kinds = document_scripts()
    head = {
        'base': 'Basic Scripts',
        'devel': 'Development Scripts',
        'fix': 'Bugfixing Scripts',
        'gui': 'GUI Scripts',
        'modtools': 'Scripts for Modders'}
    for k in head:
        title = ('.. _scripts-{k}:\n\n{l}\n{t}\n{l}\n\n'
                 '.. include:: /scripts/{a}about.txt\n\n'
                 '.. contents:: Contents\n'
                 '  :local:\n\n').format(
                     k=k, t=head[k],
                     l=len(head[k])*'#',
                     a=('' if k == 'base' else k + '/')
                     )
        mode = 'w' if sys.version_info.major > 2 else 'wb'
        with open('docs/_auto/{}.rst'.format(k), mode) as outfile:
            outfile.write(title)
            outfile.write(kinds[k])


def all_keybinds_documented():
    """Check that all keybindings are documented with the :dfhack-keybind:
    directive somewhere."""
    configured_binds = set(KEYBINDS)
    script_commands = set(i[0] for i in DOC_ALL_DIRS)
    with open('./docs/Plugins.rst') as f:
        plugin_binds = set(re.findall(':dfhack-keybind:`(.*?)`', f.read()))
    undocumented_binds = configured_binds - script_commands - plugin_binds
    if undocumented_binds:
        raise ValueError('The following DFHack commands have undocumented '
                         'keybindings: {}'.format(sorted(undocumented_binds)))


# Actually call the docs generator and run test
write_script_docs()
all_keybinds_documented()

# -- General configuration ------------------------------------------------

sys.path.append(os.path.join(os.path.abspath(os.path.dirname(__file__)), 'docs', 'sphinx_extensions'))

# If your documentation needs a minimal Sphinx version, state it here.
needs_sphinx = '1.8'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.extlinks',
    'dfhack.changelog',
]

# This config value must be a dictionary of external sites, mapping unique
# short alias names to a base URL and a prefix.
# See http://sphinx-doc.org/ext/extlinks.html
extlinks = {
    'wiki': ('http://dwarffortresswiki.org/%s', ''),
    'forums': ('http://www.bay12forums.com/smf/index.php?topic=%s',
               'Bay12 forums thread '),
    'dffd': ('http://dffd.bay12games.com/file.php?id=%s', 'DFFD file '),
    'bug': ('http://www.bay12games.com/dwarves/mantisbt/view.php?id=%s',
            'Bug '),
    'issue': ('https://github.com/DFHack/dfhack/issues/%s', 'Issue '),
    'commit': ('https://github.com/DFHack/dfhack/commit/%s', 'Commit '),
}

# Add any paths that contain templates here, relative to this directory.
templates_path = ["docs/templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
source_suffix = ['.rst']

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'DFHack'
copyright = '2015-%d, The DFHack Team' % datetime.datetime.now().year
author = 'The DFHack Team'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.

def get_version():
    """Return the DFHack version string, from CMakeLists.txt"""
    version = release = ''  #pylint:disable=redefined-outer-name
    pattern = re.compile(r'set\((df_version|dfhack_release)\s+"(.+?)"\)')
    try:
        with open('CMakeLists.txt') as f:
            for s in f.readlines():
                for match in pattern.findall(s.lower()):
                    if match[0] == 'df_version':
                        version = match[1]
                    elif match[0] == 'dfhack_release':
                        release = match[1]
        return (version + '-' + release).replace('")\n', '')
    except IOError:
        return 'unknown'

# The short X.Y version.
# The full version, including alpha/beta/rc tags.
version = release = get_version()

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# strftime format for |today| and 'Last updated on:' timestamp at page bottom
today_fmt = html_last_updated_fmt = '%Y-%m-%d'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = [
    'README.md',
    'docs/html*',
    'depends/*',
    'build*',
    'docs/_auto/news*',
    'docs/_changelogs/',
    ]

# The reST default role (used for this markup: `text`) to use for all
# documents.
default_role = 'ref'

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

rst_prolog = """
.. |sphinx_min_version| replace:: {sphinx_min_version}
.. |dfhack_version| replace:: {dfhack_version}
""".format(
    sphinx_min_version=needs_sphinx,
    dfhack_version=version,
)

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'alabaster'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {
    'logo': 'dfhack-logo.png',
    'github_user': 'DFHack',
    'github_repo': 'dfhack',
    'github_button': False,
    'travis_button': False,
    'fixed_sidebar': True,
}

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
html_short_title = 'DFHack Docs'

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = 'docs/styles/dfhack-icon.ico'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['docs/styles']

# Custom sidebar templates, maps document names to template names.
html_sidebars = {
    '**': [
        'about.html',
        'relations.html',
        'searchbox.html',
        'localtoc.html',
    ]
}

# If false, no module index is generated.
html_domain_indices = False

# If false, no index is generated.
html_use_index = False

html_css_files = [
    'dfhack.css',
]

# -- Options for LaTeX output ---------------------------------------------

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'DFHack.tex', 'DFHack Documentation',
     'The DFHack Team', 'manual'),
]

latex_toplevel_sectioning = 'part'
