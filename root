{"version":1,"ops":[{"type":1,"author":{"id":"3777bd9464a985e5d5f5348b51d9318b5e1c4118"},"timestamp":1468377138,"metadata":{"github-id":"MDU6SXNzdWUxNjUyMjM0NTc=","github-url":"https://github.com/DFHack/dfhack/issues/961","origin":"github"},"title":"isoworld on Linux doesn't seem to compile against (external) Agui due to linking errors","message":"I've been attempting to get isoworld to build against system libraries, and have run into some difficulty. I was able to fix the first two issues, but now I appear to be stuck.\n\nFirst off, for Linux, isoworld redefines and accepts the [-DSTONESENSE_INTERNAL_SO](https://github.com/DFHack/isoworld/blob/master/CMakeLists.txt#L59) argument instead of -DISOWORLD_INTERNAL_SO, which meant that I didn't even realize I was telling isoworld to build against external libraries. I think this _should_ be ISOWORLD_INTERNAL_SO for consistency with the Apple section (which uses the variable ISOWORLD_INTERNAL_DYLIB).\n\nOnce I realized that was the problem, I found that I needed to install [Agui](https://github.com/jmasterx/Agui)-- there is a bundled copy of Agui, but it doesn't seem like the cmake configuration for isoworld attempts to do anything with it non-Windows platforms, unless I am horribly confused. With ISOWORLD_INTERNAL_SO set and without Agui installed, my build was failing with the error that Agui/Agui.hpp couldn't be found. \n\nSo, I built the last release of Agui from source and installed it. I then added \"agui\" and \"agui_allegro5\" to PROJECT_LIBS and attempted to build again. I _then_ was able to get all the way through the build, but linking failed with the following notes:\n\n```\nCMakeFiles/isoworld.dir/UserInterface.cpp.o: In function `MainScreen::MainScreen(agui::Gui*)':\nUserInterface.cpp:(.text+0x20f): undefined reference to `agui::Button::setText(std::string const\u0026)'\nUserInterface.cpp:(.text+0x2bf): undefined reference to `agui::Button::setText(std::string const\u0026)'\nUserInterface.cpp:(.text+0x371): undefined reference to `agui::Button::setText(std::string const\u0026)'\nUserInterface.cpp:(.text+0x423): undefined reference to `agui::Widget::setText(std::string const\u0026)'\nCMakeFiles/isoworld.dir/UserInterface.cpp.o: In function `MainScreen::UpdateText()':\nUserInterface.cpp:(.text+0x668): undefined reference to `agui::Button::setText(std::string const\u0026)'\nUserInterface.cpp:(.text+0x6c5): undefined reference to `agui::Button::setText(std::string const\u0026)'\nUserInterface.cpp:(.text+0x753): undefined reference to `agui::Button::setText(std::string const\u0026)'\nUserInterface.cpp:(.text+0x7b3): undefined reference to `agui::Button::setText(std::string const\u0026)'\nCMakeFiles/isoworld.dir/UserInterface.cpp.o: In function `initializeAgui()':\nUserInterface.cpp:(.text+0x9fc): undefined reference to `agui::Font::load(std::string const\u0026, int, agui::FontFlags, float, agui::Color)'\nCMakeFiles/isoworld.dir/UserInterface.cpp.o: In function `MainScreen::UpdateTilesetList(MapSection*)':\nUserInterface.cpp:(.text+0xc9c): undefined reference to `agui::DropDown::addItem(std::string const\u0026)'\ncollect2: error: ld returned 1 exit status\n```\n\nI thought perhaps that some of these symbols changed upstream, but that does not seem to be the case. [Button::setText](https://github.com/jmasterx/Agui/blob/master/include/Agui/Widgets/Button/Button.hpp#L143), for example, looks the same to me.\n\nAny ideas? This is on Fedora 23, using gcc 5.3.1; I'm at a bit of a loss on how to proceed further.","files":null}]}