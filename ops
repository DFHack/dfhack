{"version":1,"ops":[{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1603061581,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDM4OTA3Nzk0NDY="},"added":["new tool"],"removed":[]},{"type":3,"author":{"id":"c8bdff833a0d45e9a1c07751adfd0917db2f83d1"},"timestamp":1603300814,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcxMzcyOTk1Mg==","github-url":"https://github.com/DFHack/dfhack/issues/1678#issuecomment-713729952"},"message":"I have another interesting case, some time later on the save I mentioned in #1677 .\nI again getting crashes after some time, but they are more random than before.\nWhat is interesting is that when I call `fix_equipment` script, the game hang few seconds and crash.\nI run the save few times. Sometimes it hang forever on `fix_equipment`, but most time it crashing.\n\nI got very short stacktrace:\n```\nThread 6 \"Dwarf_Fortress\" received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x7ffff0e16640 (LWP 52663)]\n0x00007ffff7c08760 in DFHack::Process::doReadClassName(void*) () from ./hack/libdfhack.so\n```","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1603305350,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcxMzc4NDMxOA==","github-url":"https://github.com/DFHack/dfhack/issues/1678#issuecomment-713784318"},"message":"I'm also a bit surprised that the backtrace is that short - is it from `bt`? I would expect to see at least some `liblua` calls in there. This is occurring when you call the script and before it returns control to the console, correct?\n\nAnyway, this is due to how objects with vtables are accessed from Lua - their type is looked up dynamically so that instances of subclasses are automatically exposed as their actual type, and part of this involves calling `doReadClassName()`. It's possible that, instead of containing items of the wrong type, the equipment vectors now contain null/invalid pointers or pointers to items that were deleted. This is a bit harder to check for in the script, but might be possible. I'm not sure if this could have been caused by DF itself or if the fix_equipment script caused it. About how long did it take for these new sorts of crashes to start happening?","files":null},{"type":3,"author":{"id":"c8bdff833a0d45e9a1c07751adfd0917db2f83d1"},"timestamp":1603306460,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcxMzgwMjUxNQ==","github-url":"https://github.com/DFHack/dfhack/issues/1678#issuecomment-713802515"},"message":"sorry, I forgot about `bt`, it was just instant error after crash.\nthere is full, `bt` stacktrace:\n```\n#0  0x00007ffff7c08760 in DFHack::Process::doReadClassName(void*) () at ./hack/libdfhack.so\n#1  0x00007ffff7961780 in DFHack::virtual_identity::find(void*) () at ./hack/libdfhack.so\n#2  0x00007ffff796c609 in  () at ./hack/libdfhack.so\n#3  0x00007ffff7972ba6 in  () at ./hack/libdfhack.so\n#4  0x00007ffff69e8b7c in  () at ./hack/liblua.so\n#5  0x00007ffff69e8e13 in  () at ./hack/liblua.so\n#6  0x00007ffff6a01258 in  () at ./hack/liblua.so\n#7  0x00007ffff6a04f5e in  () at ./hack/liblua.so\n#8  0x00007ffff69e9374 in lua_resume(lua_State*, lua_State*, int) () at ./hack/liblua.so\n#9  0x00007ffff797590d in  () at ./hack/libdfhack.so\n#10 0x00007ffff7976ca1 in DFHack::Lua::SafeResume(DFHack::color_ostream\u0026, lua_State*, lua_State*, int, int, bool) () at ./hack/libdfhack.so\n#11 0x00007ffff7979ebc in DFHack::Lua::RunCoreQueryLoop(DFHack::color_ostream\u0026, lua_State*, bool (*)(DFHack::color_ostream\u0026, lua_State*, void*), void*) () at ./hack/libdfhack.so\n#12 0x00007ffff7937714 in DFHack::Core::runCommand(DFHack::color_ostream\u0026, std::string const\u0026, std::vector\u003cstd::string, std::allocator\u003cstd::string\u003e \u003e\u0026) () at ./hack/libdfhack.so\n#13 0x00007ffff7938bc0 in DFHack::Core::runCommand(DFHack::color_ostream\u0026, std::string const\u0026) () at ./hack/libdfhack.so\n#14 0x00007ffff793c182 in  () at ./hack/libdfhack.so\n#15 0x00007ffff6e40c24 in std::execute_native_thread_routine(void*) (__p=0x7fffecbca2e0) at /build/gcc/src/gcc/libstdc++-v3/src/c++11/thread.cc:80\n#16 0x00007ffff69b33e9 in start_thread () at /usr/lib/libpthread.so.0\n#17 0x00007ffff6b46293 in clone () at /usr/lib/libc.so.6\n```\n\u003e About how long did it take for these new sorts of crashes to start happening?\n2-3 seasons changed in the time (I am not sure)","files":null},{"type":6,"author":{"id":"c8bdff833a0d45e9a1c07751adfd0917db2f83d1"},"timestamp":1603306460,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDA4Mzc0MDY5"},"target":"38ca641f052abea9a9af1c192fe78d9ec2fca0770797477a42aa8d367ebbdbda","message":"sorry, I forgot about `bt`, it was just instant error after crash.\nthere is full, `bt` stacktrace:\n```\n#0  0x00007ffff7c08760 in DFHack::Process::doReadClassName(void*) () at ./hack/libdfhack.so\n#1  0x00007ffff7961780 in DFHack::virtual_identity::find(void*) () at ./hack/libdfhack.so\n#2  0x00007ffff796c609 in  () at ./hack/libdfhack.so\n#3  0x00007ffff7972ba6 in  () at ./hack/libdfhack.so\n#4  0x00007ffff69e8b7c in  () at ./hack/liblua.so\n#5  0x00007ffff69e8e13 in  () at ./hack/liblua.so\n#6  0x00007ffff6a01258 in  () at ./hack/liblua.so\n#7  0x00007ffff6a04f5e in  () at ./hack/liblua.so\n#8  0x00007ffff69e9374 in lua_resume(lua_State*, lua_State*, int) () at ./hack/liblua.so\n#9  0x00007ffff797590d in  () at ./hack/libdfhack.so\n#10 0x00007ffff7976ca1 in DFHack::Lua::SafeResume(DFHack::color_ostream\u0026, lua_State*, lua_State*, int, int, bool) () at ./hack/libdfhack.so\n#11 0x00007ffff7979ebc in DFHack::Lua::RunCoreQueryLoop(DFHack::color_ostream\u0026, lua_State*, bool (*)(DFHack::color_ostream\u0026, lua_State*, void*), void*) () at ./hack/libdfhack.so\n#12 0x00007ffff7937714 in DFHack::Core::runCommand(DFHack::color_ostream\u0026, std::string const\u0026, std::vector\u003cstd::string, std::allocator\u003cstd::string\u003e \u003e\u0026) () at ./hack/libdfhack.so\n#13 0x00007ffff7938bc0 in DFHack::Core::runCommand(DFHack::color_ostream\u0026, std::string const\u0026) () at ./hack/libdfhack.so\n#14 0x00007ffff793c182 in  () at ./hack/libdfhack.so\n#15 0x00007ffff6e40c24 in std::execute_native_thread_routine(void*) (__p=0x7fffecbca2e0) at /build/gcc/src/gcc/libstdc++-v3/src/c++11/thread.cc:80\n#16 0x00007ffff69b33e9 in start_thread () at /usr/lib/libpthread.so.0\n#17 0x00007ffff6b46293 in clone () at /usr/lib/libc.so.6\n```\n\u003e About how long did it take for these new sorts of crashes to start happening?\n\n2-3 seasons changed in the time (I am not sure)","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1603314808,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcxMzg3OTQzNw==","github-url":"https://github.com/DFHack/dfhack/issues/1678#issuecomment-713879437"},"message":"Ok, that's about what I expected. 2-3 seasons is probably too long for me to easily reproduce, but I'll check out the original save when I have time.\n\nYou could try adding some debugging information to the first loop in the script to narrow down the problematic item - e.g. replace it with this, maybe:\n```lua\n  for i, element in ipairs (categories) do\n    for k = #df.global.ui.equipment.items_unassigned [element [1]] - 1, 0, -1 do\n      print(i, k)\n      print(df.global.ui.equipment.items_unassigned [element [1]] [k])\n      if df.global.ui.equipment.items_unassigned [element [1]] [k]._type ~= element [2] then\n        dfhack.printerr (\"Corrupted unassigned \" .. element [1] .. \", removing\", k)\n        df.global.ui.equipment.items_unassigned [element [1]]:erase (k)\n      end\n    end\n  end\n```","files":null},{"type":6,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1603314808,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDA4NDA4Mjk2"},"target":"fe0ebc4a891857aec026a208e6f10f8ca62a8ffe848ef2aedf95eeb7ba858862","message":"Ok, that's about what I expected. 2-3 seasons is probably too long for me to easily reproduce, but I'll check out the original save when I have time.\n\nYou could try adding some debugging information to the first loop in the script to narrow down the problematic item - e.g. replace it with this, maybe:\n```lua\n  for i, element in ipairs (categories) do\n    for k = #df.global.ui.equipment.items_unassigned [element [1]] - 1, 0, -1 do\n      print(element[1], k)\n      print(df.global.ui.equipment.items_unassigned [element [1]] [k])\n      if df.global.ui.equipment.items_unassigned [element [1]] [k]._type ~= element [2] then\n        dfhack.printerr (\"Corrupted unassigned \" .. element [1] .. \", removing\", k)\n        df.global.ui.equipment.items_unassigned [element [1]]:erase (k)\n      end\n    end\n  end\n```\n\nThis should print lines like \"FLASK 0\" followed by `\u003citem ...\u003e` if the item is ok, or a crash when you get to the first valid one. If the crash happens after an `\u003citem...\u003e` line, then the issue isn't exactly what I'm thinking of.","files":null},{"type":6,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1603314818,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDA4NDA4MzQ0"},"target":"fe0ebc4a891857aec026a208e6f10f8ca62a8ffe848ef2aedf95eeb7ba858862","message":"Ok, that's about what I expected. 2-3 seasons is probably too long for me to easily reproduce, but I'll check out the original save when I have time.\n\nYou could try adding some debugging information to the first loop in the script to narrow down the problematic item - e.g. replace it with this, maybe:\n```lua\n  for i, element in ipairs (categories) do\n    for k = #df.global.ui.equipment.items_unassigned [element [1]] - 1, 0, -1 do\n      print(element[1], k)\n      print(df.global.ui.equipment.items_unassigned [element [1]] [k])\n      if df.global.ui.equipment.items_unassigned [element [1]] [k]._type ~= element [2] then\n        dfhack.printerr (\"Corrupted unassigned \" .. element [1] .. \", removing\", k)\n        df.global.ui.equipment.items_unassigned [element [1]]:erase (k)\n      end\n    end\n  end\n```\n\nThis should print lines like \"FLASK 0\" followed by `\u003citem ...\u003e` if the item is ok, or a crash when you get to the first invalid one. If the crash happens after an `\u003citem...\u003e` line, then the issue isn't exactly what I'm thinking of.","files":null},{"type":3,"author":{"id":"c8bdff833a0d45e9a1c07751adfd0917db2f83d1"},"timestamp":1603317745,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcxMzkwMjQzMw==","github-url":"https://github.com/DFHack/dfhack/issues/1678#issuecomment-713902433"},"message":"2-3 seasons changed in the time from last save I uploaded for #1677 . But for this save it happens after a 1.5 minutes. I can upload it too if you decide it's needed.\n\nI checked and issue happen before, looks like now the print line make the crash:\n```\n...\nARMOR\t40\n\u003citem_armorst: 0x7fffc05aebc0\u003e\nARMOR\t39\n\u003citem_armorst: 0x7fffc05aead0\u003e\nARMOR\t38\n/home/psychowico/.dwarffortress/dfhack: line 89: 90739 Aborted                 (core dumped) setarch \"$setarch_arch\" -R env LD_PRELOAD=\"$PRELOAD_LIB\" ./libs/Dwarf_Fortress \"$@\"\n```\n\nEventually I do not understand something, I did not touch lua from years.","files":null},{"type":6,"author":{"id":"c8bdff833a0d45e9a1c07751adfd0917db2f83d1"},"timestamp":1603317745,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDA4NDIwMjgy"},"target":"ad76a9ad59728cbd3ce86179acbf6ee14dd0ef6473beea362fdac3b1a1818620","message":"2-3 seasons changed in the time from last save I uploaded for #1677 . But for this save it happens after a 1.5 minutes. I can upload it too if you decide it's needed.\n\nI checked and issue happen after `ARMOR 38` , looks like now the print line make the crash:\n```\n...\nARMOR\t40\n\u003citem_armorst: 0x7fffc05aebc0\u003e\nARMOR\t39\n\u003citem_armorst: 0x7fffc05aead0\u003e\nARMOR\t38\n/home/psychowico/.dwarffortress/dfhack: line 89: 90739 Aborted                 (core dumped) setarch \"$setarch_arch\" -R env LD_PRELOAD=\"$PRELOAD_LIB\" ./libs/Dwarf_Fortress \"$@\"\n```\n\nEventually I do not understand something, I did not touch lua from years.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1603326118,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcxNDA0NDIwOA==","github-url":"https://github.com/DFHack/dfhack/issues/1678#issuecomment-714044208"},"message":"Yeah, a copy of the new save might also be useful - I'm still not sure if the new issue was caused by running the script or not.\n\nThe print() call crashing was what I expected (I would be more confused if it _hadn't_ crashed). This is something specific to our C++\u003c\u003eLua layer - printing a pointer to a DF object involves looking up its type, which in the case of some classes (like `item` and its subclasses) involves looking up the object's RTTI information, which requires dereferencing the pointer and will crash if the pointer is invalid.","files":null},{"type":3,"author":{"id":"c8bdff833a0d45e9a1c07751adfd0917db2f83d1"},"timestamp":1603361182,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcxNDM4NDU2OA==","github-url":"https://github.com/DFHack/dfhack/issues/1678#issuecomment-714384568"},"message":"The save: https://dffd.bay12games.com/file.php?id=15264\nI found something interesting.\nIt looks like it is related to caravan leaving the area. Run the save, the screen should be centered on the caravan.\nWait it leave the area and the run `fix_equipment` script. Before the caravan leave the area, it working.","files":null}]}