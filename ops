{"version":1,"ops":[{"type":3,"author":{"id":"8aef4ad26d2b4762925d15b4fa91036a55d7d34c"},"timestamp":1581610058,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU4NTgzNTQwNQ==","github-url":"https://github.com/DFHack/dfhack/issues/1495#issuecomment-585835405"},"message":"\u003e Oh, I guess that could be it, but I still don't really have a good explanation. Maybe MAX_LAYERS is only getting inlined on release builds?\n\nI looked at the usage of MAX_LAYERS, and tried that:\n```diff\n--- a/library/modules/MapCache.cpp\n+++ b/library/modules/MapCache.cpp\n@@ -1231,7 +1231,7 @@ MapExtras::MapCache::MapCache()\n \n         memset(biomes[i].layer_stone, -1, sizeof(biomes[i].layer_stone));\n \n-        for (size_t j = 0; j \u003c std::min\u003csize_t\u003e(BiomeInfo::MAX_LAYERS,layer_mats[i].size()); j++)\n+        for (size_t j = 0; j \u003c std::min\u003csize_t\u003e(size_t(BiomeInfo::MAX_LAYERS),layer_mats[i].size()); j++)\n         {\n             biomes[i].layer_stone[j] = layer_mats[i][j];\n\n```\n\nAnd it fixed the issue. My understanding, which can be wrong, is that std::min takes a lvalue reference so MAX_LAYERS need to be defined. If I cast MAX_LAYERS, the casted rvalue is created at compile time, and MAX_LAYERS no longer needs to be a defined.\n\nIn some setup, std::min may be inlined and optimized such that a lvalue is no longer needed.\n\nUnless you want to be very careful to never use MAX_LAYERS as an lvalue, I think it is best to define it.","files":null},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1581702855,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDMwMzk2MTUwMTE="},"added":["bug"],"removed":[]},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1581702855,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDMwMzk2MTUwMTI="},"added":["build"],"removed":[]},{"type":4,"author":{"id":"fefd87bd170e69ba989c5932b26d53a6f30e8666"},"timestamp":1581751379,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MzA0MDcyOTI4Mw=="},"status":2}]}