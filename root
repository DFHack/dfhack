{"version":1,"ops":[{"type":1,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1524307656,"metadata":{"github-id":"MDU6SXNzdWUzMTY0ODE1NjQ=","github-url":"https://github.com/DFHack/dfhack/issues/1260","origin":"github"},"title":"DFHack console can execute removed Lua functions","message":"I don't where this issue originates. It might a a DFHack or Lua issue. If you have a script that calls a widgets.List callback function that doesn't exist the script fails with a rather unhelpful error message. However, if the function is there in the Lua script file, the script is executed and exited normally, then the Lua file is modified to remove the function and you execute the script again, the script will call the no longer existing function without issues, but if DF is exited and restarted, the script fails (as there's no cached copy of the removed function).\n\nThe following script illustrates the issue by performing the following steps:\n- Run the script. It fails (as expected). This step is not strictly necessary.\n- Edit the script to remove the comments in front of the Ui:MFP_Callback function and save the file.\n- Run the script. It brings up a DFHack screen. Exit with \u003cESC\u003e\n- Edit the script to comment out the function again and save the file.\n- Run the script. It does behave as if the function was still there.\n\nI don't think it's an issue specific to widgets, and it might not even be restricted to callbacks.\n(MFP = Minimal Faulty Program, by the way).\nI'm on Windows 10.1, if  the OS is of importance, and I made and tested the MFP with DFHack 0.44.09-r1.\n\n```\nlocal gui = require 'gui'\nlocal widgets = require 'gui.widgets'\n\nfunction MFP ()\n  Ui = defclass (Ui, gui.FramedScreen)\n  Ui.ATTRS = {\n    frame_style = gui.GREY_LINE_FRAME,\n    frame_title = \"MFP\"\n  }\n\n  --============================================================\n \n  function Ui:init ()\n    self.stack = {}\n    self.item_count = 0\n    self.keys = {}\n    local Main_Page = {}\n    \n    Main_Page.List =\n      widgets.List {view_id = \"MFP\",\n                    choices = {},\n                    frame = {l = 1, t = 1, yalign = 0},\n                    text_pen = COLOR_DARKGREY,\n                    cursor_pen = COLOR_YELLOW,\n                    inactive_pen = COLOR_GREY,\n                    on_select = self:callback (\"MFP_Callback\")}\n    local mainPage = widgets.Panel {\n      subviews = {Main_Page.List}}\n                \n    local pages = widgets.Pages \n      {subviews = {mainPage},view_id = \"pages\",\n                   }\n\n    pages:setSelected (1)\n    Focus = \"Main\"\n      \n    self:addviews {pages}\n  end\n\n  --==============================================================\n\n--  function Ui:MFP_Callback (index, choice)\n--  end\n  \n  --==============================================================\n\n  function Ui:onInput (keys)\n    if keys.LEAVESCREEN_ALL or\n       keys.LEAVESCREEN then\n        self:dismiss ()\n    end\n  end\n  \n  --==============================================================\n\n  function Show_Viewer ()\n    local screen = Ui {}\n    persist_screen = screen\n    screen:show ()\n  end\n\n  --============================================================\n\n  Show_Viewer ()  \nend\n\nMFP ()```","files":null}]}