{"version":1,"ops":[{"type":1,"author":{"id":"f7b5a7930d0e1264ae1e4a774b03a7e78c2b7858"},"timestamp":1472037893,"metadata":{"github-id":"MDU6SXNzdWUxNzI5MjcwMzY=","github-url":"https://github.com/DFHack/dfhack/issues/985","origin":"github"},"title":"Remote control server as an API for custom interfaces","message":"_This issue is to prompt discussion.  A concrete proposal will be drafted following a range of comments, as I expect implementation will be pretty tricky._\n\nThere are many programs that do or would like to support remote control of DF - from simple ssh into curses-mode, through dfterm3 and df-anywhere, to df-ios and perhaps someday Armok Vision. To date, these programs have - with the notable exception of DF-iOS - simply passed keypresses along to DF.  While this _works_, it also locks in the present keyboard-driven, nested-menu UI style.  I and most regular players like this, but many others are entirely put of DF! So to minimise duplication of effort, I propose that DFHack should  develop a server plugin that can translate external calls into actions in the DF interface.  This would complement `remotefortressreader` (which serves DF state), and between them custom interfaces for DF would finally be within reach.\n\nIf a few - admittedly difficult - properties can be maintained, this will enable a wide range of new tools and playstyles.\n- platform-agnostic:  it should be usable from any language,   local or remote applications, etc.  JSON and sockets seem good.\n- stateless: implementation would have to have to go to the main map between  command-transactions I think, to avoid all the global state problems. Commands would eg. always refer to map coordinates or unit ID, not cursor coords - the client-side UI might not even have a cursor!\n- transactional: if commands are batched into logical chunks and do not depend on state, this largely solves multiplayer DF as well as unreliable connections.  When independent actions don't interfere, players can work similtaneously on different parts of the map (cf @warmist's old multiplayer idea).\n- error-aware: commands should always return a status, especially on error.  Suffice to say that commands should return an error instead of putting DF in an invalid state, or if they are not executable for any reason (eg placing chairs, and none are available; attempting to change labors on a deceased unit; etc.).  This does not need to be perfect, but should include sufficient reporting to be useful to client applications for the player interface.\n- well-defined: if the total API is well-defined (eg as all allowable JSON in each direction), then middleware can be written to add functions such as user action permissions in multiplayer, retry-on-error handling, and so on.  These features are beyond scope of the plugin, but would be enabled by a good design.\n\nQuestions or comments would be awesome :smile:","files":null}]}