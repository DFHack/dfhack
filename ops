{"version":1,"ops":[{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1428269685,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDI3MzczODUzNA=="},"added":["idea"],"removed":[]},{"type":3,"author":{"id":"be523fe0f95fc478bda36c722e6f106f8f7a41b5"},"timestamp":1441376153,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDEzNzc0Nzk4Nw==","github-url":"https://github.com/DFHack/dfhack/issues/594#issuecomment-137747987"},"message":"What does this mean?","files":null},{"type":3,"author":{"id":"fefd87bd170e69ba989c5932b26d53a6f30e8666"},"timestamp":1441377944,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDEzNzc1NTU0OA==","github-url":"https://github.com/DFHack/dfhack/issues/594#issuecomment-137755548"},"message":"@expwnent \nIf I'm designating a huge block of bedrooms and I accidentally put a huge dig designation over the whole thing, I'd like to be able to undo that dig designation and go back to the bedrooms that I was laying out.","files":null},{"type":3,"author":{"id":"be523fe0f95fc478bda36c722e6f106f8f7a41b5"},"timestamp":1441378109,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDEzNzc1Njc3OA==","github-url":"https://github.com/DFHack/dfhack/issues/594#issuecomment-137756778"},"message":"We could have a plugin keep track of a copy of the dig designations that it carefully updates with the second-most-recent dig designation. I can see how that would be useful.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1441384397,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDEzNzc4NDI5MQ==","github-url":"https://github.com/DFHack/dfhack/issues/594#issuecomment-137784291"},"message":"I've done some work on a plugin like this, and I'm fairly sure it can already undo at least the most recent designation, although the interface is largely incomplete.","files":null},{"type":3,"author":{"id":"6a08ce56ad514124fb3932e81e3105edd8abfb04"},"timestamp":1446841684,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NDUyMzA5Ng==","github-url":"https://github.com/DFHack/dfhack/issues/594#issuecomment-154523096"},"message":"I really want the Undo feature.  That is something I've wanted since day 1 of playing DF.\n\nI have some further ideas for extensions to the designation UI, which I very much like to see in the game and believe might sit logically with Undo as part of an Enhanced Designations plugin.  \n\n@lethosor have you made any progress with your plugin?  If not, is your in-progress Undo code available for me to take a look at to see if I can continue it and get Undo functional?  And then perhaps I can also make a start on some of the below.  \n\nI make no promises that I'm yet capable of doing any of this, let alone all of it :)  But assuming lethosor has no imminent plans to release Undo, I would like to at least have a look at what already exists, and see what I might be able to add.  If Undo is partially done and primarily needing a UI, that might be a good base for me to start.  Especially as I imagine a lot of the code needed for my suggestions below must already exist within _digfort_ - or at least the concepts.\n\n**Ideas for the Designations UI**\n\nNot all suggestions will be applicable to all types of Designations.\n1. Provide an optional, opaque, live updated box-select display for Designations, like DFHack's Buldings-\u003eConstruction box select.\n   - And with the same hollow/solid choice (hollow might be useful for placing corridors, or creating a border to work within.)\n2. Designation Filters: Priority Only; Overwrite Only; Don't Overwrite.  With optional Type(s).\n   - Priority Only : set a different priority on existing designations, leaving their type unchanged and not designating anything new.\n   - Overwrite Only : only place designations in the selected area where designations already exist.\n     - Example usage: Replacing mistaken designations which are the right layout but the wrong type, eg where user accidentally designated a complex layout as entirely stairs instead of Mining!\n   - Don't Overwrite : only place designations in the selected area where designations do not already exist.  \n     - Example usage: Designate floor space around designated stairs: When digging out a new level, I often start by designating the stairwells, ensuring they're in line with surrounding Z levels. Then I build corridors/rooms relative to them.  This takes multiple careful box selects; with Don't Overwrite, I could place surrounding floors much quicker without ever overwriting the stairs.\n   - Optional Filter Type Selector\n     - Specify that Priority Only / Overwrite / Don't Overwrite will only affect designations of a specified type. \n     - A multi-select filter, one key per type: Mine; Up Stairs; Down Stairs; Up/Down Stairs; All Stairs; Channel; Remove Up Stairs/Ramp.\n3. Copy/Paste : Somewhat a duplicate of Quickfort / _blueprint_ / _digfort_, but being available via Designate has usability benefits; especially as new DFHack users may not have heard of Quickfort and/or may not investigate/use console-only features.\n   - Choose Copy, box select an area containing designations.\n     - Nice-to-have: visually indicate the copied designations until Paste or Cancel Copy are chosen.\n     - Allow across Z levels as well?  Ideally yes, in which case display a count of Z levels (\"Copied designations on 4 Z Levels.\")\n   - Choose Paste, select one square as top left of pasted area, a box appears indicating the size of the copied area, press Confirm: copied designations are laid out in the indicated area\n     - If allowed across multiple Z levels, move view to bottom right of lowest Z level, display box on all Z levels and have a visible message \"Pasting designations on 4 Z levels\".\n     - Ideally check for and warn about overwriting existing designations and when designations cannot be fully placed (pasting over partially dug area; size of copy extends beyond edge of map relative to paste position; paste area contains known damp/warm stone)\n       - Allow specifying if these conditions are OK or not: Warn (default); Always Disallow; Always Proceed.\n   - Nice-to-have:  Filtered Copy/Paste with Priority changer\n     - The same UI that allows selecting Types for item 2 above could be used for an optional Filtered Copy and a Filtered Paste\n       - Examples usage: only copy designations of Stairs, for pasting on lower Z levels to create the stairwells; copy everything, paste everything one Z level below, paste only stairs on lower Z levels; copy only the Priority 2 designations; on paste change all designation priorities to 5.\n   - Nice-to-have: Paste repeat count, horizontally or vertically\n     - For example, \"Repeat Down 5 times\" to copy stairwells down multiple levels;  \"Repeat East 3 times\" to duplicate a uniform bedroom layout.\n   - Nice-to-have: Save/Load\n     - Save the designations to a file for later recall\n     - Maybe simply a UI to existing plugin _blueprint_?  \n     - Indeed, maybe the whole Copy/Paste feature could be achieved with existing code in _blueprint_ and _digfort_?  As a base anyway.\n4. Auto Smooth/Engrave: specify that Smoothing and/or Engraving should happen automatically after an area is Mined or Smoothed:\n   - DFHack records the locations, checks on a timer to see when digging/smoothing is complete, then automatically designates the smoothing/engraving. If Designations disappear, cancel for that/those tile(s).\n   - For Mining, add \"Automatically Smooth\" and \"Automatically Smooth+Engrave\" options\n   - For Smooth, add \"Automatically Engrave\" option.\n   - Configuration: \"Designate Smooth/Engrave when whole Mine/Smooth Designation is complete\" vs \"Designate each tile as it becomes ready.\"  - possible performance issues with latter?\n5. Save settings: for existing Alt+M Box Select mode, and settings for features mentioned above: optionally save the user's current setup into the save (and/or separate file) and set them on re-load.  \n   - Also applies to Constructions : Planning mode enabled/settings; Box select on; etc, so perhaps a global DFHack Settings plugin would be most ideal.","files":null},{"type":3,"author":{"id":"6a08ce56ad514124fb3932e81e3105edd8abfb04"},"timestamp":1446841969,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NDUyNDI3Mg==","github-url":"https://github.com/DFHack/dfhack/issues/594#issuecomment-154524272"},"message":"I have one more item which I will put separately as it's relates not only to Designations, but also Building/Constructions:\n1. A new Place Stairs mode, which is under Designations but spans Designations and Building:  Choose Create Stairs, select area across z-levels, and it Designates stairs on undug ground (as usual), but Constructs stairs on dug ground.  \n   - So I can create a new stairwall en-masse down multiple Z levels which may or may not be dug out in the area defined.  It's tedious making a new deep stairwell across 20 Z levels, where half are already dug out requiring flipping through them doing 10 x Construct Stairs in the right place.\n   - with configuration to specify:\n     - Stairs type\n       - Options: Down only, Up only, Up/Down only, Smart Up/Down\n       - Smart Up/Down = Up/Down everywhere that has a roof and floor, otherwise Down at the top, Up at the bottom; mostly to avoid placing Up/Down stairs on the top Z level which isn't normally allowed\n     - building material to use for constructed stairs\n   - A simpler alternative:  don't have the combined Designate+Construct mode, instead add a new Construct-Only mode for stairs which can span Z levels\n     - Not quite as convenient as all-in-one, but still far more convenient than now: requiring two quick operations to make one large stairwell, first Designate across Z levels, then Construct across the same multi-Z-level area to fill in the blanks with Constructions.\n     - Has the advantage of being cleaner from a code/logical perspective, affecting only Buildings/Constructions; the Designate+Construct mode would be creating Constructions from the Designate menu, which is unprecedented (although you can already Remove Constructions from Designate.)\n     - Has the disadvantage of not being quite as convenient for the user.  Also perhaps has the disadvantage that Building Construction across Z levels is not normally allowed by the game?  I don't know if that makes it harder to implement?  So I'm wondering it might make implementation easier to base this in Designations because it already allows multi-Z-level select.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1446849758,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NDU2NTc4Mw==","github-url":"https://github.com/DFHack/dfhack/issues/594#issuecomment-154565783"},"message":"Wow. I should make that a task list when I get a chance.\nWhat I have should be in the designation-history branch in my fork, if you want to take a look. I'm trying to implement the UI in Lua to cut down on development time, but it might be a little complicated to figure out if you're not familiar with the Lua API.","files":null},{"type":3,"author":{"id":"c1566abe3d2bcce0ca1ce2256f1162ee88285b53"},"timestamp":1446880838,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NDY0ODYxNw==","github-url":"https://github.com/DFHack/dfhack/issues/594#issuecomment-154648617"},"message":"Really like the sound of that plan. Ambitious but damn that would be useful as hell for people who don't use autofort/quickfort stuff.\n\nOk, just poked around a bit out of curiosity.\n\nWent up to the top left corner of a hidden and undug layer, designated the closest square there to be dug.\n\nHit probe, got block addr: 0xe0e50810\n\nWent in and checked a few things looking for it and found it.\n\ndf.global.world.map.map_blocks \u003e whichever entry matched the hex code\n\nNext screen is 16 entries for that block from left to right, picked the second one.\n\nNext screen is 16 entries for that column from top to bottom, picked the second one.\n\nhttp://i.imgur.com/3lTfHQq.png\n\nBoom.\n\nIf you replicate the flags there from all 16x16 entries in one block over to another adjacent block I'm pretty sure it'll do it straight up.\n\nYep, just poked around at it.\n\nhttp://i.imgur.com/2hkW9Qz.png\n\nI put those designations down with gm-editor, the dig value goes from 0 to I dunno, I think setting it to 1 is mining, 3 was up-down I think, 5 was up-ramp, 2 was the down-stair I think?\n\nYou may not be able to tell, but the leftmost designations there are actually up against the very border of the map, so, make of that what you will.","files":null},{"type":3,"author":{"id":"88b79c31fdfd52952dafcabb16168259734368cc"},"timestamp":1446935740,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NDc1ODY2MA==","github-url":"https://github.com/DFHack/dfhack/issues/594#issuecomment-154758660"},"message":"@maxthyme there are lua methods and c++ interface for doing stuff like designations. E.g. in lua dfhack.maps.getTileFlags returns both ocupancy and designations. Then you can change them as you wish.","files":null},{"type":3,"author":{"id":"c1566abe3d2bcce0ca1ce2256f1162ee88285b53"},"timestamp":1446937459,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NDc2MTY4OA==","github-url":"https://github.com/DFHack/dfhack/issues/594#issuecomment-154761688"},"message":"I did know that part, but the column/rows layout of the map_blocks seems like it would be conducive to a simple copy-paste type operation, which is a lot easier than I thought it would be.","files":null},{"type":3,"author":{"id":"f7b5a7930d0e1264ae1e4a774b03a7e78c2b7858"},"timestamp":1446976664,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NDc5NjcwMA==","github-url":"https://github.com/DFHack/dfhack/issues/594#issuecomment-154796700"},"message":"This looks very interesting!  All of these ideas would be great, though they may take a while to implement I imagine.  #625 and #481 seem to be related, especially if the `dig` plugin is getting a general overhaul.","files":null},{"type":3,"author":{"id":"6a08ce56ad514124fb3932e81e3105edd8abfb04"},"timestamp":1447804133,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NzU0NzU5Mw==","github-url":"https://github.com/DFHack/dfhack/issues/594#issuecomment-157547593"},"message":"Tonight I started looking at @lethosor 's [\"Designation History\" code](https://github.com/lethosor/dfhack/blob/designation-history/plugins/designation-history.cpp).\n\nIt's superb!  It is already a fast, completely functional, multiple-level undo designation mode.  It's only unfinished in the sense that he had also planned to implement a Lua UI which would display an undo history, allowing the user to get a description of what would be undone at a given step.  Which to my mind is an additional feature rather than a base requirement.\n\nAside from the intended UI not existing, the rest is nearly perfect.  It needs some documentation, I've found one bug, and ideally it would be good (and I am fairly sure, quite simple) to add a Redo option (undo the undo; I expect this was going to be part of the history UI? But in the absence of that it could be a separate key.) Once those things are done I feel it could be very usefully released as-is.\n\nI'm now going to have a look at fixing the one bug I've found, testing for any more, and adding the Redo option.  After that I'll write a doc paragraph.  I'll also see if I can get anywhere with a History UI but that will take me much longer.\n\nWhat do you think to releasing the plugin without the history, maybe in r5?  Personally I think it is already extremely useful and definitely meets the stated requirement.  A history UI would be nice but not essential - especially as having a Redo option will make using Undo a reversible, largely risk-free procedure.  The history could then follow in a subsequent release.\n\n(As an aside: this really makes me wonder what other treasures you might have hidden in your fork, @lethosor ? :) )","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1447810209,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NzU2ODAyNA==","github-url":"https://github.com/DFHack/dfhack/issues/594#issuecomment-157568024"},"message":"I added a basic UI that supports undoing and redoing designations (and zooming to them), although it doesn't highlight them on the map yet. I also want to at least support cursor movement and make sure it works with long lists.\n(I rebased my designation-history branch on the current develop branch, so keep in mind that you'll have to update any local branches that pointed to the old commit(s).)","files":null},{"type":3,"author":{"id":"6a08ce56ad514124fb3932e81e3105edd8abfb04"},"timestamp":1447873531,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NzgyNDMxNQ==","github-url":"https://github.com/DFHack/dfhack/issues/594#issuecomment-157824315"},"message":"Wow. Really nice, thanks.\n\nI've just pushed a couple of commits to my fork that make the following UI changes:\n- The number of displayed rows is now dynamically sized according to the screen resolution, so it looks good on both minimum res and larger sizes.\n  - It doesn't resize if the window changes size with the list displayed, but I don't think that matters\n  - The maximum number of history rows shown will be 18 on a 25 row screen; at 1920x1200 I get 63 rows.\n- The history list now scrolls (before it didn't display more than 21 entries - they were there, but invisible.)\n- PageUp/PageDown now scrolls in page-sized chunks, like vanilla DF scroll\n- Each history line item is now numbered, as without that it was impossible to work out where one was in the list\n- Though I've also added a page counter at the bottom, which makes the per-item numbering less essential.\n- Minor formatting on list output, to give a neatly aligned list in the majority of cases: some designation names may be truncated when the sidebar is at its smaller size, but all are still understandable (and truncating is common in vanilla DF with small sidebar.)  \n\n[GitHub comparing changes on designation-history.lua](https://github.com/lethosor/dfhack/compare/designation-history...TheBloke:designation-history)\n\nCould you take a look and let me know what you think?  I didn't submit a pull request yet but can do that if you're happy.  \n\nSome other points:\n- I have tested lists up to 200 items with no problems.  I will continue testing more.\n- What did you mean by supporting cursor movement?\n- I think there needs to be a way to manually clear the list, and perhaps it should also clear automatically over time?\n  - At present it will show all designations going back to the start of the session, which could be a massive list, including dug designations that cannot be undone and serve no purpose\n  - Not sure about an auto-clear: on the one hand, showing old, long-since dug designations might be confusing and is certainly unnecessary.  On the other hand, on what basis could it be auto cleared?   The only good auto clear would be to auto clear dug designations, but that's probably going to need a background timer to scan for them?  Which wouldn't be worth it.  Probably just a manual clear is fine for now.\n- Personally I would like to see a Redo option on Alt-r that's thus available without accessing the history UI, for quicker/easier access.  Not essential, but nice to have.\n- History UI should visually indicate when designations are undone, eg changing the colour of that row\n\nI should be able to do most of that, though not as quick as you obviously!","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1447881789,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1Nzg2ODE1OA==","github-url":"https://github.com/DFHack/dfhack/issues/594#issuecomment-157868158"},"message":"Nice! Regarding cursor movement, I meant moving the map around with the primary cursor keys (which there are many of).","files":null},{"type":3,"author":{"id":"6a08ce56ad514124fb3932e81e3105edd8abfb04"},"timestamp":1447987364,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1ODI2Mjg4MA==","github-url":"https://github.com/DFHack/dfhack/issues/594#issuecomment-158262880"},"message":"New commit done.  [Diff from lethosor's branch to mine](https://github.com/lethosor/dfhack/compare/designation-history...TheBloke:designation-history)\n\nChanges:\n- Added the ability to clear part or all of the history list\n  - cpp exposes a method to lua enabling a range to be deleted and the current index updated appropriately\n- UI: primarily cursor keys now scroll the map while the history UI is visible\n- UI: Delete history list options:\n  - d = delete current row, or all marked rows (see below)\n  - D = delete entire list (no confirmation/warning at this time.)\n- UI: Added ability to mark/unmark rows with SELECT\n  - Marked rows appear in red/light red when the active cursor row\n  - Marked rows can be:\n    - Deleted together ( 'd' key changes from 'delete row' to 'delete marked rows')\n    - Mass-undone / Mass-redone\n  - Menu changes appropriately when rows are selected to indicate Marked Row key options\n- Number of displayed rows now sizes dynamically with window resizes\n  - As before +  it now also auto-updates if you re-size the window while the UI is active, so it's always correct for the visible window\n- General refactor of the code, separated into two classes: HistScreen for displaying stuff/handling input, HistRows for holding the history and managing rows, pagination, etc\n- UI key menu is now always displayed, even when no history rows, but it is 'greyed out' when there is no history - I prefer the menu always being visible so that a user with no designations can still see what would be possible/what the screen is for\n\nFurther points:\n- The menu probably needs a bit more work in terms of optimal display/positioning of the new options I added\n- An outstanding bug:  when the history UI is used to undo, the plugin's index is not updated; this can cause its highlighting of Alt-U/Alt-R to be out of sync with what's actually been undone\n  - Not a big deal particularly, it just means that Alt-U might be highlighted when the current index is already undone; actually pressing alt-u causes no problem and causes the key display to come back in sync\n- Delete all / delete marked might need a confirmation stage \"are you sure\"\n- The ability to mark rows perhaps only has fairly minor utility in the context of Undo/Redo/delete history, but I hope to make this a base for some of the other features I mentioned above like copy/paste, ie Designation History later becomes Enhanced Designations\n  - Currently marked rows are not saved between accesses of the History UI, which I would change once it becomes a more useful feature","files":null},{"type":3,"author":{"id":"6a08ce56ad514124fb3932e81e3105edd8abfb04"},"timestamp":1449501605,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE2MjU1NTA1NQ==","github-url":"https://github.com/DFHack/dfhack/issues/594#issuecomment-162555055"},"message":"@lethosor \n\nI haven't looked at this in a little while, RL intrusions etc.  And now I'm going away, tomorrow to Friday.  When I get back I am expecting to dedicate some good time to getting back into this plugin and hopefully get some more features added, perhaps in time for next release.\n\nI wanted to check two things with you, for when I get back (no rush on reply, I won't be able to follow up on answers until Saturday earliest):\n- **Plugin name**\n  - In a commit log discussion I mentioned that I hoped to extend this existing plugin to add my intended further features (as per my first post in this thread), and you said that was fine.  You then asked if I thought to rename the plugin.\n  - Short answer: yes, if that's OK then I believe the best name for the plugin would be Enhanced Designations / Designation Enhance (plugin name: designation-enhance, and/or perhaps an abbreviated name).\n  - That would comprise:\n    - Designation History\n    - Designation Copy + Paste\n    - Designation Filtering (don't overwrite existing; only overwrite; change priority; etc.)\n    - And hopefully more, as per my original list\n  - So if you could confirm that's fine with you, I will assume that that's the plan\n    - If you don't like Designations Enhance then really I'm fine with most any name - except I do think it should change from Designation History:  while that is appropriate for Undo and perhaps also Copy and Paste, it doesn't really fit for Filtering and any of the other ideas.\n  - I will plan to have each feature enabled individually:  `designation-enhance copypaste enable`;  `designation-enhance filtering enable`; etc, so that it's not an all or nothing thing.\n  - Perhaps with an abbreviated option for easier CLI:  d-e?  designate-e?\n- **UI issue: the current UI does not show the map in TWBT**\n  - I did all my original testing/development with vanilla DFHack, no TWBT, thinking that would be the cleanest environment for testing.\n  - So I've only now noticed that with TWBT enabled, the history UI doesn't show the map.\n    - A user opening history UI with TWBT enabled will see the sidebar history, but the entire map area is blank.  If the user does undo/redo of history entries, he cannot see the result until he closes the history.\n    - This is rather annoying and somewhat reduces the effectiveness of the UI.\n  - Do you know if this can be fixed?  Is it an issue you've experienced with other Lua UIs and have been able to resolve?\n  - I ask in case you already know what's wrong: if not, please don't worry about spending time, when I am back I can do some digging and experimenting (looking at other UIs to find one that works fully in TWBT and copying how it sets up its UI.)\n\nThanks very much in advance!  I hope to be able to get some more commits done fairly soon after getting back.  (Including finally finishing off those build scripts - sorry for the delays!)","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1449509356,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE2MjYwMDY0Mg==","github-url":"https://github.com/DFHack/dfhack/issues/594#issuecomment-162600642"},"message":"TwbT breaks lots of things, although hopefully hooking support can address some of those issues.\nIf you wanted to be creative, maybe something like designations++ or designate++ would work, although I don't know if that would be an acceptable filename for the plugin itself.","files":null}]}