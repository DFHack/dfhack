{"version":1,"ops":[{"type":1,"author":{"id":"41007559e74fa0638bf8bfc0dd1caa1fcff75fb0"},"timestamp":1309887239,"metadata":{"github-id":"MDU6SXNzdWUxMTY4NzE5","github-url":"https://github.com/DFHack/dfhack/issues/84","origin":"github"},"title":"PATCH: probe improvements","message":"Some improvements to dfprobe:\n1. Block flags listed\n2. Blank lines between flags output\n3. Command line flags to output only a few things:\n   - -b prints only block flags\n   - -d prints only designations flags\n   - -o prints only occupancy flags\n   - -t prints only tile info\n   - -m prints only misc info\n4. If the game has no cursor then dfprobe gives an error message about it rather than exiting silently.\n\n```\n--- ORIG-tools/supported/probe.cpp      2011-05-28 01:18:50.000000000 -0700\n+++ tools/supported/probe.cpp   2011-07-05 08:59:54.000000000 -0700\n@@ -13,15 +13,101 @@\n #define DFHACK_WANT_TILETYPES 1\n #include \u003cDFHack.h\u003e\n #include \u003cdfhack/extra/MapExtras.h\u003e\n+#include \u003cxgetopt.h\u003e\n #include \u003cdfhack/extra/termutil.h\u003e\n\n+bool parseOptions(int argc, char **argv, bool \u0026showBlock, bool \u0026showDesig,\n+                  bool \u0026showOccup, bool \u0026showTile, bool \u0026showMisc)\n+{\n+    // With no options set, show everything.\n+    showBlock = true;\n+    showDesig = true;\n+    showOccup = true;\n+    showTile  = true;\n+    showMisc  = true;\n+\n+    bool _showBlock = false;\n+    bool _showDesig = false;\n+    bool _showOccup = false;\n+    bool _showTile  = false;\n+    bool _showMisc  = false;\n+\n+    char c;\n+    xgetopt opt(argc, argv, \"bdotm\");\n+    opt.opterr = 0;\n+    while ((c = opt()) != -1)\n+    {\n+        switch (c)\n+        {\n+        case 'b':\n+            _showBlock = true;\n+            break;\n+        case 'd':\n+            _showDesig = true;\n+            break;\n+        case 'o':\n+            _showOccup = true;\n+            break;\n+        case 't':\n+            _showTile = true;\n+            break;\n+        case 'm':\n+            _showMisc = true;\n+            break;\n+\n+        case '?':\n+            switch (opt.optopt)\n+            {\n+            // For when we take arguments\n+            default:\n+                if (isprint(opt.optopt))\n+                    std::cerr \u003c\u003c \"Unknown option -\" \u003c\u003c opt.optopt \u003c\u003c \"!\"\n+                            \u003c\u003c std::endl;\n+                else\n+                    std::cerr \u003c\u003c \"Unknown option character \" \u003c\u003c (int) opt.optopt \u003c\u003c \"!\"\n+                            \u003c\u003c std::endl;\n+            }\n+        default:\n+            // Um.....\n+            return false;\n+        }\n+    }\n+\n+    // If any options set, show only those requested via options.\n+    if(_showBlock || _showDesig || _showOccup || _showTile || _showMisc)\n+    {\n+        showBlock = false;\n+        showDesig = false;\n+        showOccup = false;\n+        showTile  = false;\n+        showMisc  = false;\n+\n+        showBlock = _showBlock;\n+        showDesig = _showDesig;\n+        showOccup = _showOccup;\n+        showTile  = _showTile;\n+        showMisc  = _showMisc;\n+    }\n+\n+    return true;\n+}\n+\n+\n using namespace DFHack;\n-int main (int numargs, const char ** args)\n+int main (int numargs, char ** args)\n {\n     bool temporary_terminal = TemporaryTerminal();\n     DFHack::ContextManager DFMgr(\"Memory.xml\");\n     DFHack::Context *DF = DFMgr.getSingleContext();\n\n+    bool showBlock, showDesig, showOccup, showTile, showMisc;\n+\n+    if (!parseOptions(numargs, args, showBlock, showDesig, showOccup,\n+                      showTile, showMisc))\n+    {\n+        return -1;\n+    }\n+\n     BEGIN_PROBE:\n     try\n     {\n@@ -73,7 +159,12 @@\n\n         int32_t cursorX, cursorY, cursorZ;\n         Gui-\u003egetCursorCoords(cursorX,cursorY,cursorZ);\n-        if(cursorX != -30000)\n+        if(cursorX == -30000)\n+        {\n+            std::cerr \u003c\u003c \"No cursor; place cursor over tile to probe.\"\n+                \u003c\u003c endl;\n+        }\n+        else\n         {\n             DFCoord cursor (cursorX,cursorY,cursorZ);\n\n@@ -86,121 +177,160 @@\n             mapblock40d \u0026 block = b-\u003eraw;\n             if(b)\n             {\n-                printf(\"block addr: 0x%x\\n\", block.origin);\n+                printf(\"block addr: 0x%x\\n\\n\", block.origin);\n+\n+                if (showBlock)\n+                {\n+                    printf(\"block flags:\\n\");\n+                    print_bits\u003cuint32_t\u003e(block.blockflags.whole,std::cout);\n+                    std::cout \u003c\u003c endl \u003c\u003c endl;\n+                }\n+\n                 int16_t tiletype = mc.tiletypeAt(cursor);\n                 naked_designation \u0026des = block.designation[tileX][tileY].bits;\n\n                 uint32_t designato = block.origin + designatus + (tileX * 16 + tileY) * sizeof(t_designation);\n                 uint32_t occupr = block.origin + occup + (tileX * 16 + tileY) * sizeof(t_occupancy);\n\n-                printf(\"designation offset: 0x%x\\n\", designato);\n-                print_bits\u003cuint32_t\u003e(block.designation[tileX][tileY].whole,std::cout);\n-                std::cout \u003c\u003c endl;\n-\n-                printf(\"occupancy offset: 0x%x\\n\", occupr);\n-                print_bits\u003cuint32_t\u003e(block.occupancy[tileX][tileY].whole,std::cout);\n-                std::cout \u003c\u003c endl;\n-\n-                // tiletype\n-                std::cout \u003c\u003c\"tiletype: \" \u003c\u003c tiletype;\n-                if(tileName(tiletype))\n-                    std::cout \u003c\u003c \" = \" \u003c\u003c tileName(tiletype) \u003c\u003c std::endl;\n-\n-                DFHack::TileShape shape = tileShape(tiletype);\n-                DFHack::TileMaterial material = tileMaterial(tiletype);\n-                DFHack::TileSpecial special = tileSpecial(tiletype);\n-                printf(\"%-10s: %4d %s\\n\",\"Class\"    ,shape,   TileShapeString[ shape ]);\n-                printf(\"%-10s: %4d %s\\n\",\"Material\" ,material,TileMaterialString[ material ]);\n-                printf(\"%-10s: %4d %s\\n\",\"Special\"  ,special, TileSpecialString[ special ]);\n-                printf(\"%-10s: %4d\\n\"   ,\"Variant\"  ,tileVariant(tiletype));\n-                printf(\"%-10s: %s\\n\"    ,\"Direction\",tileDirection(tiletype).getStr());\n-\n-                std::cout \u003c\u003c std::endl;\n-                std::cout \u003c\u003c\"temperature1: \" \u003c\u003c mc.temperature1At(cursor) \u003c\u003c \" U\" \u003c\u003c std::endl;\n-                std::cout \u003c\u003c\"temperature2: \" \u003c\u003c mc.temperature2At(cursor) \u003c\u003c \" U\" \u003c\u003c std::endl;\n-\n-                // biome, geolayer\n-                std::cout \u003c\u003c \"biome: \" \u003c\u003c des.biome \u003c\u003c std::endl;\n-                std::cout \u003c\u003c \"geolayer: \" \u003c\u003c des.geolayer_index \u003c\u003c std::endl;\n-                int16_t base_rock = mc.baseMaterialAt(cursor);\n-                if(base_rock != -1)\n+                if(showDesig)\n                 {\n-                    cout \u003c\u003c \"Layer material: \" \u003c\u003c dec \u003c\u003c base_rock;\n-                    if(hasmats)\n-                        cout \u003c\u003c \" / \" \u003c\u003c Materials-\u003einorganic[base_rock].id \u003c\u003c \" / \" \u003c\u003c Materials-\u003einorganic[base_rock].name \u003c\u003c endl;\n-                    else\n-                        cout \u003c\u003c endl;\n+                    printf(\"designation offset: 0x%x\\n\", designato);\n+                    print_bits\u003cuint32_t\u003e(block.designation[tileX][tileY].whole,\n+                                         std::cout);\n+                    std::cout \u003c\u003c endl \u003c\u003c endl;\n                 }\n-                int16_t vein_rock = mc.veinMaterialAt(cursor);\n-                if(vein_rock != -1)\n+\n+                if(showOccup)\n                 {\n-                    cout \u003c\u003c \"Vein material (final): \" \u003c\u003c dec \u003c\u003c vein_rock;\n-                    if(hasmats)\n-                        cout \u003c\u003c \" / \" \u003c\u003c Materials-\u003einorganic[vein_rock].id \u003c\u003c \" / \" \u003c\u003c Materials-\u003einorganic[vein_rock].name \u003c\u003c endl;\n-                    else\n-                        cout \u003c\u003c endl;\n+                    printf(\"occupancy offset: 0x%x\\n\", occupr);\n+                    print_bits\u003cuint32_t\u003e(block.occupancy[tileX][tileY].whole,\n+                                         std::cout);\n+                    std::cout \u003c\u003c endl \u003c\u003c endl;\n                 }\n-                // liquids\n-                if(des.flow_size)\n+\n+                if(showTile)\n                 {\n-                    if(des.liquid_type == DFHack::liquid_magma)\n-                        std::cout \u003c\u003c\"magma: \";\n-                    else std::cout \u003c\u003c\"water: \";\n-                    std::cout \u003c\u003c des.flow_size \u003c\u003c std::endl;\n+                    // tiletype\n+                    std::cout \u003c\u003c\"tiletype: \" \u003c\u003c tiletype;\n+                    if(tileName(tiletype))\n+                        std::cout \u003c\u003c \" = \" \u003c\u003c tileName(tiletype) \u003c\u003c std::endl;\n+\n+                    DFHack::TileShape shape = tileShape(tiletype);\n+                    DFHack::TileMaterial material = tileMaterial(tiletype);\n+                    DFHack::TileSpecial special = tileSpecial(tiletype);\n+                    printf(\"%-10s: %4d %s\\n\",\"Class\"    ,shape,\n+                           TileShapeString[ shape ]);\n+                    printf(\"%-10s: %4d %s\\n\",\"Material\" ,\n+                           material,TileMaterialString[ material ]);\n+                    printf(\"%-10s: %4d %s\\n\",\"Special\"  ,\n+                           special, TileSpecialString[ special ]);\n+                    printf(\"%-10s: %4d\\n\"   ,\"Variant\"  ,\n+                           tileVariant(tiletype));\n+                    printf(\"%-10s: %s\\n\"    ,\"Direction\",\n+                           tileDirection(tiletype).getStr());\n+\n+                    std::cout \u003c\u003c std::endl;\n                 }\n-                if(des.flow_forbid)\n-                    std::cout \u003c\u003c \"flow forbid\" \u003c\u003c std::endl;\n-                if(des.pile)\n-                    std::cout \u003c\u003c \"stockpile?\" \u003c\u003c std::endl;\n-                if(des.rained)\n-                    std::cout \u003c\u003c \"rained?\" \u003c\u003c std::endl;\n-                if(des.smooth)\n-                    std::cout \u003c\u003c \"smooth?\" \u003c\u003c std::endl;\n-                printf(\"biomestuffs: 0x%x\\n\", block.origin + biomus);\n-\n-                #define PRINT_FLAG( X )  printf(\"%-16s= %c\\n\", #X , ( des.X ? 'Y' : ' ' ) )\n-                PRINT_FLAG( hidden );\n-                PRINT_FLAG( light );\n-                PRINT_FLAG( skyview );\n-                PRINT_FLAG( subterranean );\n-                PRINT_FLAG( water_table );\n-                PRINT_FLAG( rained );\n-\n-                DFCoord pc(blockX, blockY);\n-                \n-                if(have_features)\n+\n+                if(showMisc)\n                 {\n-                    t_feature * local = 0;\n-                    t_feature * global = 0;\n-                    Maps-\u003eReadFeatures(\u0026(b-\u003eraw),\u0026local,\u0026global);\n-                    PRINT_FLAG( feature_local );\n-                    if(local)\n+                    std::cout \u003c\u003c\"temperature1: \" \u003c\u003c mc.temperature1At(cursor)\n+                        \u003c\u003c \" U\" \u003c\u003c std::endl;\n+                    std::cout \u003c\u003c\"temperature2: \" \u003c\u003c mc.temperature2At(cursor)\n+                        \u003c\u003c \" U\" \u003c\u003c std::endl;\n+\n+                    // biome, geolayer\n+                    std::cout \u003c\u003c \"biome: \" \u003c\u003c des.biome \u003c\u003c std::endl;\n+                    std::cout \u003c\u003c \"geolayer: \" \u003c\u003c des.geolayer_index\n+                        \u003c\u003c std::endl;\n+                    int16_t base_rock = mc.baseMaterialAt(cursor);\n+                    if(base_rock != -1)\n                     {\n-                        printf(\"%-16s\", \"\");\n-                        printf(\"  %4d\", block.local_feature);\n-                        printf(\" (%2d)\", local-\u003etype);\n-                        printf(\" addr 0x%X \", local-\u003eorigin);\n-                        printf(\" %s\\n\", sa_feature(local-\u003etype));\n+                        cout \u003c\u003c \"Layer material: \" \u003c\u003c dec \u003c\u003c base_rock;\n+                        if(hasmats)\n+                            cout \u003c\u003c \" / \" \u003c\u003c Materials-\u003einorganic[base_rock].id\n+                                \u003c\u003c \" / \"\n+                                \u003c\u003c Materials-\u003einorganic[base_rock].name\n+                                \u003c\u003c endl;\n+                        else\n+                            cout \u003c\u003c endl;\n                     }\n-                    PRINT_FLAG( feature_global );\n-                    if(global)\n+                    int16_t vein_rock = mc.veinMaterialAt(cursor);\n+                    if(vein_rock != -1)\n                     {\n-                        printf(\"%-16s\", \"\");\n-                        printf(\"  %4d\", block.global_feature);\n-                        printf(\" (%2d)\", global-\u003etype);\n-                        printf(\" %s\\n\", sa_feature(global-\u003etype));\n+                        cout \u003c\u003c \"Vein material (final): \" \u003c\u003c dec \u003c\u003c vein_rock;\n+                        if(hasmats)\n+                            cout \u003c\u003c \" / \" \u003c\u003c Materials-\u003einorganic[vein_rock].id\n+                                \u003c\u003c \" / \"\n+                                \u003c\u003c Materials-\u003einorganic[vein_rock].name\n+                                \u003c\u003c endl;\n+                        else\n+                            cout \u003c\u003c endl;\n                     }\n+                    // liquids\n+                    if(des.flow_size)\n+                    {\n+                        if(des.liquid_type == DFHack::liquid_magma)\n+                            std::cout \u003c\u003c\"magma: \";\n+                        else std::cout \u003c\u003c\"water: \";\n+                        std::cout \u003c\u003c des.flow_size \u003c\u003c std::endl;\n+                    }\n+                    if(des.flow_forbid)\n+                        std::cout \u003c\u003c \"flow forbid\" \u003c\u003c std::endl;\n+                    if(des.pile)\n+                        std::cout \u003c\u003c \"stockpile?\" \u003c\u003c std::endl;\n+                    if(des.rained)\n+                        std::cout \u003c\u003c \"rained?\" \u003c\u003c std::endl;\n+                    if(des.smooth)\n+                        std::cout \u003c\u003c \"smooth?\" \u003c\u003c std::endl;\n+                    printf(\"biomestuffs: 0x%x\\n\", block.origin + biomus);\n+\n+#define PRINT_FLAG( X )  printf(\"%-16s= %c\\n\", #X , ( des.X ? 'Y' : ' ' ) )\n+                    PRINT_FLAG( hidden );\n+                    PRINT_FLAG( light );\n+                    PRINT_FLAG( skyview );\n+                    PRINT_FLAG( subterranean );\n+                    PRINT_FLAG( water_table );\n+                    PRINT_FLAG( rained );\n+\n+                    DFCoord pc(blockX, blockY);\n+\n+                    if(have_features)\n+                    {\n+                        t_feature * local = 0;\n+                        t_feature * global = 0;\n+                        Maps-\u003eReadFeatures(\u0026(b-\u003eraw),\u0026local,\u0026global);\n+                        PRINT_FLAG( feature_local );\n+                        if(local)\n+                        {\n+                            printf(\"%-16s\", \"\");\n+                            printf(\"  %4d\", block.local_feature);\n+                            printf(\" (%2d)\", local-\u003etype);\n+                            printf(\" addr 0x%X \", local-\u003eorigin);\n+                            printf(\" %s\\n\", sa_feature(local-\u003etype));\n+                        }\n+                        PRINT_FLAG( feature_global );\n+                        if(global)\n+                        {\n+                            printf(\"%-16s\", \"\");\n+                            printf(\"  %4d\", block.global_feature);\n+                            printf(\" (%2d)\", global-\u003etype);\n+                            printf(\" %s\\n\", sa_feature(global-\u003etype));\n+                        }\n+                    }\n+                    else\n+                    {\n+                        PRINT_FLAG( feature_local );\n+                        PRINT_FLAG( feature_global );\n+                    }\n+#undef PRINT_FLAG\n+                    cout \u003c\u003c \"local feature idx: \" \u003c\u003c block.local_feature\n+                        \u003c\u003c endl;\n+                    cout \u003c\u003c \"global feature idx: \" \u003c\u003c block.global_feature\n+                        \u003c\u003c endl;\n+                    cout \u003c\u003c \"mystery: \" \u003c\u003c block.mystery \u003c\u003c endl;\n+                    std::cout \u003c\u003c std::endl;\n                 }\n-                else\n-                {\n-                    PRINT_FLAG( feature_local );\n-                    PRINT_FLAG( feature_global );\n-                }\n-                #undef PRINT_FLAG\n-                cout \u003c\u003c \"local feature idx: \" \u003c\u003c block.local_feature \u003c\u003c endl;\n-                cout \u003c\u003c \"global feature idx: \" \u003c\u003c block.global_feature \u003c\u003c endl;\n-                cout \u003c\u003c \"mystery: \" \u003c\u003c block.mystery \u003c\u003c endl;\n-                std::cout \u003c\u003c std::endl;\n             }\n         }\n     }\n```","files":null}]}