// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stockpiles.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace dfstockpiles {

void protobuf_ShutdownFile_stockpiles_2eproto() {
  delete StockpileSettings::default_instance_;
  delete StockpileSettings_AnimalsSet::default_instance_;
  delete StockpileSettings_FoodSet::default_instance_;
  delete StockpileSettings_FurnitureSet::default_instance_;
  delete StockpileSettings_RefuseSet::default_instance_;
  delete StockpileSettings_StoneSet::default_instance_;
  delete StockpileSettings_OreSet::default_instance_;
  delete StockpileSettings_AmmoSet::default_instance_;
  delete StockpileSettings_CoinSet::default_instance_;
  delete StockpileSettings_BarsBlocksSet::default_instance_;
  delete StockpileSettings_GemsSet::default_instance_;
  delete StockpileSettings_FinishedGoodsSet::default_instance_;
  delete StockpileSettings_LeatherSet::default_instance_;
  delete StockpileSettings_ClothSet::default_instance_;
  delete StockpileSettings_WoodSet::default_instance_;
  delete StockpileSettings_WeaponsSet::default_instance_;
  delete StockpileSettings_ArmorSet::default_instance_;
}

void protobuf_AddDesc_stockpiles_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  StockpileSettings::default_instance_ = new StockpileSettings();
  StockpileSettings_AnimalsSet::default_instance_ = new StockpileSettings_AnimalsSet();
  StockpileSettings_FoodSet::default_instance_ = new StockpileSettings_FoodSet();
  StockpileSettings_FurnitureSet::default_instance_ = new StockpileSettings_FurnitureSet();
  StockpileSettings_RefuseSet::default_instance_ = new StockpileSettings_RefuseSet();
  StockpileSettings_StoneSet::default_instance_ = new StockpileSettings_StoneSet();
  StockpileSettings_OreSet::default_instance_ = new StockpileSettings_OreSet();
  StockpileSettings_AmmoSet::default_instance_ = new StockpileSettings_AmmoSet();
  StockpileSettings_CoinSet::default_instance_ = new StockpileSettings_CoinSet();
  StockpileSettings_BarsBlocksSet::default_instance_ = new StockpileSettings_BarsBlocksSet();
  StockpileSettings_GemsSet::default_instance_ = new StockpileSettings_GemsSet();
  StockpileSettings_FinishedGoodsSet::default_instance_ = new StockpileSettings_FinishedGoodsSet();
  StockpileSettings_LeatherSet::default_instance_ = new StockpileSettings_LeatherSet();
  StockpileSettings_ClothSet::default_instance_ = new StockpileSettings_ClothSet();
  StockpileSettings_WoodSet::default_instance_ = new StockpileSettings_WoodSet();
  StockpileSettings_WeaponsSet::default_instance_ = new StockpileSettings_WeaponsSet();
  StockpileSettings_ArmorSet::default_instance_ = new StockpileSettings_ArmorSet();
  StockpileSettings::default_instance_->InitAsDefaultInstance();
  StockpileSettings_AnimalsSet::default_instance_->InitAsDefaultInstance();
  StockpileSettings_FoodSet::default_instance_->InitAsDefaultInstance();
  StockpileSettings_FurnitureSet::default_instance_->InitAsDefaultInstance();
  StockpileSettings_RefuseSet::default_instance_->InitAsDefaultInstance();
  StockpileSettings_StoneSet::default_instance_->InitAsDefaultInstance();
  StockpileSettings_OreSet::default_instance_->InitAsDefaultInstance();
  StockpileSettings_AmmoSet::default_instance_->InitAsDefaultInstance();
  StockpileSettings_CoinSet::default_instance_->InitAsDefaultInstance();
  StockpileSettings_BarsBlocksSet::default_instance_->InitAsDefaultInstance();
  StockpileSettings_GemsSet::default_instance_->InitAsDefaultInstance();
  StockpileSettings_FinishedGoodsSet::default_instance_->InitAsDefaultInstance();
  StockpileSettings_LeatherSet::default_instance_->InitAsDefaultInstance();
  StockpileSettings_ClothSet::default_instance_->InitAsDefaultInstance();
  StockpileSettings_WoodSet::default_instance_->InitAsDefaultInstance();
  StockpileSettings_WeaponsSet::default_instance_->InitAsDefaultInstance();
  StockpileSettings_ArmorSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stockpiles_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stockpiles_2eproto {
  StaticDescriptorInitializer_stockpiles_2eproto() {
    protobuf_AddDesc_stockpiles_2eproto();
  }
} static_descriptor_initializer_stockpiles_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int StockpileSettings_AnimalsSet::kEmptyCagesFieldNumber;
const int StockpileSettings_AnimalsSet::kEmptyTrapsFieldNumber;
const int StockpileSettings_AnimalsSet::kEnabledFieldNumber;
#endif  // !_MSC_VER

StockpileSettings_AnimalsSet::StockpileSettings_AnimalsSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StockpileSettings_AnimalsSet::InitAsDefaultInstance() {
}

StockpileSettings_AnimalsSet::StockpileSettings_AnimalsSet(const StockpileSettings_AnimalsSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StockpileSettings_AnimalsSet::SharedCtor() {
  _cached_size_ = 0;
  empty_cages_ = false;
  empty_traps_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockpileSettings_AnimalsSet::~StockpileSettings_AnimalsSet() {
  SharedDtor();
}

void StockpileSettings_AnimalsSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockpileSettings_AnimalsSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StockpileSettings_AnimalsSet& StockpileSettings_AnimalsSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpiles_2eproto();  return *default_instance_;
}

StockpileSettings_AnimalsSet* StockpileSettings_AnimalsSet::default_instance_ = NULL;

StockpileSettings_AnimalsSet* StockpileSettings_AnimalsSet::New() const {
  return new StockpileSettings_AnimalsSet;
}

void StockpileSettings_AnimalsSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    empty_cages_ = false;
    empty_traps_ = false;
  }
  enabled_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StockpileSettings_AnimalsSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool empty_cages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_cages_)));
          set_has_empty_cages();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_empty_traps;
        break;
      }
      
      // optional bool empty_traps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_empty_traps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_traps_)));
          set_has_empty_traps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_enabled;
        break;
      }
      
      // repeated string enabled = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enabled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_enabled()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_enabled;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockpileSettings_AnimalsSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool empty_cages = 1;
  if (has_empty_cages()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->empty_cages(), output);
  }
  
  // optional bool empty_traps = 2;
  if (has_empty_traps()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->empty_traps(), output);
  }
  
  // repeated string enabled = 3;
  for (int i = 0; i < this->enabled_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->enabled(i), output);
  }
  
}

int StockpileSettings_AnimalsSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool empty_cages = 1;
    if (has_empty_cages()) {
      total_size += 1 + 1;
    }
    
    // optional bool empty_traps = 2;
    if (has_empty_traps()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated string enabled = 3;
  total_size += 1 * this->enabled_size();
  for (int i = 0; i < this->enabled_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->enabled(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockpileSettings_AnimalsSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StockpileSettings_AnimalsSet*>(&from));
}

void StockpileSettings_AnimalsSet::MergeFrom(const StockpileSettings_AnimalsSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  enabled_.MergeFrom(from.enabled_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_empty_cages()) {
      set_empty_cages(from.empty_cages());
    }
    if (from.has_empty_traps()) {
      set_empty_traps(from.empty_traps());
    }
  }
}

void StockpileSettings_AnimalsSet::CopyFrom(const StockpileSettings_AnimalsSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockpileSettings_AnimalsSet::IsInitialized() const {
  
  return true;
}

void StockpileSettings_AnimalsSet::Swap(StockpileSettings_AnimalsSet* other) {
  if (other != this) {
    std::swap(empty_cages_, other->empty_cages_);
    std::swap(empty_traps_, other->empty_traps_);
    enabled_.Swap(&other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StockpileSettings_AnimalsSet::GetTypeName() const {
  return "dfstockpiles.StockpileSettings.AnimalsSet";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StockpileSettings_FoodSet::kMeatFieldNumber;
const int StockpileSettings_FoodSet::kFishFieldNumber;
const int StockpileSettings_FoodSet::kUnpreparedFishFieldNumber;
const int StockpileSettings_FoodSet::kEggFieldNumber;
const int StockpileSettings_FoodSet::kPlantsFieldNumber;
const int StockpileSettings_FoodSet::kDrinkPlantFieldNumber;
const int StockpileSettings_FoodSet::kDrinkAnimalFieldNumber;
const int StockpileSettings_FoodSet::kCheesePlantFieldNumber;
const int StockpileSettings_FoodSet::kCheeseAnimalFieldNumber;
const int StockpileSettings_FoodSet::kSeedsFieldNumber;
const int StockpileSettings_FoodSet::kLeavesFieldNumber;
const int StockpileSettings_FoodSet::kPowderPlantFieldNumber;
const int StockpileSettings_FoodSet::kPowderCreatureFieldNumber;
const int StockpileSettings_FoodSet::kGlobFieldNumber;
const int StockpileSettings_FoodSet::kGlobPasteFieldNumber;
const int StockpileSettings_FoodSet::kGlobPressedFieldNumber;
const int StockpileSettings_FoodSet::kLiquidPlantFieldNumber;
const int StockpileSettings_FoodSet::kLiquidAnimalFieldNumber;
const int StockpileSettings_FoodSet::kLiquidMiscFieldNumber;
const int StockpileSettings_FoodSet::kPreparedMealsFieldNumber;
#endif  // !_MSC_VER

StockpileSettings_FoodSet::StockpileSettings_FoodSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StockpileSettings_FoodSet::InitAsDefaultInstance() {
}

StockpileSettings_FoodSet::StockpileSettings_FoodSet(const StockpileSettings_FoodSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StockpileSettings_FoodSet::SharedCtor() {
  _cached_size_ = 0;
  prepared_meals_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockpileSettings_FoodSet::~StockpileSettings_FoodSet() {
  SharedDtor();
}

void StockpileSettings_FoodSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockpileSettings_FoodSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StockpileSettings_FoodSet& StockpileSettings_FoodSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpiles_2eproto();  return *default_instance_;
}

StockpileSettings_FoodSet* StockpileSettings_FoodSet::default_instance_ = NULL;

StockpileSettings_FoodSet* StockpileSettings_FoodSet::New() const {
  return new StockpileSettings_FoodSet;
}

void StockpileSettings_FoodSet::Clear() {
  if (_has_bits_[19 / 32] & (0xffu << (19 % 32))) {
    prepared_meals_ = false;
  }
  meat_.Clear();
  fish_.Clear();
  unprepared_fish_.Clear();
  egg_.Clear();
  plants_.Clear();
  drink_plant_.Clear();
  drink_animal_.Clear();
  cheese_plant_.Clear();
  cheese_animal_.Clear();
  seeds_.Clear();
  leaves_.Clear();
  powder_plant_.Clear();
  powder_creature_.Clear();
  glob_.Clear();
  glob_paste_.Clear();
  glob_pressed_.Clear();
  liquid_plant_.Clear();
  liquid_animal_.Clear();
  liquid_misc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StockpileSettings_FoodSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string meat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_meat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_meat;
        if (input->ExpectTag(18)) goto parse_fish;
        break;
      }
      
      // repeated string fish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fish()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fish;
        if (input->ExpectTag(26)) goto parse_egg;
        break;
      }
      
      // repeated string egg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_egg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_egg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_egg;
        if (input->ExpectTag(34)) goto parse_plants;
        break;
      }
      
      // repeated string plants = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_plants()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_plants;
        if (input->ExpectTag(42)) goto parse_drink_plant;
        break;
      }
      
      // repeated string drink_plant = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drink_plant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_drink_plant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_drink_plant;
        if (input->ExpectTag(50)) goto parse_drink_animal;
        break;
      }
      
      // repeated string drink_animal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drink_animal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_drink_animal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_drink_animal;
        if (input->ExpectTag(58)) goto parse_cheese_plant;
        break;
      }
      
      // repeated string cheese_plant = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cheese_plant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cheese_plant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_cheese_plant;
        if (input->ExpectTag(66)) goto parse_cheese_animal;
        break;
      }
      
      // repeated string cheese_animal = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cheese_animal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cheese_animal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cheese_animal;
        if (input->ExpectTag(74)) goto parse_seeds;
        break;
      }
      
      // repeated string seeds = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seeds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_seeds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_seeds;
        if (input->ExpectTag(82)) goto parse_leaves;
        break;
      }
      
      // repeated string leaves = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_leaves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_leaves;
        if (input->ExpectTag(90)) goto parse_powder_plant;
        break;
      }
      
      // repeated string powder_plant = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_powder_plant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_powder_plant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_powder_plant;
        if (input->ExpectTag(98)) goto parse_powder_creature;
        break;
      }
      
      // repeated string powder_creature = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_powder_creature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_powder_creature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_powder_creature;
        if (input->ExpectTag(106)) goto parse_glob;
        break;
      }
      
      // repeated string glob = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_glob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_glob()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_glob;
        if (input->ExpectTag(114)) goto parse_glob_paste;
        break;
      }
      
      // repeated string glob_paste = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_glob_paste:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_glob_paste()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_glob_paste;
        if (input->ExpectTag(122)) goto parse_glob_pressed;
        break;
      }
      
      // repeated string glob_pressed = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_glob_pressed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_glob_pressed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_glob_pressed;
        if (input->ExpectTag(130)) goto parse_liquid_plant;
        break;
      }
      
      // repeated string liquid_plant = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_liquid_plant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_liquid_plant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_liquid_plant;
        if (input->ExpectTag(138)) goto parse_liquid_animal;
        break;
      }
      
      // repeated string liquid_animal = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_liquid_animal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_liquid_animal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_liquid_animal;
        if (input->ExpectTag(146)) goto parse_liquid_misc;
        break;
      }
      
      // repeated string liquid_misc = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_liquid_misc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_liquid_misc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_liquid_misc;
        if (input->ExpectTag(152)) goto parse_prepared_meals;
        break;
      }
      
      // optional bool prepared_meals = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prepared_meals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prepared_meals_)));
          set_has_prepared_meals();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_unprepared_fish;
        break;
      }
      
      // repeated string unprepared_fish = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unprepared_fish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_unprepared_fish()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_unprepared_fish;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockpileSettings_FoodSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string meat = 1;
  for (int i = 0; i < this->meat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->meat(i), output);
  }
  
  // repeated string fish = 2;
  for (int i = 0; i < this->fish_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fish(i), output);
  }
  
  // repeated string egg = 3;
  for (int i = 0; i < this->egg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->egg(i), output);
  }
  
  // repeated string plants = 4;
  for (int i = 0; i < this->plants_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->plants(i), output);
  }
  
  // repeated string drink_plant = 5;
  for (int i = 0; i < this->drink_plant_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->drink_plant(i), output);
  }
  
  // repeated string drink_animal = 6;
  for (int i = 0; i < this->drink_animal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->drink_animal(i), output);
  }
  
  // repeated string cheese_plant = 7;
  for (int i = 0; i < this->cheese_plant_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->cheese_plant(i), output);
  }
  
  // repeated string cheese_animal = 8;
  for (int i = 0; i < this->cheese_animal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->cheese_animal(i), output);
  }
  
  // repeated string seeds = 9;
  for (int i = 0; i < this->seeds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->seeds(i), output);
  }
  
  // repeated string leaves = 10;
  for (int i = 0; i < this->leaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->leaves(i), output);
  }
  
  // repeated string powder_plant = 11;
  for (int i = 0; i < this->powder_plant_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->powder_plant(i), output);
  }
  
  // repeated string powder_creature = 12;
  for (int i = 0; i < this->powder_creature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->powder_creature(i), output);
  }
  
  // repeated string glob = 13;
  for (int i = 0; i < this->glob_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->glob(i), output);
  }
  
  // repeated string glob_paste = 14;
  for (int i = 0; i < this->glob_paste_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->glob_paste(i), output);
  }
  
  // repeated string glob_pressed = 15;
  for (int i = 0; i < this->glob_pressed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->glob_pressed(i), output);
  }
  
  // repeated string liquid_plant = 16;
  for (int i = 0; i < this->liquid_plant_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->liquid_plant(i), output);
  }
  
  // repeated string liquid_animal = 17;
  for (int i = 0; i < this->liquid_animal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->liquid_animal(i), output);
  }
  
  // repeated string liquid_misc = 18;
  for (int i = 0; i < this->liquid_misc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->liquid_misc(i), output);
  }
  
  // optional bool prepared_meals = 19;
  if (has_prepared_meals()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->prepared_meals(), output);
  }
  
  // repeated string unprepared_fish = 20;
  for (int i = 0; i < this->unprepared_fish_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->unprepared_fish(i), output);
  }
  
}

int StockpileSettings_FoodSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[19 / 32] & (0xffu << (19 % 32))) {
    // optional bool prepared_meals = 19;
    if (has_prepared_meals()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated string meat = 1;
  total_size += 1 * this->meat_size();
  for (int i = 0; i < this->meat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->meat(i));
  }
  
  // repeated string fish = 2;
  total_size += 1 * this->fish_size();
  for (int i = 0; i < this->fish_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fish(i));
  }
  
  // repeated string unprepared_fish = 20;
  total_size += 2 * this->unprepared_fish_size();
  for (int i = 0; i < this->unprepared_fish_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->unprepared_fish(i));
  }
  
  // repeated string egg = 3;
  total_size += 1 * this->egg_size();
  for (int i = 0; i < this->egg_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->egg(i));
  }
  
  // repeated string plants = 4;
  total_size += 1 * this->plants_size();
  for (int i = 0; i < this->plants_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->plants(i));
  }
  
  // repeated string drink_plant = 5;
  total_size += 1 * this->drink_plant_size();
  for (int i = 0; i < this->drink_plant_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->drink_plant(i));
  }
  
  // repeated string drink_animal = 6;
  total_size += 1 * this->drink_animal_size();
  for (int i = 0; i < this->drink_animal_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->drink_animal(i));
  }
  
  // repeated string cheese_plant = 7;
  total_size += 1 * this->cheese_plant_size();
  for (int i = 0; i < this->cheese_plant_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cheese_plant(i));
  }
  
  // repeated string cheese_animal = 8;
  total_size += 1 * this->cheese_animal_size();
  for (int i = 0; i < this->cheese_animal_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cheese_animal(i));
  }
  
  // repeated string seeds = 9;
  total_size += 1 * this->seeds_size();
  for (int i = 0; i < this->seeds_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->seeds(i));
  }
  
  // repeated string leaves = 10;
  total_size += 1 * this->leaves_size();
  for (int i = 0; i < this->leaves_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->leaves(i));
  }
  
  // repeated string powder_plant = 11;
  total_size += 1 * this->powder_plant_size();
  for (int i = 0; i < this->powder_plant_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->powder_plant(i));
  }
  
  // repeated string powder_creature = 12;
  total_size += 1 * this->powder_creature_size();
  for (int i = 0; i < this->powder_creature_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->powder_creature(i));
  }
  
  // repeated string glob = 13;
  total_size += 1 * this->glob_size();
  for (int i = 0; i < this->glob_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->glob(i));
  }
  
  // repeated string glob_paste = 14;
  total_size += 1 * this->glob_paste_size();
  for (int i = 0; i < this->glob_paste_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->glob_paste(i));
  }
  
  // repeated string glob_pressed = 15;
  total_size += 1 * this->glob_pressed_size();
  for (int i = 0; i < this->glob_pressed_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->glob_pressed(i));
  }
  
  // repeated string liquid_plant = 16;
  total_size += 2 * this->liquid_plant_size();
  for (int i = 0; i < this->liquid_plant_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->liquid_plant(i));
  }
  
  // repeated string liquid_animal = 17;
  total_size += 2 * this->liquid_animal_size();
  for (int i = 0; i < this->liquid_animal_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->liquid_animal(i));
  }
  
  // repeated string liquid_misc = 18;
  total_size += 2 * this->liquid_misc_size();
  for (int i = 0; i < this->liquid_misc_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->liquid_misc(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockpileSettings_FoodSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StockpileSettings_FoodSet*>(&from));
}

void StockpileSettings_FoodSet::MergeFrom(const StockpileSettings_FoodSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  meat_.MergeFrom(from.meat_);
  fish_.MergeFrom(from.fish_);
  unprepared_fish_.MergeFrom(from.unprepared_fish_);
  egg_.MergeFrom(from.egg_);
  plants_.MergeFrom(from.plants_);
  drink_plant_.MergeFrom(from.drink_plant_);
  drink_animal_.MergeFrom(from.drink_animal_);
  cheese_plant_.MergeFrom(from.cheese_plant_);
  cheese_animal_.MergeFrom(from.cheese_animal_);
  seeds_.MergeFrom(from.seeds_);
  leaves_.MergeFrom(from.leaves_);
  powder_plant_.MergeFrom(from.powder_plant_);
  powder_creature_.MergeFrom(from.powder_creature_);
  glob_.MergeFrom(from.glob_);
  glob_paste_.MergeFrom(from.glob_paste_);
  glob_pressed_.MergeFrom(from.glob_pressed_);
  liquid_plant_.MergeFrom(from.liquid_plant_);
  liquid_animal_.MergeFrom(from.liquid_animal_);
  liquid_misc_.MergeFrom(from.liquid_misc_);
  if (from._has_bits_[19 / 32] & (0xffu << (19 % 32))) {
    if (from.has_prepared_meals()) {
      set_prepared_meals(from.prepared_meals());
    }
  }
}

void StockpileSettings_FoodSet::CopyFrom(const StockpileSettings_FoodSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockpileSettings_FoodSet::IsInitialized() const {
  
  return true;
}

void StockpileSettings_FoodSet::Swap(StockpileSettings_FoodSet* other) {
  if (other != this) {
    meat_.Swap(&other->meat_);
    fish_.Swap(&other->fish_);
    unprepared_fish_.Swap(&other->unprepared_fish_);
    egg_.Swap(&other->egg_);
    plants_.Swap(&other->plants_);
    drink_plant_.Swap(&other->drink_plant_);
    drink_animal_.Swap(&other->drink_animal_);
    cheese_plant_.Swap(&other->cheese_plant_);
    cheese_animal_.Swap(&other->cheese_animal_);
    seeds_.Swap(&other->seeds_);
    leaves_.Swap(&other->leaves_);
    powder_plant_.Swap(&other->powder_plant_);
    powder_creature_.Swap(&other->powder_creature_);
    glob_.Swap(&other->glob_);
    glob_paste_.Swap(&other->glob_paste_);
    glob_pressed_.Swap(&other->glob_pressed_);
    liquid_plant_.Swap(&other->liquid_plant_);
    liquid_animal_.Swap(&other->liquid_animal_);
    liquid_misc_.Swap(&other->liquid_misc_);
    std::swap(prepared_meals_, other->prepared_meals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StockpileSettings_FoodSet::GetTypeName() const {
  return "dfstockpiles.StockpileSettings.FoodSet";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StockpileSettings_FurnitureSet::kTypeFieldNumber;
const int StockpileSettings_FurnitureSet::kOtherMatsFieldNumber;
const int StockpileSettings_FurnitureSet::kMatsFieldNumber;
const int StockpileSettings_FurnitureSet::kQualityCoreFieldNumber;
const int StockpileSettings_FurnitureSet::kQualityTotalFieldNumber;
const int StockpileSettings_FurnitureSet::kSandBagsFieldNumber;
#endif  // !_MSC_VER

StockpileSettings_FurnitureSet::StockpileSettings_FurnitureSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StockpileSettings_FurnitureSet::InitAsDefaultInstance() {
}

StockpileSettings_FurnitureSet::StockpileSettings_FurnitureSet(const StockpileSettings_FurnitureSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StockpileSettings_FurnitureSet::SharedCtor() {
  _cached_size_ = 0;
  sand_bags_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockpileSettings_FurnitureSet::~StockpileSettings_FurnitureSet() {
  SharedDtor();
}

void StockpileSettings_FurnitureSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockpileSettings_FurnitureSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StockpileSettings_FurnitureSet& StockpileSettings_FurnitureSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpiles_2eproto();  return *default_instance_;
}

StockpileSettings_FurnitureSet* StockpileSettings_FurnitureSet::default_instance_ = NULL;

StockpileSettings_FurnitureSet* StockpileSettings_FurnitureSet::New() const {
  return new StockpileSettings_FurnitureSet;
}

void StockpileSettings_FurnitureSet::Clear() {
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    sand_bags_ = false;
  }
  type_.Clear();
  other_mats_.Clear();
  mats_.Clear();
  quality_core_.Clear();
  quality_total_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StockpileSettings_FurnitureSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_type;
        if (input->ExpectTag(18)) goto parse_other_mats;
        break;
      }
      
      // repeated string other_mats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_other_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_other_mats;
        if (input->ExpectTag(26)) goto parse_mats;
        break;
      }
      
      // repeated string mats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mats;
        if (input->ExpectTag(34)) goto parse_quality_core;
        break;
      }
      
      // repeated string quality_core = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_core:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_quality_core()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_quality_core;
        if (input->ExpectTag(42)) goto parse_quality_total;
        break;
      }
      
      // repeated string quality_total = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_quality_total()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_quality_total;
        if (input->ExpectTag(48)) goto parse_sand_bags;
        break;
      }
      
      // optional bool sand_bags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sand_bags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sand_bags_)));
          set_has_sand_bags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockpileSettings_FurnitureSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(i), output);
  }
  
  // repeated string other_mats = 2;
  for (int i = 0; i < this->other_mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->other_mats(i), output);
  }
  
  // repeated string mats = 3;
  for (int i = 0; i < this->mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mats(i), output);
  }
  
  // repeated string quality_core = 4;
  for (int i = 0; i < this->quality_core_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->quality_core(i), output);
  }
  
  // repeated string quality_total = 5;
  for (int i = 0; i < this->quality_total_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->quality_total(i), output);
  }
  
  // optional bool sand_bags = 6;
  if (has_sand_bags()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->sand_bags(), output);
  }
  
}

int StockpileSettings_FurnitureSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // optional bool sand_bags = 6;
    if (has_sand_bags()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated string type = 1;
  total_size += 1 * this->type_size();
  for (int i = 0; i < this->type_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->type(i));
  }
  
  // repeated string other_mats = 2;
  total_size += 1 * this->other_mats_size();
  for (int i = 0; i < this->other_mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->other_mats(i));
  }
  
  // repeated string mats = 3;
  total_size += 1 * this->mats_size();
  for (int i = 0; i < this->mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mats(i));
  }
  
  // repeated string quality_core = 4;
  total_size += 1 * this->quality_core_size();
  for (int i = 0; i < this->quality_core_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->quality_core(i));
  }
  
  // repeated string quality_total = 5;
  total_size += 1 * this->quality_total_size();
  for (int i = 0; i < this->quality_total_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->quality_total(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockpileSettings_FurnitureSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StockpileSettings_FurnitureSet*>(&from));
}

void StockpileSettings_FurnitureSet::MergeFrom(const StockpileSettings_FurnitureSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  other_mats_.MergeFrom(from.other_mats_);
  mats_.MergeFrom(from.mats_);
  quality_core_.MergeFrom(from.quality_core_);
  quality_total_.MergeFrom(from.quality_total_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_sand_bags()) {
      set_sand_bags(from.sand_bags());
    }
  }
}

void StockpileSettings_FurnitureSet::CopyFrom(const StockpileSettings_FurnitureSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockpileSettings_FurnitureSet::IsInitialized() const {
  
  return true;
}

void StockpileSettings_FurnitureSet::Swap(StockpileSettings_FurnitureSet* other) {
  if (other != this) {
    type_.Swap(&other->type_);
    other_mats_.Swap(&other->other_mats_);
    mats_.Swap(&other->mats_);
    quality_core_.Swap(&other->quality_core_);
    quality_total_.Swap(&other->quality_total_);
    std::swap(sand_bags_, other->sand_bags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StockpileSettings_FurnitureSet::GetTypeName() const {
  return "dfstockpiles.StockpileSettings.FurnitureSet";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StockpileSettings_RefuseSet::kTypeFieldNumber;
const int StockpileSettings_RefuseSet::kCorpsesFieldNumber;
const int StockpileSettings_RefuseSet::kBodyPartsFieldNumber;
const int StockpileSettings_RefuseSet::kSkullsFieldNumber;
const int StockpileSettings_RefuseSet::kBonesFieldNumber;
const int StockpileSettings_RefuseSet::kHairFieldNumber;
const int StockpileSettings_RefuseSet::kShellsFieldNumber;
const int StockpileSettings_RefuseSet::kTeethFieldNumber;
const int StockpileSettings_RefuseSet::kHornsFieldNumber;
const int StockpileSettings_RefuseSet::kFreshRawHideFieldNumber;
const int StockpileSettings_RefuseSet::kRottenRawHideFieldNumber;
#endif  // !_MSC_VER

StockpileSettings_RefuseSet::StockpileSettings_RefuseSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StockpileSettings_RefuseSet::InitAsDefaultInstance() {
}

StockpileSettings_RefuseSet::StockpileSettings_RefuseSet(const StockpileSettings_RefuseSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StockpileSettings_RefuseSet::SharedCtor() {
  _cached_size_ = 0;
  fresh_raw_hide_ = false;
  rotten_raw_hide_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockpileSettings_RefuseSet::~StockpileSettings_RefuseSet() {
  SharedDtor();
}

void StockpileSettings_RefuseSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockpileSettings_RefuseSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StockpileSettings_RefuseSet& StockpileSettings_RefuseSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpiles_2eproto();  return *default_instance_;
}

StockpileSettings_RefuseSet* StockpileSettings_RefuseSet::default_instance_ = NULL;

StockpileSettings_RefuseSet* StockpileSettings_RefuseSet::New() const {
  return new StockpileSettings_RefuseSet;
}

void StockpileSettings_RefuseSet::Clear() {
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    fresh_raw_hide_ = false;
    rotten_raw_hide_ = false;
  }
  type_.Clear();
  corpses_.Clear();
  body_parts_.Clear();
  skulls_.Clear();
  bones_.Clear();
  hair_.Clear();
  shells_.Clear();
  teeth_.Clear();
  horns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StockpileSettings_RefuseSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_type;
        if (input->ExpectTag(18)) goto parse_corpses;
        break;
      }
      
      // repeated string corpses = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_corpses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_corpses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_corpses;
        if (input->ExpectTag(26)) goto parse_body_parts;
        break;
      }
      
      // repeated string body_parts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body_parts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_body_parts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_body_parts;
        if (input->ExpectTag(34)) goto parse_skulls;
        break;
      }
      
      // repeated string skulls = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skulls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_skulls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skulls;
        if (input->ExpectTag(42)) goto parse_bones;
        break;
      }
      
      // repeated string bones = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bones()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bones;
        if (input->ExpectTag(50)) goto parse_hair;
        break;
      }
      
      // repeated string hair = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_hair;
        if (input->ExpectTag(58)) goto parse_shells;
        break;
      }
      
      // repeated string shells = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_shells()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_shells;
        if (input->ExpectTag(66)) goto parse_teeth;
        break;
      }
      
      // repeated string teeth = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teeth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_teeth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_teeth;
        if (input->ExpectTag(74)) goto parse_horns;
        break;
      }
      
      // repeated string horns = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_horns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_horns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_horns;
        if (input->ExpectTag(80)) goto parse_fresh_raw_hide;
        break;
      }
      
      // optional bool fresh_raw_hide = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fresh_raw_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fresh_raw_hide_)));
          set_has_fresh_raw_hide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_rotten_raw_hide;
        break;
      }
      
      // optional bool rotten_raw_hide = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rotten_raw_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rotten_raw_hide_)));
          set_has_rotten_raw_hide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockpileSettings_RefuseSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(i), output);
  }
  
  // repeated string corpses = 2;
  for (int i = 0; i < this->corpses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->corpses(i), output);
  }
  
  // repeated string body_parts = 3;
  for (int i = 0; i < this->body_parts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->body_parts(i), output);
  }
  
  // repeated string skulls = 4;
  for (int i = 0; i < this->skulls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->skulls(i), output);
  }
  
  // repeated string bones = 5;
  for (int i = 0; i < this->bones_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->bones(i), output);
  }
  
  // repeated string hair = 6;
  for (int i = 0; i < this->hair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->hair(i), output);
  }
  
  // repeated string shells = 7;
  for (int i = 0; i < this->shells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->shells(i), output);
  }
  
  // repeated string teeth = 8;
  for (int i = 0; i < this->teeth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->teeth(i), output);
  }
  
  // repeated string horns = 9;
  for (int i = 0; i < this->horns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->horns(i), output);
  }
  
  // optional bool fresh_raw_hide = 10;
  if (has_fresh_raw_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->fresh_raw_hide(), output);
  }
  
  // optional bool rotten_raw_hide = 11;
  if (has_rotten_raw_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->rotten_raw_hide(), output);
  }
  
}

int StockpileSettings_RefuseSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bool fresh_raw_hide = 10;
    if (has_fresh_raw_hide()) {
      total_size += 1 + 1;
    }
    
    // optional bool rotten_raw_hide = 11;
    if (has_rotten_raw_hide()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated string type = 1;
  total_size += 1 * this->type_size();
  for (int i = 0; i < this->type_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->type(i));
  }
  
  // repeated string corpses = 2;
  total_size += 1 * this->corpses_size();
  for (int i = 0; i < this->corpses_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->corpses(i));
  }
  
  // repeated string body_parts = 3;
  total_size += 1 * this->body_parts_size();
  for (int i = 0; i < this->body_parts_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->body_parts(i));
  }
  
  // repeated string skulls = 4;
  total_size += 1 * this->skulls_size();
  for (int i = 0; i < this->skulls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->skulls(i));
  }
  
  // repeated string bones = 5;
  total_size += 1 * this->bones_size();
  for (int i = 0; i < this->bones_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bones(i));
  }
  
  // repeated string hair = 6;
  total_size += 1 * this->hair_size();
  for (int i = 0; i < this->hair_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hair(i));
  }
  
  // repeated string shells = 7;
  total_size += 1 * this->shells_size();
  for (int i = 0; i < this->shells_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->shells(i));
  }
  
  // repeated string teeth = 8;
  total_size += 1 * this->teeth_size();
  for (int i = 0; i < this->teeth_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->teeth(i));
  }
  
  // repeated string horns = 9;
  total_size += 1 * this->horns_size();
  for (int i = 0; i < this->horns_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->horns(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockpileSettings_RefuseSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StockpileSettings_RefuseSet*>(&from));
}

void StockpileSettings_RefuseSet::MergeFrom(const StockpileSettings_RefuseSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  corpses_.MergeFrom(from.corpses_);
  body_parts_.MergeFrom(from.body_parts_);
  skulls_.MergeFrom(from.skulls_);
  bones_.MergeFrom(from.bones_);
  hair_.MergeFrom(from.hair_);
  shells_.MergeFrom(from.shells_);
  teeth_.MergeFrom(from.teeth_);
  horns_.MergeFrom(from.horns_);
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_fresh_raw_hide()) {
      set_fresh_raw_hide(from.fresh_raw_hide());
    }
    if (from.has_rotten_raw_hide()) {
      set_rotten_raw_hide(from.rotten_raw_hide());
    }
  }
}

void StockpileSettings_RefuseSet::CopyFrom(const StockpileSettings_RefuseSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockpileSettings_RefuseSet::IsInitialized() const {
  
  return true;
}

void StockpileSettings_RefuseSet::Swap(StockpileSettings_RefuseSet* other) {
  if (other != this) {
    type_.Swap(&other->type_);
    corpses_.Swap(&other->corpses_);
    body_parts_.Swap(&other->body_parts_);
    skulls_.Swap(&other->skulls_);
    bones_.Swap(&other->bones_);
    hair_.Swap(&other->hair_);
    shells_.Swap(&other->shells_);
    teeth_.Swap(&other->teeth_);
    horns_.Swap(&other->horns_);
    std::swap(fresh_raw_hide_, other->fresh_raw_hide_);
    std::swap(rotten_raw_hide_, other->rotten_raw_hide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StockpileSettings_RefuseSet::GetTypeName() const {
  return "dfstockpiles.StockpileSettings.RefuseSet";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StockpileSettings_StoneSet::kMatsFieldNumber;
#endif  // !_MSC_VER

StockpileSettings_StoneSet::StockpileSettings_StoneSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StockpileSettings_StoneSet::InitAsDefaultInstance() {
}

StockpileSettings_StoneSet::StockpileSettings_StoneSet(const StockpileSettings_StoneSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StockpileSettings_StoneSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockpileSettings_StoneSet::~StockpileSettings_StoneSet() {
  SharedDtor();
}

void StockpileSettings_StoneSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockpileSettings_StoneSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StockpileSettings_StoneSet& StockpileSettings_StoneSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpiles_2eproto();  return *default_instance_;
}

StockpileSettings_StoneSet* StockpileSettings_StoneSet::default_instance_ = NULL;

StockpileSettings_StoneSet* StockpileSettings_StoneSet::New() const {
  return new StockpileSettings_StoneSet;
}

void StockpileSettings_StoneSet::Clear() {
  mats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StockpileSettings_StoneSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string mats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mats;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockpileSettings_StoneSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string mats = 1;
  for (int i = 0; i < this->mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mats(i), output);
  }
  
}

int StockpileSettings_StoneSet::ByteSize() const {
  int total_size = 0;
  
  // repeated string mats = 1;
  total_size += 1 * this->mats_size();
  for (int i = 0; i < this->mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mats(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockpileSettings_StoneSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StockpileSettings_StoneSet*>(&from));
}

void StockpileSettings_StoneSet::MergeFrom(const StockpileSettings_StoneSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  mats_.MergeFrom(from.mats_);
}

void StockpileSettings_StoneSet::CopyFrom(const StockpileSettings_StoneSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockpileSettings_StoneSet::IsInitialized() const {
  
  return true;
}

void StockpileSettings_StoneSet::Swap(StockpileSettings_StoneSet* other) {
  if (other != this) {
    mats_.Swap(&other->mats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StockpileSettings_StoneSet::GetTypeName() const {
  return "dfstockpiles.StockpileSettings.StoneSet";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StockpileSettings_OreSet::kMatsFieldNumber;
#endif  // !_MSC_VER

StockpileSettings_OreSet::StockpileSettings_OreSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StockpileSettings_OreSet::InitAsDefaultInstance() {
}

StockpileSettings_OreSet::StockpileSettings_OreSet(const StockpileSettings_OreSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StockpileSettings_OreSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockpileSettings_OreSet::~StockpileSettings_OreSet() {
  SharedDtor();
}

void StockpileSettings_OreSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockpileSettings_OreSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StockpileSettings_OreSet& StockpileSettings_OreSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpiles_2eproto();  return *default_instance_;
}

StockpileSettings_OreSet* StockpileSettings_OreSet::default_instance_ = NULL;

StockpileSettings_OreSet* StockpileSettings_OreSet::New() const {
  return new StockpileSettings_OreSet;
}

void StockpileSettings_OreSet::Clear() {
  mats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StockpileSettings_OreSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string mats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mats;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockpileSettings_OreSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string mats = 1;
  for (int i = 0; i < this->mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mats(i), output);
  }
  
}

int StockpileSettings_OreSet::ByteSize() const {
  int total_size = 0;
  
  // repeated string mats = 1;
  total_size += 1 * this->mats_size();
  for (int i = 0; i < this->mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mats(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockpileSettings_OreSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StockpileSettings_OreSet*>(&from));
}

void StockpileSettings_OreSet::MergeFrom(const StockpileSettings_OreSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  mats_.MergeFrom(from.mats_);
}

void StockpileSettings_OreSet::CopyFrom(const StockpileSettings_OreSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockpileSettings_OreSet::IsInitialized() const {
  
  return true;
}

void StockpileSettings_OreSet::Swap(StockpileSettings_OreSet* other) {
  if (other != this) {
    mats_.Swap(&other->mats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StockpileSettings_OreSet::GetTypeName() const {
  return "dfstockpiles.StockpileSettings.OreSet";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StockpileSettings_AmmoSet::kTypeFieldNumber;
const int StockpileSettings_AmmoSet::kOtherMatsFieldNumber;
const int StockpileSettings_AmmoSet::kMatsFieldNumber;
const int StockpileSettings_AmmoSet::kQualityCoreFieldNumber;
const int StockpileSettings_AmmoSet::kQualityTotalFieldNumber;
#endif  // !_MSC_VER

StockpileSettings_AmmoSet::StockpileSettings_AmmoSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StockpileSettings_AmmoSet::InitAsDefaultInstance() {
}

StockpileSettings_AmmoSet::StockpileSettings_AmmoSet(const StockpileSettings_AmmoSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StockpileSettings_AmmoSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockpileSettings_AmmoSet::~StockpileSettings_AmmoSet() {
  SharedDtor();
}

void StockpileSettings_AmmoSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockpileSettings_AmmoSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StockpileSettings_AmmoSet& StockpileSettings_AmmoSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpiles_2eproto();  return *default_instance_;
}

StockpileSettings_AmmoSet* StockpileSettings_AmmoSet::default_instance_ = NULL;

StockpileSettings_AmmoSet* StockpileSettings_AmmoSet::New() const {
  return new StockpileSettings_AmmoSet;
}

void StockpileSettings_AmmoSet::Clear() {
  type_.Clear();
  other_mats_.Clear();
  mats_.Clear();
  quality_core_.Clear();
  quality_total_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StockpileSettings_AmmoSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_type;
        if (input->ExpectTag(18)) goto parse_other_mats;
        break;
      }
      
      // repeated string other_mats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_other_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_other_mats;
        if (input->ExpectTag(26)) goto parse_mats;
        break;
      }
      
      // repeated string mats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mats;
        if (input->ExpectTag(34)) goto parse_quality_core;
        break;
      }
      
      // repeated string quality_core = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_core:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_quality_core()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_quality_core;
        if (input->ExpectTag(42)) goto parse_quality_total;
        break;
      }
      
      // repeated string quality_total = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_quality_total()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_quality_total;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockpileSettings_AmmoSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(i), output);
  }
  
  // repeated string other_mats = 2;
  for (int i = 0; i < this->other_mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->other_mats(i), output);
  }
  
  // repeated string mats = 3;
  for (int i = 0; i < this->mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mats(i), output);
  }
  
  // repeated string quality_core = 4;
  for (int i = 0; i < this->quality_core_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->quality_core(i), output);
  }
  
  // repeated string quality_total = 5;
  for (int i = 0; i < this->quality_total_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->quality_total(i), output);
  }
  
}

int StockpileSettings_AmmoSet::ByteSize() const {
  int total_size = 0;
  
  // repeated string type = 1;
  total_size += 1 * this->type_size();
  for (int i = 0; i < this->type_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->type(i));
  }
  
  // repeated string other_mats = 2;
  total_size += 1 * this->other_mats_size();
  for (int i = 0; i < this->other_mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->other_mats(i));
  }
  
  // repeated string mats = 3;
  total_size += 1 * this->mats_size();
  for (int i = 0; i < this->mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mats(i));
  }
  
  // repeated string quality_core = 4;
  total_size += 1 * this->quality_core_size();
  for (int i = 0; i < this->quality_core_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->quality_core(i));
  }
  
  // repeated string quality_total = 5;
  total_size += 1 * this->quality_total_size();
  for (int i = 0; i < this->quality_total_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->quality_total(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockpileSettings_AmmoSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StockpileSettings_AmmoSet*>(&from));
}

void StockpileSettings_AmmoSet::MergeFrom(const StockpileSettings_AmmoSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  other_mats_.MergeFrom(from.other_mats_);
  mats_.MergeFrom(from.mats_);
  quality_core_.MergeFrom(from.quality_core_);
  quality_total_.MergeFrom(from.quality_total_);
}

void StockpileSettings_AmmoSet::CopyFrom(const StockpileSettings_AmmoSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockpileSettings_AmmoSet::IsInitialized() const {
  
  return true;
}

void StockpileSettings_AmmoSet::Swap(StockpileSettings_AmmoSet* other) {
  if (other != this) {
    type_.Swap(&other->type_);
    other_mats_.Swap(&other->other_mats_);
    mats_.Swap(&other->mats_);
    quality_core_.Swap(&other->quality_core_);
    quality_total_.Swap(&other->quality_total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StockpileSettings_AmmoSet::GetTypeName() const {
  return "dfstockpiles.StockpileSettings.AmmoSet";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StockpileSettings_CoinSet::kMatsFieldNumber;
#endif  // !_MSC_VER

StockpileSettings_CoinSet::StockpileSettings_CoinSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StockpileSettings_CoinSet::InitAsDefaultInstance() {
}

StockpileSettings_CoinSet::StockpileSettings_CoinSet(const StockpileSettings_CoinSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StockpileSettings_CoinSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockpileSettings_CoinSet::~StockpileSettings_CoinSet() {
  SharedDtor();
}

void StockpileSettings_CoinSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockpileSettings_CoinSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StockpileSettings_CoinSet& StockpileSettings_CoinSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpiles_2eproto();  return *default_instance_;
}

StockpileSettings_CoinSet* StockpileSettings_CoinSet::default_instance_ = NULL;

StockpileSettings_CoinSet* StockpileSettings_CoinSet::New() const {
  return new StockpileSettings_CoinSet;
}

void StockpileSettings_CoinSet::Clear() {
  mats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StockpileSettings_CoinSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string mats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mats;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockpileSettings_CoinSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string mats = 1;
  for (int i = 0; i < this->mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mats(i), output);
  }
  
}

int StockpileSettings_CoinSet::ByteSize() const {
  int total_size = 0;
  
  // repeated string mats = 1;
  total_size += 1 * this->mats_size();
  for (int i = 0; i < this->mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mats(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockpileSettings_CoinSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StockpileSettings_CoinSet*>(&from));
}

void StockpileSettings_CoinSet::MergeFrom(const StockpileSettings_CoinSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  mats_.MergeFrom(from.mats_);
}

void StockpileSettings_CoinSet::CopyFrom(const StockpileSettings_CoinSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockpileSettings_CoinSet::IsInitialized() const {
  
  return true;
}

void StockpileSettings_CoinSet::Swap(StockpileSettings_CoinSet* other) {
  if (other != this) {
    mats_.Swap(&other->mats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StockpileSettings_CoinSet::GetTypeName() const {
  return "dfstockpiles.StockpileSettings.CoinSet";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StockpileSettings_BarsBlocksSet::kBarsOtherMatsFieldNumber;
const int StockpileSettings_BarsBlocksSet::kBlocksOtherMatsFieldNumber;
const int StockpileSettings_BarsBlocksSet::kBarsMatsFieldNumber;
const int StockpileSettings_BarsBlocksSet::kBlocksMatsFieldNumber;
#endif  // !_MSC_VER

StockpileSettings_BarsBlocksSet::StockpileSettings_BarsBlocksSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StockpileSettings_BarsBlocksSet::InitAsDefaultInstance() {
}

StockpileSettings_BarsBlocksSet::StockpileSettings_BarsBlocksSet(const StockpileSettings_BarsBlocksSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StockpileSettings_BarsBlocksSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockpileSettings_BarsBlocksSet::~StockpileSettings_BarsBlocksSet() {
  SharedDtor();
}

void StockpileSettings_BarsBlocksSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockpileSettings_BarsBlocksSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StockpileSettings_BarsBlocksSet& StockpileSettings_BarsBlocksSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpiles_2eproto();  return *default_instance_;
}

StockpileSettings_BarsBlocksSet* StockpileSettings_BarsBlocksSet::default_instance_ = NULL;

StockpileSettings_BarsBlocksSet* StockpileSettings_BarsBlocksSet::New() const {
  return new StockpileSettings_BarsBlocksSet;
}

void StockpileSettings_BarsBlocksSet::Clear() {
  bars_other_mats_.Clear();
  blocks_other_mats_.Clear();
  bars_mats_.Clear();
  blocks_mats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StockpileSettings_BarsBlocksSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string bars_other_mats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bars_other_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bars_other_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bars_other_mats;
        if (input->ExpectTag(18)) goto parse_blocks_other_mats;
        break;
      }
      
      // repeated string blocks_other_mats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks_other_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_blocks_other_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blocks_other_mats;
        if (input->ExpectTag(26)) goto parse_bars_mats;
        break;
      }
      
      // repeated string bars_mats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bars_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bars_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bars_mats;
        if (input->ExpectTag(34)) goto parse_blocks_mats;
        break;
      }
      
      // repeated string blocks_mats = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_blocks_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_blocks_mats;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockpileSettings_BarsBlocksSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string bars_other_mats = 1;
  for (int i = 0; i < this->bars_other_mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bars_other_mats(i), output);
  }
  
  // repeated string blocks_other_mats = 2;
  for (int i = 0; i < this->blocks_other_mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->blocks_other_mats(i), output);
  }
  
  // repeated string bars_mats = 3;
  for (int i = 0; i < this->bars_mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bars_mats(i), output);
  }
  
  // repeated string blocks_mats = 4;
  for (int i = 0; i < this->blocks_mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->blocks_mats(i), output);
  }
  
}

int StockpileSettings_BarsBlocksSet::ByteSize() const {
  int total_size = 0;
  
  // repeated string bars_other_mats = 1;
  total_size += 1 * this->bars_other_mats_size();
  for (int i = 0; i < this->bars_other_mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bars_other_mats(i));
  }
  
  // repeated string blocks_other_mats = 2;
  total_size += 1 * this->blocks_other_mats_size();
  for (int i = 0; i < this->blocks_other_mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->blocks_other_mats(i));
  }
  
  // repeated string bars_mats = 3;
  total_size += 1 * this->bars_mats_size();
  for (int i = 0; i < this->bars_mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bars_mats(i));
  }
  
  // repeated string blocks_mats = 4;
  total_size += 1 * this->blocks_mats_size();
  for (int i = 0; i < this->blocks_mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->blocks_mats(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockpileSettings_BarsBlocksSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StockpileSettings_BarsBlocksSet*>(&from));
}

void StockpileSettings_BarsBlocksSet::MergeFrom(const StockpileSettings_BarsBlocksSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  bars_other_mats_.MergeFrom(from.bars_other_mats_);
  blocks_other_mats_.MergeFrom(from.blocks_other_mats_);
  bars_mats_.MergeFrom(from.bars_mats_);
  blocks_mats_.MergeFrom(from.blocks_mats_);
}

void StockpileSettings_BarsBlocksSet::CopyFrom(const StockpileSettings_BarsBlocksSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockpileSettings_BarsBlocksSet::IsInitialized() const {
  
  return true;
}

void StockpileSettings_BarsBlocksSet::Swap(StockpileSettings_BarsBlocksSet* other) {
  if (other != this) {
    bars_other_mats_.Swap(&other->bars_other_mats_);
    blocks_other_mats_.Swap(&other->blocks_other_mats_);
    bars_mats_.Swap(&other->bars_mats_);
    blocks_mats_.Swap(&other->blocks_mats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StockpileSettings_BarsBlocksSet::GetTypeName() const {
  return "dfstockpiles.StockpileSettings.BarsBlocksSet";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StockpileSettings_GemsSet::kRoughOtherMatsFieldNumber;
const int StockpileSettings_GemsSet::kCutOtherMatsFieldNumber;
const int StockpileSettings_GemsSet::kRoughMatsFieldNumber;
const int StockpileSettings_GemsSet::kCutMatsFieldNumber;
#endif  // !_MSC_VER

StockpileSettings_GemsSet::StockpileSettings_GemsSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StockpileSettings_GemsSet::InitAsDefaultInstance() {
}

StockpileSettings_GemsSet::StockpileSettings_GemsSet(const StockpileSettings_GemsSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StockpileSettings_GemsSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockpileSettings_GemsSet::~StockpileSettings_GemsSet() {
  SharedDtor();
}

void StockpileSettings_GemsSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockpileSettings_GemsSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StockpileSettings_GemsSet& StockpileSettings_GemsSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpiles_2eproto();  return *default_instance_;
}

StockpileSettings_GemsSet* StockpileSettings_GemsSet::default_instance_ = NULL;

StockpileSettings_GemsSet* StockpileSettings_GemsSet::New() const {
  return new StockpileSettings_GemsSet;
}

void StockpileSettings_GemsSet::Clear() {
  rough_other_mats_.Clear();
  cut_other_mats_.Clear();
  rough_mats_.Clear();
  cut_mats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StockpileSettings_GemsSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string rough_other_mats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rough_other_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_rough_other_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rough_other_mats;
        if (input->ExpectTag(18)) goto parse_cut_other_mats;
        break;
      }
      
      // repeated string cut_other_mats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cut_other_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cut_other_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cut_other_mats;
        if (input->ExpectTag(26)) goto parse_rough_mats;
        break;
      }
      
      // repeated string rough_mats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rough_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_rough_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rough_mats;
        if (input->ExpectTag(34)) goto parse_cut_mats;
        break;
      }
      
      // repeated string cut_mats = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cut_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cut_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cut_mats;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockpileSettings_GemsSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string rough_other_mats = 1;
  for (int i = 0; i < this->rough_other_mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rough_other_mats(i), output);
  }
  
  // repeated string cut_other_mats = 2;
  for (int i = 0; i < this->cut_other_mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cut_other_mats(i), output);
  }
  
  // repeated string rough_mats = 3;
  for (int i = 0; i < this->rough_mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rough_mats(i), output);
  }
  
  // repeated string cut_mats = 4;
  for (int i = 0; i < this->cut_mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cut_mats(i), output);
  }
  
}

int StockpileSettings_GemsSet::ByteSize() const {
  int total_size = 0;
  
  // repeated string rough_other_mats = 1;
  total_size += 1 * this->rough_other_mats_size();
  for (int i = 0; i < this->rough_other_mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->rough_other_mats(i));
  }
  
  // repeated string cut_other_mats = 2;
  total_size += 1 * this->cut_other_mats_size();
  for (int i = 0; i < this->cut_other_mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cut_other_mats(i));
  }
  
  // repeated string rough_mats = 3;
  total_size += 1 * this->rough_mats_size();
  for (int i = 0; i < this->rough_mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->rough_mats(i));
  }
  
  // repeated string cut_mats = 4;
  total_size += 1 * this->cut_mats_size();
  for (int i = 0; i < this->cut_mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cut_mats(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockpileSettings_GemsSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StockpileSettings_GemsSet*>(&from));
}

void StockpileSettings_GemsSet::MergeFrom(const StockpileSettings_GemsSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  rough_other_mats_.MergeFrom(from.rough_other_mats_);
  cut_other_mats_.MergeFrom(from.cut_other_mats_);
  rough_mats_.MergeFrom(from.rough_mats_);
  cut_mats_.MergeFrom(from.cut_mats_);
}

void StockpileSettings_GemsSet::CopyFrom(const StockpileSettings_GemsSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockpileSettings_GemsSet::IsInitialized() const {
  
  return true;
}

void StockpileSettings_GemsSet::Swap(StockpileSettings_GemsSet* other) {
  if (other != this) {
    rough_other_mats_.Swap(&other->rough_other_mats_);
    cut_other_mats_.Swap(&other->cut_other_mats_);
    rough_mats_.Swap(&other->rough_mats_);
    cut_mats_.Swap(&other->cut_mats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StockpileSettings_GemsSet::GetTypeName() const {
  return "dfstockpiles.StockpileSettings.GemsSet";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StockpileSettings_FinishedGoodsSet::kTypeFieldNumber;
const int StockpileSettings_FinishedGoodsSet::kOtherMatsFieldNumber;
const int StockpileSettings_FinishedGoodsSet::kMatsFieldNumber;
const int StockpileSettings_FinishedGoodsSet::kQualityCoreFieldNumber;
const int StockpileSettings_FinishedGoodsSet::kQualityTotalFieldNumber;
#endif  // !_MSC_VER

StockpileSettings_FinishedGoodsSet::StockpileSettings_FinishedGoodsSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StockpileSettings_FinishedGoodsSet::InitAsDefaultInstance() {
}

StockpileSettings_FinishedGoodsSet::StockpileSettings_FinishedGoodsSet(const StockpileSettings_FinishedGoodsSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StockpileSettings_FinishedGoodsSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockpileSettings_FinishedGoodsSet::~StockpileSettings_FinishedGoodsSet() {
  SharedDtor();
}

void StockpileSettings_FinishedGoodsSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockpileSettings_FinishedGoodsSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StockpileSettings_FinishedGoodsSet& StockpileSettings_FinishedGoodsSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpiles_2eproto();  return *default_instance_;
}

StockpileSettings_FinishedGoodsSet* StockpileSettings_FinishedGoodsSet::default_instance_ = NULL;

StockpileSettings_FinishedGoodsSet* StockpileSettings_FinishedGoodsSet::New() const {
  return new StockpileSettings_FinishedGoodsSet;
}

void StockpileSettings_FinishedGoodsSet::Clear() {
  type_.Clear();
  other_mats_.Clear();
  mats_.Clear();
  quality_core_.Clear();
  quality_total_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StockpileSettings_FinishedGoodsSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_type;
        if (input->ExpectTag(18)) goto parse_other_mats;
        break;
      }
      
      // repeated string other_mats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_other_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_other_mats;
        if (input->ExpectTag(26)) goto parse_mats;
        break;
      }
      
      // repeated string mats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mats;
        if (input->ExpectTag(34)) goto parse_quality_core;
        break;
      }
      
      // repeated string quality_core = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_core:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_quality_core()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_quality_core;
        if (input->ExpectTag(42)) goto parse_quality_total;
        break;
      }
      
      // repeated string quality_total = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_quality_total()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_quality_total;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockpileSettings_FinishedGoodsSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(i), output);
  }
  
  // repeated string other_mats = 2;
  for (int i = 0; i < this->other_mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->other_mats(i), output);
  }
  
  // repeated string mats = 3;
  for (int i = 0; i < this->mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mats(i), output);
  }
  
  // repeated string quality_core = 4;
  for (int i = 0; i < this->quality_core_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->quality_core(i), output);
  }
  
  // repeated string quality_total = 5;
  for (int i = 0; i < this->quality_total_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->quality_total(i), output);
  }
  
}

int StockpileSettings_FinishedGoodsSet::ByteSize() const {
  int total_size = 0;
  
  // repeated string type = 1;
  total_size += 1 * this->type_size();
  for (int i = 0; i < this->type_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->type(i));
  }
  
  // repeated string other_mats = 2;
  total_size += 1 * this->other_mats_size();
  for (int i = 0; i < this->other_mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->other_mats(i));
  }
  
  // repeated string mats = 3;
  total_size += 1 * this->mats_size();
  for (int i = 0; i < this->mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mats(i));
  }
  
  // repeated string quality_core = 4;
  total_size += 1 * this->quality_core_size();
  for (int i = 0; i < this->quality_core_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->quality_core(i));
  }
  
  // repeated string quality_total = 5;
  total_size += 1 * this->quality_total_size();
  for (int i = 0; i < this->quality_total_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->quality_total(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockpileSettings_FinishedGoodsSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StockpileSettings_FinishedGoodsSet*>(&from));
}

void StockpileSettings_FinishedGoodsSet::MergeFrom(const StockpileSettings_FinishedGoodsSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  other_mats_.MergeFrom(from.other_mats_);
  mats_.MergeFrom(from.mats_);
  quality_core_.MergeFrom(from.quality_core_);
  quality_total_.MergeFrom(from.quality_total_);
}

void StockpileSettings_FinishedGoodsSet::CopyFrom(const StockpileSettings_FinishedGoodsSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockpileSettings_FinishedGoodsSet::IsInitialized() const {
  
  return true;
}

void StockpileSettings_FinishedGoodsSet::Swap(StockpileSettings_FinishedGoodsSet* other) {
  if (other != this) {
    type_.Swap(&other->type_);
    other_mats_.Swap(&other->other_mats_);
    mats_.Swap(&other->mats_);
    quality_core_.Swap(&other->quality_core_);
    quality_total_.Swap(&other->quality_total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StockpileSettings_FinishedGoodsSet::GetTypeName() const {
  return "dfstockpiles.StockpileSettings.FinishedGoodsSet";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StockpileSettings_LeatherSet::kMatsFieldNumber;
#endif  // !_MSC_VER

StockpileSettings_LeatherSet::StockpileSettings_LeatherSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StockpileSettings_LeatherSet::InitAsDefaultInstance() {
}

StockpileSettings_LeatherSet::StockpileSettings_LeatherSet(const StockpileSettings_LeatherSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StockpileSettings_LeatherSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockpileSettings_LeatherSet::~StockpileSettings_LeatherSet() {
  SharedDtor();
}

void StockpileSettings_LeatherSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockpileSettings_LeatherSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StockpileSettings_LeatherSet& StockpileSettings_LeatherSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpiles_2eproto();  return *default_instance_;
}

StockpileSettings_LeatherSet* StockpileSettings_LeatherSet::default_instance_ = NULL;

StockpileSettings_LeatherSet* StockpileSettings_LeatherSet::New() const {
  return new StockpileSettings_LeatherSet;
}

void StockpileSettings_LeatherSet::Clear() {
  mats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StockpileSettings_LeatherSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string mats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mats;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockpileSettings_LeatherSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string mats = 1;
  for (int i = 0; i < this->mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mats(i), output);
  }
  
}

int StockpileSettings_LeatherSet::ByteSize() const {
  int total_size = 0;
  
  // repeated string mats = 1;
  total_size += 1 * this->mats_size();
  for (int i = 0; i < this->mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mats(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockpileSettings_LeatherSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StockpileSettings_LeatherSet*>(&from));
}

void StockpileSettings_LeatherSet::MergeFrom(const StockpileSettings_LeatherSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  mats_.MergeFrom(from.mats_);
}

void StockpileSettings_LeatherSet::CopyFrom(const StockpileSettings_LeatherSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockpileSettings_LeatherSet::IsInitialized() const {
  
  return true;
}

void StockpileSettings_LeatherSet::Swap(StockpileSettings_LeatherSet* other) {
  if (other != this) {
    mats_.Swap(&other->mats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StockpileSettings_LeatherSet::GetTypeName() const {
  return "dfstockpiles.StockpileSettings.LeatherSet";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StockpileSettings_ClothSet::kThreadSilkFieldNumber;
const int StockpileSettings_ClothSet::kThreadPlantFieldNumber;
const int StockpileSettings_ClothSet::kThreadYarnFieldNumber;
const int StockpileSettings_ClothSet::kThreadMetalFieldNumber;
const int StockpileSettings_ClothSet::kClothSilkFieldNumber;
const int StockpileSettings_ClothSet::kClothPlantFieldNumber;
const int StockpileSettings_ClothSet::kClothYarnFieldNumber;
const int StockpileSettings_ClothSet::kClothMetalFieldNumber;
#endif  // !_MSC_VER

StockpileSettings_ClothSet::StockpileSettings_ClothSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StockpileSettings_ClothSet::InitAsDefaultInstance() {
}

StockpileSettings_ClothSet::StockpileSettings_ClothSet(const StockpileSettings_ClothSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StockpileSettings_ClothSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockpileSettings_ClothSet::~StockpileSettings_ClothSet() {
  SharedDtor();
}

void StockpileSettings_ClothSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockpileSettings_ClothSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StockpileSettings_ClothSet& StockpileSettings_ClothSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpiles_2eproto();  return *default_instance_;
}

StockpileSettings_ClothSet* StockpileSettings_ClothSet::default_instance_ = NULL;

StockpileSettings_ClothSet* StockpileSettings_ClothSet::New() const {
  return new StockpileSettings_ClothSet;
}

void StockpileSettings_ClothSet::Clear() {
  thread_silk_.Clear();
  thread_plant_.Clear();
  thread_yarn_.Clear();
  thread_metal_.Clear();
  cloth_silk_.Clear();
  cloth_plant_.Clear();
  cloth_yarn_.Clear();
  cloth_metal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StockpileSettings_ClothSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string thread_silk = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thread_silk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_thread_silk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_thread_silk;
        if (input->ExpectTag(18)) goto parse_thread_plant;
        break;
      }
      
      // repeated string thread_plant = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thread_plant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_thread_plant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_thread_plant;
        if (input->ExpectTag(26)) goto parse_thread_yarn;
        break;
      }
      
      // repeated string thread_yarn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thread_yarn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_thread_yarn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_thread_yarn;
        if (input->ExpectTag(34)) goto parse_thread_metal;
        break;
      }
      
      // repeated string thread_metal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thread_metal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_thread_metal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_thread_metal;
        if (input->ExpectTag(42)) goto parse_cloth_silk;
        break;
      }
      
      // repeated string cloth_silk = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cloth_silk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cloth_silk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cloth_silk;
        if (input->ExpectTag(50)) goto parse_cloth_plant;
        break;
      }
      
      // repeated string cloth_plant = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cloth_plant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cloth_plant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cloth_plant;
        if (input->ExpectTag(58)) goto parse_cloth_yarn;
        break;
      }
      
      // repeated string cloth_yarn = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cloth_yarn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cloth_yarn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_cloth_yarn;
        if (input->ExpectTag(66)) goto parse_cloth_metal;
        break;
      }
      
      // repeated string cloth_metal = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cloth_metal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cloth_metal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cloth_metal;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockpileSettings_ClothSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string thread_silk = 1;
  for (int i = 0; i < this->thread_silk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->thread_silk(i), output);
  }
  
  // repeated string thread_plant = 2;
  for (int i = 0; i < this->thread_plant_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->thread_plant(i), output);
  }
  
  // repeated string thread_yarn = 3;
  for (int i = 0; i < this->thread_yarn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->thread_yarn(i), output);
  }
  
  // repeated string thread_metal = 4;
  for (int i = 0; i < this->thread_metal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->thread_metal(i), output);
  }
  
  // repeated string cloth_silk = 5;
  for (int i = 0; i < this->cloth_silk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cloth_silk(i), output);
  }
  
  // repeated string cloth_plant = 6;
  for (int i = 0; i < this->cloth_plant_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->cloth_plant(i), output);
  }
  
  // repeated string cloth_yarn = 7;
  for (int i = 0; i < this->cloth_yarn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->cloth_yarn(i), output);
  }
  
  // repeated string cloth_metal = 8;
  for (int i = 0; i < this->cloth_metal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->cloth_metal(i), output);
  }
  
}

int StockpileSettings_ClothSet::ByteSize() const {
  int total_size = 0;
  
  // repeated string thread_silk = 1;
  total_size += 1 * this->thread_silk_size();
  for (int i = 0; i < this->thread_silk_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->thread_silk(i));
  }
  
  // repeated string thread_plant = 2;
  total_size += 1 * this->thread_plant_size();
  for (int i = 0; i < this->thread_plant_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->thread_plant(i));
  }
  
  // repeated string thread_yarn = 3;
  total_size += 1 * this->thread_yarn_size();
  for (int i = 0; i < this->thread_yarn_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->thread_yarn(i));
  }
  
  // repeated string thread_metal = 4;
  total_size += 1 * this->thread_metal_size();
  for (int i = 0; i < this->thread_metal_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->thread_metal(i));
  }
  
  // repeated string cloth_silk = 5;
  total_size += 1 * this->cloth_silk_size();
  for (int i = 0; i < this->cloth_silk_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cloth_silk(i));
  }
  
  // repeated string cloth_plant = 6;
  total_size += 1 * this->cloth_plant_size();
  for (int i = 0; i < this->cloth_plant_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cloth_plant(i));
  }
  
  // repeated string cloth_yarn = 7;
  total_size += 1 * this->cloth_yarn_size();
  for (int i = 0; i < this->cloth_yarn_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cloth_yarn(i));
  }
  
  // repeated string cloth_metal = 8;
  total_size += 1 * this->cloth_metal_size();
  for (int i = 0; i < this->cloth_metal_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cloth_metal(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockpileSettings_ClothSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StockpileSettings_ClothSet*>(&from));
}

void StockpileSettings_ClothSet::MergeFrom(const StockpileSettings_ClothSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  thread_silk_.MergeFrom(from.thread_silk_);
  thread_plant_.MergeFrom(from.thread_plant_);
  thread_yarn_.MergeFrom(from.thread_yarn_);
  thread_metal_.MergeFrom(from.thread_metal_);
  cloth_silk_.MergeFrom(from.cloth_silk_);
  cloth_plant_.MergeFrom(from.cloth_plant_);
  cloth_yarn_.MergeFrom(from.cloth_yarn_);
  cloth_metal_.MergeFrom(from.cloth_metal_);
}

void StockpileSettings_ClothSet::CopyFrom(const StockpileSettings_ClothSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockpileSettings_ClothSet::IsInitialized() const {
  
  return true;
}

void StockpileSettings_ClothSet::Swap(StockpileSettings_ClothSet* other) {
  if (other != this) {
    thread_silk_.Swap(&other->thread_silk_);
    thread_plant_.Swap(&other->thread_plant_);
    thread_yarn_.Swap(&other->thread_yarn_);
    thread_metal_.Swap(&other->thread_metal_);
    cloth_silk_.Swap(&other->cloth_silk_);
    cloth_plant_.Swap(&other->cloth_plant_);
    cloth_yarn_.Swap(&other->cloth_yarn_);
    cloth_metal_.Swap(&other->cloth_metal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StockpileSettings_ClothSet::GetTypeName() const {
  return "dfstockpiles.StockpileSettings.ClothSet";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StockpileSettings_WoodSet::kMatsFieldNumber;
#endif  // !_MSC_VER

StockpileSettings_WoodSet::StockpileSettings_WoodSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StockpileSettings_WoodSet::InitAsDefaultInstance() {
}

StockpileSettings_WoodSet::StockpileSettings_WoodSet(const StockpileSettings_WoodSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StockpileSettings_WoodSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockpileSettings_WoodSet::~StockpileSettings_WoodSet() {
  SharedDtor();
}

void StockpileSettings_WoodSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockpileSettings_WoodSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StockpileSettings_WoodSet& StockpileSettings_WoodSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpiles_2eproto();  return *default_instance_;
}

StockpileSettings_WoodSet* StockpileSettings_WoodSet::default_instance_ = NULL;

StockpileSettings_WoodSet* StockpileSettings_WoodSet::New() const {
  return new StockpileSettings_WoodSet;
}

void StockpileSettings_WoodSet::Clear() {
  mats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StockpileSettings_WoodSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string mats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mats;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockpileSettings_WoodSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string mats = 1;
  for (int i = 0; i < this->mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mats(i), output);
  }
  
}

int StockpileSettings_WoodSet::ByteSize() const {
  int total_size = 0;
  
  // repeated string mats = 1;
  total_size += 1 * this->mats_size();
  for (int i = 0; i < this->mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mats(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockpileSettings_WoodSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StockpileSettings_WoodSet*>(&from));
}

void StockpileSettings_WoodSet::MergeFrom(const StockpileSettings_WoodSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  mats_.MergeFrom(from.mats_);
}

void StockpileSettings_WoodSet::CopyFrom(const StockpileSettings_WoodSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockpileSettings_WoodSet::IsInitialized() const {
  
  return true;
}

void StockpileSettings_WoodSet::Swap(StockpileSettings_WoodSet* other) {
  if (other != this) {
    mats_.Swap(&other->mats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StockpileSettings_WoodSet::GetTypeName() const {
  return "dfstockpiles.StockpileSettings.WoodSet";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StockpileSettings_WeaponsSet::kWeaponTypeFieldNumber;
const int StockpileSettings_WeaponsSet::kTrapcompTypeFieldNumber;
const int StockpileSettings_WeaponsSet::kOtherMatsFieldNumber;
const int StockpileSettings_WeaponsSet::kMatsFieldNumber;
const int StockpileSettings_WeaponsSet::kQualityCoreFieldNumber;
const int StockpileSettings_WeaponsSet::kQualityTotalFieldNumber;
const int StockpileSettings_WeaponsSet::kUsableFieldNumber;
const int StockpileSettings_WeaponsSet::kUnusableFieldNumber;
#endif  // !_MSC_VER

StockpileSettings_WeaponsSet::StockpileSettings_WeaponsSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StockpileSettings_WeaponsSet::InitAsDefaultInstance() {
}

StockpileSettings_WeaponsSet::StockpileSettings_WeaponsSet(const StockpileSettings_WeaponsSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StockpileSettings_WeaponsSet::SharedCtor() {
  _cached_size_ = 0;
  usable_ = false;
  unusable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockpileSettings_WeaponsSet::~StockpileSettings_WeaponsSet() {
  SharedDtor();
}

void StockpileSettings_WeaponsSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockpileSettings_WeaponsSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StockpileSettings_WeaponsSet& StockpileSettings_WeaponsSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpiles_2eproto();  return *default_instance_;
}

StockpileSettings_WeaponsSet* StockpileSettings_WeaponsSet::default_instance_ = NULL;

StockpileSettings_WeaponsSet* StockpileSettings_WeaponsSet::New() const {
  return new StockpileSettings_WeaponsSet;
}

void StockpileSettings_WeaponsSet::Clear() {
  if (_has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    usable_ = false;
    unusable_ = false;
  }
  weapon_type_.Clear();
  trapcomp_type_.Clear();
  other_mats_.Clear();
  mats_.Clear();
  quality_core_.Clear();
  quality_total_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StockpileSettings_WeaponsSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string weapon_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weapon_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_weapon_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_weapon_type;
        if (input->ExpectTag(18)) goto parse_trapcomp_type;
        break;
      }
      
      // repeated string trapcomp_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trapcomp_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_trapcomp_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trapcomp_type;
        if (input->ExpectTag(26)) goto parse_other_mats;
        break;
      }
      
      // repeated string other_mats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_other_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_other_mats;
        if (input->ExpectTag(34)) goto parse_mats;
        break;
      }
      
      // repeated string mats = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mats;
        if (input->ExpectTag(42)) goto parse_quality_core;
        break;
      }
      
      // repeated string quality_core = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_core:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_quality_core()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_quality_core;
        if (input->ExpectTag(50)) goto parse_quality_total;
        break;
      }
      
      // repeated string quality_total = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_quality_total()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_quality_total;
        if (input->ExpectTag(56)) goto parse_usable;
        break;
      }
      
      // optional bool usable = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usable_)));
          set_has_usable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_unusable;
        break;
      }
      
      // optional bool unusable = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unusable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unusable_)));
          set_has_unusable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockpileSettings_WeaponsSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string weapon_type = 1;
  for (int i = 0; i < this->weapon_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->weapon_type(i), output);
  }
  
  // repeated string trapcomp_type = 2;
  for (int i = 0; i < this->trapcomp_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->trapcomp_type(i), output);
  }
  
  // repeated string other_mats = 3;
  for (int i = 0; i < this->other_mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->other_mats(i), output);
  }
  
  // repeated string mats = 4;
  for (int i = 0; i < this->mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mats(i), output);
  }
  
  // repeated string quality_core = 5;
  for (int i = 0; i < this->quality_core_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->quality_core(i), output);
  }
  
  // repeated string quality_total = 6;
  for (int i = 0; i < this->quality_total_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->quality_total(i), output);
  }
  
  // optional bool usable = 7;
  if (has_usable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->usable(), output);
  }
  
  // optional bool unusable = 8;
  if (has_unusable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->unusable(), output);
  }
  
}

int StockpileSettings_WeaponsSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    // optional bool usable = 7;
    if (has_usable()) {
      total_size += 1 + 1;
    }
    
    // optional bool unusable = 8;
    if (has_unusable()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated string weapon_type = 1;
  total_size += 1 * this->weapon_type_size();
  for (int i = 0; i < this->weapon_type_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->weapon_type(i));
  }
  
  // repeated string trapcomp_type = 2;
  total_size += 1 * this->trapcomp_type_size();
  for (int i = 0; i < this->trapcomp_type_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->trapcomp_type(i));
  }
  
  // repeated string other_mats = 3;
  total_size += 1 * this->other_mats_size();
  for (int i = 0; i < this->other_mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->other_mats(i));
  }
  
  // repeated string mats = 4;
  total_size += 1 * this->mats_size();
  for (int i = 0; i < this->mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mats(i));
  }
  
  // repeated string quality_core = 5;
  total_size += 1 * this->quality_core_size();
  for (int i = 0; i < this->quality_core_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->quality_core(i));
  }
  
  // repeated string quality_total = 6;
  total_size += 1 * this->quality_total_size();
  for (int i = 0; i < this->quality_total_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->quality_total(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockpileSettings_WeaponsSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StockpileSettings_WeaponsSet*>(&from));
}

void StockpileSettings_WeaponsSet::MergeFrom(const StockpileSettings_WeaponsSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  weapon_type_.MergeFrom(from.weapon_type_);
  trapcomp_type_.MergeFrom(from.trapcomp_type_);
  other_mats_.MergeFrom(from.other_mats_);
  mats_.MergeFrom(from.mats_);
  quality_core_.MergeFrom(from.quality_core_);
  quality_total_.MergeFrom(from.quality_total_);
  if (from._has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    if (from.has_usable()) {
      set_usable(from.usable());
    }
    if (from.has_unusable()) {
      set_unusable(from.unusable());
    }
  }
}

void StockpileSettings_WeaponsSet::CopyFrom(const StockpileSettings_WeaponsSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockpileSettings_WeaponsSet::IsInitialized() const {
  
  return true;
}

void StockpileSettings_WeaponsSet::Swap(StockpileSettings_WeaponsSet* other) {
  if (other != this) {
    weapon_type_.Swap(&other->weapon_type_);
    trapcomp_type_.Swap(&other->trapcomp_type_);
    other_mats_.Swap(&other->other_mats_);
    mats_.Swap(&other->mats_);
    quality_core_.Swap(&other->quality_core_);
    quality_total_.Swap(&other->quality_total_);
    std::swap(usable_, other->usable_);
    std::swap(unusable_, other->unusable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StockpileSettings_WeaponsSet::GetTypeName() const {
  return "dfstockpiles.StockpileSettings.WeaponsSet";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StockpileSettings_ArmorSet::kBodyFieldNumber;
const int StockpileSettings_ArmorSet::kHeadFieldNumber;
const int StockpileSettings_ArmorSet::kFeetFieldNumber;
const int StockpileSettings_ArmorSet::kHandsFieldNumber;
const int StockpileSettings_ArmorSet::kLegsFieldNumber;
const int StockpileSettings_ArmorSet::kShieldFieldNumber;
const int StockpileSettings_ArmorSet::kOtherMatsFieldNumber;
const int StockpileSettings_ArmorSet::kMatsFieldNumber;
const int StockpileSettings_ArmorSet::kQualityCoreFieldNumber;
const int StockpileSettings_ArmorSet::kQualityTotalFieldNumber;
const int StockpileSettings_ArmorSet::kUsableFieldNumber;
const int StockpileSettings_ArmorSet::kUnusableFieldNumber;
#endif  // !_MSC_VER

StockpileSettings_ArmorSet::StockpileSettings_ArmorSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StockpileSettings_ArmorSet::InitAsDefaultInstance() {
}

StockpileSettings_ArmorSet::StockpileSettings_ArmorSet(const StockpileSettings_ArmorSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StockpileSettings_ArmorSet::SharedCtor() {
  _cached_size_ = 0;
  usable_ = false;
  unusable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockpileSettings_ArmorSet::~StockpileSettings_ArmorSet() {
  SharedDtor();
}

void StockpileSettings_ArmorSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockpileSettings_ArmorSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StockpileSettings_ArmorSet& StockpileSettings_ArmorSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpiles_2eproto();  return *default_instance_;
}

StockpileSettings_ArmorSet* StockpileSettings_ArmorSet::default_instance_ = NULL;

StockpileSettings_ArmorSet* StockpileSettings_ArmorSet::New() const {
  return new StockpileSettings_ArmorSet;
}

void StockpileSettings_ArmorSet::Clear() {
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    usable_ = false;
    unusable_ = false;
  }
  body_.Clear();
  head_.Clear();
  feet_.Clear();
  hands_.Clear();
  legs_.Clear();
  shield_.Clear();
  other_mats_.Clear();
  mats_.Clear();
  quality_core_.Clear();
  quality_total_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StockpileSettings_ArmorSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string body = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_body;
        if (input->ExpectTag(18)) goto parse_head;
        break;
      }
      
      // repeated string head = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_head;
        if (input->ExpectTag(26)) goto parse_feet;
        break;
      }
      
      // repeated string feet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_feet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_feet;
        if (input->ExpectTag(34)) goto parse_hands;
        break;
      }
      
      // repeated string hands = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hands;
        if (input->ExpectTag(42)) goto parse_legs;
        break;
      }
      
      // repeated string legs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_legs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_legs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_legs;
        if (input->ExpectTag(50)) goto parse_shield;
        break;
      }
      
      // repeated string shield = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shield:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_shield()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_shield;
        if (input->ExpectTag(58)) goto parse_other_mats;
        break;
      }
      
      // repeated string other_mats = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_other_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_other_mats;
        if (input->ExpectTag(66)) goto parse_mats;
        break;
      }
      
      // repeated string mats = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mats;
        if (input->ExpectTag(74)) goto parse_quality_core;
        break;
      }
      
      // repeated string quality_core = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_core:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_quality_core()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_quality_core;
        if (input->ExpectTag(82)) goto parse_quality_total;
        break;
      }
      
      // repeated string quality_total = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_quality_total()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_quality_total;
        if (input->ExpectTag(88)) goto parse_usable;
        break;
      }
      
      // optional bool usable = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usable_)));
          set_has_usable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_unusable;
        break;
      }
      
      // optional bool unusable = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unusable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unusable_)));
          set_has_unusable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockpileSettings_ArmorSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string body = 1;
  for (int i = 0; i < this->body_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->body(i), output);
  }
  
  // repeated string head = 2;
  for (int i = 0; i < this->head_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->head(i), output);
  }
  
  // repeated string feet = 3;
  for (int i = 0; i < this->feet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->feet(i), output);
  }
  
  // repeated string hands = 4;
  for (int i = 0; i < this->hands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hands(i), output);
  }
  
  // repeated string legs = 5;
  for (int i = 0; i < this->legs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->legs(i), output);
  }
  
  // repeated string shield = 6;
  for (int i = 0; i < this->shield_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->shield(i), output);
  }
  
  // repeated string other_mats = 7;
  for (int i = 0; i < this->other_mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->other_mats(i), output);
  }
  
  // repeated string mats = 8;
  for (int i = 0; i < this->mats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->mats(i), output);
  }
  
  // repeated string quality_core = 9;
  for (int i = 0; i < this->quality_core_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->quality_core(i), output);
  }
  
  // repeated string quality_total = 10;
  for (int i = 0; i < this->quality_total_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->quality_total(i), output);
  }
  
  // optional bool usable = 11;
  if (has_usable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->usable(), output);
  }
  
  // optional bool unusable = 12;
  if (has_unusable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->unusable(), output);
  }
  
}

int StockpileSettings_ArmorSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional bool usable = 11;
    if (has_usable()) {
      total_size += 1 + 1;
    }
    
    // optional bool unusable = 12;
    if (has_unusable()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated string body = 1;
  total_size += 1 * this->body_size();
  for (int i = 0; i < this->body_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->body(i));
  }
  
  // repeated string head = 2;
  total_size += 1 * this->head_size();
  for (int i = 0; i < this->head_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->head(i));
  }
  
  // repeated string feet = 3;
  total_size += 1 * this->feet_size();
  for (int i = 0; i < this->feet_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->feet(i));
  }
  
  // repeated string hands = 4;
  total_size += 1 * this->hands_size();
  for (int i = 0; i < this->hands_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hands(i));
  }
  
  // repeated string legs = 5;
  total_size += 1 * this->legs_size();
  for (int i = 0; i < this->legs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->legs(i));
  }
  
  // repeated string shield = 6;
  total_size += 1 * this->shield_size();
  for (int i = 0; i < this->shield_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->shield(i));
  }
  
  // repeated string other_mats = 7;
  total_size += 1 * this->other_mats_size();
  for (int i = 0; i < this->other_mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->other_mats(i));
  }
  
  // repeated string mats = 8;
  total_size += 1 * this->mats_size();
  for (int i = 0; i < this->mats_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mats(i));
  }
  
  // repeated string quality_core = 9;
  total_size += 1 * this->quality_core_size();
  for (int i = 0; i < this->quality_core_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->quality_core(i));
  }
  
  // repeated string quality_total = 10;
  total_size += 1 * this->quality_total_size();
  for (int i = 0; i < this->quality_total_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->quality_total(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockpileSettings_ArmorSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StockpileSettings_ArmorSet*>(&from));
}

void StockpileSettings_ArmorSet::MergeFrom(const StockpileSettings_ArmorSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  body_.MergeFrom(from.body_);
  head_.MergeFrom(from.head_);
  feet_.MergeFrom(from.feet_);
  hands_.MergeFrom(from.hands_);
  legs_.MergeFrom(from.legs_);
  shield_.MergeFrom(from.shield_);
  other_mats_.MergeFrom(from.other_mats_);
  mats_.MergeFrom(from.mats_);
  quality_core_.MergeFrom(from.quality_core_);
  quality_total_.MergeFrom(from.quality_total_);
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_usable()) {
      set_usable(from.usable());
    }
    if (from.has_unusable()) {
      set_unusable(from.unusable());
    }
  }
}

void StockpileSettings_ArmorSet::CopyFrom(const StockpileSettings_ArmorSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockpileSettings_ArmorSet::IsInitialized() const {
  
  return true;
}

void StockpileSettings_ArmorSet::Swap(StockpileSettings_ArmorSet* other) {
  if (other != this) {
    body_.Swap(&other->body_);
    head_.Swap(&other->head_);
    feet_.Swap(&other->feet_);
    hands_.Swap(&other->hands_);
    legs_.Swap(&other->legs_);
    shield_.Swap(&other->shield_);
    other_mats_.Swap(&other->other_mats_);
    mats_.Swap(&other->mats_);
    quality_core_.Swap(&other->quality_core_);
    quality_total_.Swap(&other->quality_total_);
    std::swap(usable_, other->usable_);
    std::swap(unusable_, other->unusable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StockpileSettings_ArmorSet::GetTypeName() const {
  return "dfstockpiles.StockpileSettings.ArmorSet";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StockpileSettings::kAnimalsFieldNumber;
const int StockpileSettings::kFoodFieldNumber;
const int StockpileSettings::kFurnitureFieldNumber;
const int StockpileSettings::kUnknown1FieldNumber;
const int StockpileSettings::kRefuseFieldNumber;
const int StockpileSettings::kStoneFieldNumber;
const int StockpileSettings::kOreFieldNumber;
const int StockpileSettings::kAmmoFieldNumber;
const int StockpileSettings::kCoinFieldNumber;
const int StockpileSettings::kBarsblocksFieldNumber;
const int StockpileSettings::kGemsFieldNumber;
const int StockpileSettings::kFinishedGoodsFieldNumber;
const int StockpileSettings::kLeatherFieldNumber;
const int StockpileSettings::kClothFieldNumber;
const int StockpileSettings::kWoodFieldNumber;
const int StockpileSettings::kWeaponsFieldNumber;
const int StockpileSettings::kArmorFieldNumber;
const int StockpileSettings::kAllowOrganicFieldNumber;
const int StockpileSettings::kAllowInorganicFieldNumber;
const int StockpileSettings::kCorpsesFieldNumber;
const int StockpileSettings::kMaxBarrelsFieldNumber;
const int StockpileSettings::kMaxBinsFieldNumber;
const int StockpileSettings::kMaxWheelbarrowsFieldNumber;
const int StockpileSettings::kUseLinksOnlyFieldNumber;
#endif  // !_MSC_VER

StockpileSettings::StockpileSettings()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StockpileSettings::InitAsDefaultInstance() {
  animals_ = const_cast< ::dfstockpiles::StockpileSettings_AnimalsSet*>(&::dfstockpiles::StockpileSettings_AnimalsSet::default_instance());
  food_ = const_cast< ::dfstockpiles::StockpileSettings_FoodSet*>(&::dfstockpiles::StockpileSettings_FoodSet::default_instance());
  furniture_ = const_cast< ::dfstockpiles::StockpileSettings_FurnitureSet*>(&::dfstockpiles::StockpileSettings_FurnitureSet::default_instance());
  refuse_ = const_cast< ::dfstockpiles::StockpileSettings_RefuseSet*>(&::dfstockpiles::StockpileSettings_RefuseSet::default_instance());
  stone_ = const_cast< ::dfstockpiles::StockpileSettings_StoneSet*>(&::dfstockpiles::StockpileSettings_StoneSet::default_instance());
  ore_ = const_cast< ::dfstockpiles::StockpileSettings_OreSet*>(&::dfstockpiles::StockpileSettings_OreSet::default_instance());
  ammo_ = const_cast< ::dfstockpiles::StockpileSettings_AmmoSet*>(&::dfstockpiles::StockpileSettings_AmmoSet::default_instance());
  coin_ = const_cast< ::dfstockpiles::StockpileSettings_CoinSet*>(&::dfstockpiles::StockpileSettings_CoinSet::default_instance());
  barsblocks_ = const_cast< ::dfstockpiles::StockpileSettings_BarsBlocksSet*>(&::dfstockpiles::StockpileSettings_BarsBlocksSet::default_instance());
  gems_ = const_cast< ::dfstockpiles::StockpileSettings_GemsSet*>(&::dfstockpiles::StockpileSettings_GemsSet::default_instance());
  finished_goods_ = const_cast< ::dfstockpiles::StockpileSettings_FinishedGoodsSet*>(&::dfstockpiles::StockpileSettings_FinishedGoodsSet::default_instance());
  leather_ = const_cast< ::dfstockpiles::StockpileSettings_LeatherSet*>(&::dfstockpiles::StockpileSettings_LeatherSet::default_instance());
  cloth_ = const_cast< ::dfstockpiles::StockpileSettings_ClothSet*>(&::dfstockpiles::StockpileSettings_ClothSet::default_instance());
  wood_ = const_cast< ::dfstockpiles::StockpileSettings_WoodSet*>(&::dfstockpiles::StockpileSettings_WoodSet::default_instance());
  weapons_ = const_cast< ::dfstockpiles::StockpileSettings_WeaponsSet*>(&::dfstockpiles::StockpileSettings_WeaponsSet::default_instance());
  armor_ = const_cast< ::dfstockpiles::StockpileSettings_ArmorSet*>(&::dfstockpiles::StockpileSettings_ArmorSet::default_instance());
}

StockpileSettings::StockpileSettings(const StockpileSettings& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StockpileSettings::SharedCtor() {
  _cached_size_ = 0;
  animals_ = NULL;
  food_ = NULL;
  furniture_ = NULL;
  unknown1_ = 0;
  refuse_ = NULL;
  stone_ = NULL;
  ore_ = NULL;
  ammo_ = NULL;
  coin_ = NULL;
  barsblocks_ = NULL;
  gems_ = NULL;
  finished_goods_ = NULL;
  leather_ = NULL;
  cloth_ = NULL;
  wood_ = NULL;
  weapons_ = NULL;
  armor_ = NULL;
  allow_organic_ = false;
  allow_inorganic_ = false;
  corpses_ = false;
  max_barrels_ = 0;
  max_bins_ = 0;
  max_wheelbarrows_ = 0;
  use_links_only_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockpileSettings::~StockpileSettings() {
  SharedDtor();
}

void StockpileSettings::SharedDtor() {
  if (this != default_instance_) {
    delete animals_;
    delete food_;
    delete furniture_;
    delete refuse_;
    delete stone_;
    delete ore_;
    delete ammo_;
    delete coin_;
    delete barsblocks_;
    delete gems_;
    delete finished_goods_;
    delete leather_;
    delete cloth_;
    delete wood_;
    delete weapons_;
    delete armor_;
  }
}

void StockpileSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StockpileSettings& StockpileSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpiles_2eproto();  return *default_instance_;
}

StockpileSettings* StockpileSettings::default_instance_ = NULL;

StockpileSettings* StockpileSettings::New() const {
  return new StockpileSettings;
}

void StockpileSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_animals()) {
      if (animals_ != NULL) animals_->::dfstockpiles::StockpileSettings_AnimalsSet::Clear();
    }
    if (has_food()) {
      if (food_ != NULL) food_->::dfstockpiles::StockpileSettings_FoodSet::Clear();
    }
    if (has_furniture()) {
      if (furniture_ != NULL) furniture_->::dfstockpiles::StockpileSettings_FurnitureSet::Clear();
    }
    unknown1_ = 0;
    if (has_refuse()) {
      if (refuse_ != NULL) refuse_->::dfstockpiles::StockpileSettings_RefuseSet::Clear();
    }
    if (has_stone()) {
      if (stone_ != NULL) stone_->::dfstockpiles::StockpileSettings_StoneSet::Clear();
    }
    if (has_ore()) {
      if (ore_ != NULL) ore_->::dfstockpiles::StockpileSettings_OreSet::Clear();
    }
    if (has_ammo()) {
      if (ammo_ != NULL) ammo_->::dfstockpiles::StockpileSettings_AmmoSet::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_coin()) {
      if (coin_ != NULL) coin_->::dfstockpiles::StockpileSettings_CoinSet::Clear();
    }
    if (has_barsblocks()) {
      if (barsblocks_ != NULL) barsblocks_->::dfstockpiles::StockpileSettings_BarsBlocksSet::Clear();
    }
    if (has_gems()) {
      if (gems_ != NULL) gems_->::dfstockpiles::StockpileSettings_GemsSet::Clear();
    }
    if (has_finished_goods()) {
      if (finished_goods_ != NULL) finished_goods_->::dfstockpiles::StockpileSettings_FinishedGoodsSet::Clear();
    }
    if (has_leather()) {
      if (leather_ != NULL) leather_->::dfstockpiles::StockpileSettings_LeatherSet::Clear();
    }
    if (has_cloth()) {
      if (cloth_ != NULL) cloth_->::dfstockpiles::StockpileSettings_ClothSet::Clear();
    }
    if (has_wood()) {
      if (wood_ != NULL) wood_->::dfstockpiles::StockpileSettings_WoodSet::Clear();
    }
    if (has_weapons()) {
      if (weapons_ != NULL) weapons_->::dfstockpiles::StockpileSettings_WeaponsSet::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_armor()) {
      if (armor_ != NULL) armor_->::dfstockpiles::StockpileSettings_ArmorSet::Clear();
    }
    allow_organic_ = false;
    allow_inorganic_ = false;
    corpses_ = false;
    max_barrels_ = 0;
    max_bins_ = 0;
    max_wheelbarrows_ = 0;
    use_links_only_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StockpileSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dfstockpiles.StockpileSettings.AnimalsSet animals = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_animals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_food;
        break;
      }
      
      // optional .dfstockpiles.StockpileSettings.FoodSet food = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_food:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_food()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_furniture;
        break;
      }
      
      // optional .dfstockpiles.StockpileSettings.FurnitureSet furniture = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_furniture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_furniture()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unknown1;
        break;
      }
      
      // optional int32 unknown1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unknown1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknown1_)));
          set_has_unknown1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_refuse;
        break;
      }
      
      // optional .dfstockpiles.StockpileSettings.RefuseSet refuse = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refuse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_refuse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stone;
        break;
      }
      
      // optional .dfstockpiles.StockpileSettings.StoneSet stone = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ore;
        break;
      }
      
      // optional .dfstockpiles.StockpileSettings.OreSet ore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ore()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ammo;
        break;
      }
      
      // optional .dfstockpiles.StockpileSettings.AmmoSet ammo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ammo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ammo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_coin;
        break;
      }
      
      // optional .dfstockpiles.StockpileSettings.CoinSet coin = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_barsblocks;
        break;
      }
      
      // optional .dfstockpiles.StockpileSettings.BarsBlocksSet barsblocks = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_barsblocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_barsblocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_gems;
        break;
      }
      
      // optional .dfstockpiles.StockpileSettings.GemsSet gems = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_finished_goods;
        break;
      }
      
      // optional .dfstockpiles.StockpileSettings.FinishedGoodsSet finished_goods = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_finished_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finished_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_leather;
        break;
      }
      
      // optional .dfstockpiles.StockpileSettings.LeatherSet leather = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leather:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leather()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_cloth;
        break;
      }
      
      // optional .dfstockpiles.StockpileSettings.ClothSet cloth = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cloth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cloth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_wood;
        break;
      }
      
      // optional .dfstockpiles.StockpileSettings.WoodSet wood = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wood:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wood()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_weapons;
        break;
      }
      
      // optional .dfstockpiles.StockpileSettings.WeaponsSet weapons = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weapons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weapons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_armor;
        break;
      }
      
      // optional .dfstockpiles.StockpileSettings.ArmorSet armor = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_armor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_armor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_allow_organic;
        break;
      }
      
      // optional bool allow_organic = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_organic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_organic_)));
          set_has_allow_organic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_allow_inorganic;
        break;
      }
      
      // optional bool allow_inorganic = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_inorganic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_inorganic_)));
          set_has_allow_inorganic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_max_barrels;
        break;
      }
      
      // optional int32 max_barrels = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_barrels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_barrels_)));
          set_has_max_barrels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_max_bins;
        break;
      }
      
      // optional int32 max_bins = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_bins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_bins_)));
          set_has_max_bins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_max_wheelbarrows;
        break;
      }
      
      // optional int32 max_wheelbarrows = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_wheelbarrows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_wheelbarrows_)));
          set_has_max_wheelbarrows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_use_links_only;
        break;
      }
      
      // optional bool use_links_only = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_links_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_links_only_)));
          set_has_use_links_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_corpses;
        break;
      }
      
      // optional bool corpses = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corpses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &corpses_)));
          set_has_corpses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockpileSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dfstockpiles.StockpileSettings.AnimalsSet animals = 1;
  if (has_animals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->animals(), output);
  }
  
  // optional .dfstockpiles.StockpileSettings.FoodSet food = 2;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->food(), output);
  }
  
  // optional .dfstockpiles.StockpileSettings.FurnitureSet furniture = 3;
  if (has_furniture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->furniture(), output);
  }
  
  // optional int32 unknown1 = 4;
  if (has_unknown1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->unknown1(), output);
  }
  
  // optional .dfstockpiles.StockpileSettings.RefuseSet refuse = 5;
  if (has_refuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->refuse(), output);
  }
  
  // optional .dfstockpiles.StockpileSettings.StoneSet stone = 6;
  if (has_stone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->stone(), output);
  }
  
  // optional .dfstockpiles.StockpileSettings.OreSet ore = 7;
  if (has_ore()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->ore(), output);
  }
  
  // optional .dfstockpiles.StockpileSettings.AmmoSet ammo = 8;
  if (has_ammo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->ammo(), output);
  }
  
  // optional .dfstockpiles.StockpileSettings.CoinSet coin = 9;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->coin(), output);
  }
  
  // optional .dfstockpiles.StockpileSettings.BarsBlocksSet barsblocks = 10;
  if (has_barsblocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->barsblocks(), output);
  }
  
  // optional .dfstockpiles.StockpileSettings.GemsSet gems = 11;
  if (has_gems()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->gems(), output);
  }
  
  // optional .dfstockpiles.StockpileSettings.FinishedGoodsSet finished_goods = 12;
  if (has_finished_goods()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->finished_goods(), output);
  }
  
  // optional .dfstockpiles.StockpileSettings.LeatherSet leather = 13;
  if (has_leather()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->leather(), output);
  }
  
  // optional .dfstockpiles.StockpileSettings.ClothSet cloth = 14;
  if (has_cloth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->cloth(), output);
  }
  
  // optional .dfstockpiles.StockpileSettings.WoodSet wood = 15;
  if (has_wood()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->wood(), output);
  }
  
  // optional .dfstockpiles.StockpileSettings.WeaponsSet weapons = 16;
  if (has_weapons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->weapons(), output);
  }
  
  // optional .dfstockpiles.StockpileSettings.ArmorSet armor = 17;
  if (has_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->armor(), output);
  }
  
  // optional bool allow_organic = 18;
  if (has_allow_organic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->allow_organic(), output);
  }
  
  // optional bool allow_inorganic = 19;
  if (has_allow_inorganic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->allow_inorganic(), output);
  }
  
  // optional int32 max_barrels = 20;
  if (has_max_barrels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->max_barrels(), output);
  }
  
  // optional int32 max_bins = 21;
  if (has_max_bins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->max_bins(), output);
  }
  
  // optional int32 max_wheelbarrows = 22;
  if (has_max_wheelbarrows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->max_wheelbarrows(), output);
  }
  
  // optional bool use_links_only = 23;
  if (has_use_links_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->use_links_only(), output);
  }
  
  // optional bool corpses = 24;
  if (has_corpses()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->corpses(), output);
  }
  
}

int StockpileSettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dfstockpiles.StockpileSettings.AnimalsSet animals = 1;
    if (has_animals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->animals());
    }
    
    // optional .dfstockpiles.StockpileSettings.FoodSet food = 2;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->food());
    }
    
    // optional .dfstockpiles.StockpileSettings.FurnitureSet furniture = 3;
    if (has_furniture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->furniture());
    }
    
    // optional int32 unknown1 = 4;
    if (has_unknown1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unknown1());
    }
    
    // optional .dfstockpiles.StockpileSettings.RefuseSet refuse = 5;
    if (has_refuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refuse());
    }
    
    // optional .dfstockpiles.StockpileSettings.StoneSet stone = 6;
    if (has_stone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stone());
    }
    
    // optional .dfstockpiles.StockpileSettings.OreSet ore = 7;
    if (has_ore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ore());
    }
    
    // optional .dfstockpiles.StockpileSettings.AmmoSet ammo = 8;
    if (has_ammo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ammo());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .dfstockpiles.StockpileSettings.CoinSet coin = 9;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coin());
    }
    
    // optional .dfstockpiles.StockpileSettings.BarsBlocksSet barsblocks = 10;
    if (has_barsblocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->barsblocks());
    }
    
    // optional .dfstockpiles.StockpileSettings.GemsSet gems = 11;
    if (has_gems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gems());
    }
    
    // optional .dfstockpiles.StockpileSettings.FinishedGoodsSet finished_goods = 12;
    if (has_finished_goods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finished_goods());
    }
    
    // optional .dfstockpiles.StockpileSettings.LeatherSet leather = 13;
    if (has_leather()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leather());
    }
    
    // optional .dfstockpiles.StockpileSettings.ClothSet cloth = 14;
    if (has_cloth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cloth());
    }
    
    // optional .dfstockpiles.StockpileSettings.WoodSet wood = 15;
    if (has_wood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wood());
    }
    
    // optional .dfstockpiles.StockpileSettings.WeaponsSet weapons = 16;
    if (has_weapons()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weapons());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .dfstockpiles.StockpileSettings.ArmorSet armor = 17;
    if (has_armor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->armor());
    }
    
    // optional bool allow_organic = 18;
    if (has_allow_organic()) {
      total_size += 2 + 1;
    }
    
    // optional bool allow_inorganic = 19;
    if (has_allow_inorganic()) {
      total_size += 2 + 1;
    }
    
    // optional bool corpses = 24;
    if (has_corpses()) {
      total_size += 2 + 1;
    }
    
    // optional int32 max_barrels = 20;
    if (has_max_barrels()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_barrels());
    }
    
    // optional int32 max_bins = 21;
    if (has_max_bins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_bins());
    }
    
    // optional int32 max_wheelbarrows = 22;
    if (has_max_wheelbarrows()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_wheelbarrows());
    }
    
    // optional bool use_links_only = 23;
    if (has_use_links_only()) {
      total_size += 2 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockpileSettings::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StockpileSettings*>(&from));
}

void StockpileSettings::MergeFrom(const StockpileSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_animals()) {
      mutable_animals()->::dfstockpiles::StockpileSettings_AnimalsSet::MergeFrom(from.animals());
    }
    if (from.has_food()) {
      mutable_food()->::dfstockpiles::StockpileSettings_FoodSet::MergeFrom(from.food());
    }
    if (from.has_furniture()) {
      mutable_furniture()->::dfstockpiles::StockpileSettings_FurnitureSet::MergeFrom(from.furniture());
    }
    if (from.has_unknown1()) {
      set_unknown1(from.unknown1());
    }
    if (from.has_refuse()) {
      mutable_refuse()->::dfstockpiles::StockpileSettings_RefuseSet::MergeFrom(from.refuse());
    }
    if (from.has_stone()) {
      mutable_stone()->::dfstockpiles::StockpileSettings_StoneSet::MergeFrom(from.stone());
    }
    if (from.has_ore()) {
      mutable_ore()->::dfstockpiles::StockpileSettings_OreSet::MergeFrom(from.ore());
    }
    if (from.has_ammo()) {
      mutable_ammo()->::dfstockpiles::StockpileSettings_AmmoSet::MergeFrom(from.ammo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_coin()) {
      mutable_coin()->::dfstockpiles::StockpileSettings_CoinSet::MergeFrom(from.coin());
    }
    if (from.has_barsblocks()) {
      mutable_barsblocks()->::dfstockpiles::StockpileSettings_BarsBlocksSet::MergeFrom(from.barsblocks());
    }
    if (from.has_gems()) {
      mutable_gems()->::dfstockpiles::StockpileSettings_GemsSet::MergeFrom(from.gems());
    }
    if (from.has_finished_goods()) {
      mutable_finished_goods()->::dfstockpiles::StockpileSettings_FinishedGoodsSet::MergeFrom(from.finished_goods());
    }
    if (from.has_leather()) {
      mutable_leather()->::dfstockpiles::StockpileSettings_LeatherSet::MergeFrom(from.leather());
    }
    if (from.has_cloth()) {
      mutable_cloth()->::dfstockpiles::StockpileSettings_ClothSet::MergeFrom(from.cloth());
    }
    if (from.has_wood()) {
      mutable_wood()->::dfstockpiles::StockpileSettings_WoodSet::MergeFrom(from.wood());
    }
    if (from.has_weapons()) {
      mutable_weapons()->::dfstockpiles::StockpileSettings_WeaponsSet::MergeFrom(from.weapons());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_armor()) {
      mutable_armor()->::dfstockpiles::StockpileSettings_ArmorSet::MergeFrom(from.armor());
    }
    if (from.has_allow_organic()) {
      set_allow_organic(from.allow_organic());
    }
    if (from.has_allow_inorganic()) {
      set_allow_inorganic(from.allow_inorganic());
    }
    if (from.has_corpses()) {
      set_corpses(from.corpses());
    }
    if (from.has_max_barrels()) {
      set_max_barrels(from.max_barrels());
    }
    if (from.has_max_bins()) {
      set_max_bins(from.max_bins());
    }
    if (from.has_max_wheelbarrows()) {
      set_max_wheelbarrows(from.max_wheelbarrows());
    }
    if (from.has_use_links_only()) {
      set_use_links_only(from.use_links_only());
    }
  }
}

void StockpileSettings::CopyFrom(const StockpileSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockpileSettings::IsInitialized() const {
  
  return true;
}

void StockpileSettings::Swap(StockpileSettings* other) {
  if (other != this) {
    std::swap(animals_, other->animals_);
    std::swap(food_, other->food_);
    std::swap(furniture_, other->furniture_);
    std::swap(unknown1_, other->unknown1_);
    std::swap(refuse_, other->refuse_);
    std::swap(stone_, other->stone_);
    std::swap(ore_, other->ore_);
    std::swap(ammo_, other->ammo_);
    std::swap(coin_, other->coin_);
    std::swap(barsblocks_, other->barsblocks_);
    std::swap(gems_, other->gems_);
    std::swap(finished_goods_, other->finished_goods_);
    std::swap(leather_, other->leather_);
    std::swap(cloth_, other->cloth_);
    std::swap(wood_, other->wood_);
    std::swap(weapons_, other->weapons_);
    std::swap(armor_, other->armor_);
    std::swap(allow_organic_, other->allow_organic_);
    std::swap(allow_inorganic_, other->allow_inorganic_);
    std::swap(corpses_, other->corpses_);
    std::swap(max_barrels_, other->max_barrels_);
    std::swap(max_bins_, other->max_bins_);
    std::swap(max_wheelbarrows_, other->max_wheelbarrows_);
    std::swap(use_links_only_, other->use_links_only_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StockpileSettings::GetTypeName() const {
  return "dfstockpiles.StockpileSettings";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dfstockpiles

// @@protoc_insertion_point(global_scope)
