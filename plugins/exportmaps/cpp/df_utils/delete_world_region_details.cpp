/*
  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
*/

// You can always find the latest version of this plugin in Github
// https://github.com/ragundo/exportmaps

#include "../../include/dfhack.h"


using namespace std;

/*****************************************************************************
Module local variables

*****************************************************************************/

static unsigned int address_Windows = 0x004433D0; // Default for DF42.06
static unsigned int address_Linux   = 0x08087AD0; // Default for DF42.06
static unsigned int address_Mac     = 0x0E2140;   // Default for DF42.06

/*****************************************************************************
Local functions forward declaration
*****************************************************************************/

void delete_world_region_details_Windows(df::world_region_details* ptr_world_region_details);
void delete_world_region_details_Linux_OSX(df::world_region_details* ptr_world_region_details);


/**************************************************************************
 Main function
 Deletes a df::world_region_details.

 For each world_region_details generated by the plugin its resources must
 be destroyed after use them.

 Unfortunately, DF stores region_details as a vector of pointers to
 df::world_region_details. std::vector destructor for a raw pointer
 don't call the destructor of the object pointed to so we must do that job ourselves.

 df::world_region_details has mostly simple fields, but there's  a
 std::vector<world_region_feature*> features[16][16]
 that must be disposed properly before deleting the object. If not,
 a memory corruption is generated.

 There's another DF function that does that, so we call that routine from our code.
 As with fill_world_region_details, there're versions for Linux and Windows
**************************************************************************/

void delete_world_region_details(df::world_region_details* ptr_world_region_details)
{
  #if defined(_WIN32) || defined(__WIN32__) || defined(__WINDOWS__)
  delete_world_region_details_Windows(ptr_world_region_details);
  #endif // Windows

  #if defined (LINUX_BUILD) || defined (_DARWIN)
  delete_world_region_details_Linux_OSX(ptr_world_region_details);
  #endif // Linux
}


//----------------------------------------------------------------------------//
// Utility function
//
//----------------------------------------------------------------------------//
void delete_world_region_details_Windows(df::world_region_details* ptr_world_region_details)
{
#if defined(_WIN32) || defined(__WIN32__) || defined(__WINDOWS__)

  // Adjust the real address
  unsigned int delta = DFHack::Core::getInstance().vinfo->getRebaseDelta();
  unsigned int address_DF_sub = address_Windows + delta;

  // Call DF function
  __asm mov  eax, ptr_world_region_details
  __asm call address_DF_sub                    /* call the DF subroutine */

#endif
}


//----------------------------------------------------------------------------//
// Utility function
//
//----------------------------------------------------------------------------//
void delete_world_region_details_Linux_OSX(df::world_region_details* ptr_world_region_details)
{
#ifdef LINUX_BUILD


  asm volatile ("movl %0    ,%%eax;    "         /* address_DF_sub to eax                                 */
                "movl %1    ,%%ecx;    "         /* address of world.world_data.region_details to ecx     */
                "sub  $0x10 ,%%esp;    "         /* make space in the heap for the parameters             */
                "mov  %%ecx ,(%%esp);  "         /* store param 1                                         */
                "call *%%eax;          "         /* call the DF subroutine                                */
                "add  $0x10  ,%%esp;   "         /* release the space used in the heap for the parameters */
                :                                /* no output parameters                                  */
                : "m" (address_Linux),           /* input parameter                                       */
                  "m" (ptr_world_region_details) /* input parameter                                       */
                : "eax", "ecx"                   /* used registers                                        */
              );

#endif

#ifdef _DARWIN


  asm volatile ("movl %0    ,%%eax;    "         /* address_DF_sub to eax                                 */
                "movl %1    ,%%ecx;    "         /* address of world.world_data.region_details to ecx     */
                "sub  $0x10 ,%%esp;    "         /* make space in the heap for the parameters             */
                "mov  %%ecx ,(%%esp);  "         /* store param 1                                         */
                "call *%%eax;          "         /* call the DF subroutine                                */
                "add  $0x10  ,%%esp;   "         /* release the space used in the heap for the parameters */
                :                                /* no output parameters                                  */
                : "m" (address_Mac),             /* input parameter                                       */
                  "m" (ptr_world_region_details) /* input parameter                                       */
                : "eax", "ecx"                   /* used registers                                        */
              );

#endif
}



