{"version":1,"ops":[{"type":5,"author":{"id":"88b79c31fdfd52952dafcabb16168259734368cc"},"timestamp":1461612355,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDY0MDUwMzE0Nw=="},"added":["idea"],"removed":[]},{"type":5,"author":{"id":"88b79c31fdfd52952dafcabb16168259734368cc"},"timestamp":1461612355,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDY0MDUwMzE0OA=="},"added":["lua"],"removed":[]},{"type":5,"author":{"id":"88b79c31fdfd52952dafcabb16168259734368cc"},"timestamp":1461612355,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDY0MDUwMzE0OQ=="},"added":["develop only"],"removed":[]},{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1461620819,"metadata":{"github-id":"MDE0OlVubGFiZWxlZEV2ZW50NjQwNjg1MjE3"},"added":[],"removed":["develop only"]},{"type":3,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1497993727,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMwOTg5NTYwMA==","github-url":"https://github.com/DFHack/dfhack/issues/908#issuecomment-309895600"},"message":"I just happen to have made a Grid widget that allows you to address individual coordinates to write characters with and without pen info. As far as I can see it works, although I haven't actually tested the viewport functionality. I've used it in my regionmanipulator.lua script (https://www.dropbox.com/s/l0jkgn27zrf2xh4/regionmanipulator.lua?dl=0) where a 16*16 embark region grid is represented.","files":null},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1498021365,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMwOTk2Mzk1Mw==","github-url":"https://github.com/DFHack/dfhack/issues/908#issuecomment-309963953"},"message":"I took a look at that. There's a native `dfhack.penarray` class that you could probably use, which would be faster and supports clipping (but currently not resizing). You should also be using `error()` for errors, or `dfhack.printerr()` if that isn't appropriate (which will at least avoid having to call `dfhack.color()` twice).","files":null},{"type":3,"author":{"id":"df7feee793b3a4f60453609739052ef8e882d092"},"timestamp":1498044946,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMxMDA1MTUxNQ==","github-url":"https://github.com/DFHack/dfhack/issues/908#issuecomment-310051515"},"message":"Excellent advice as usual, lethosor!\nI reworked it and it seems to be working as it intended (the widget added at the end of the post).\n\nYou probably can't replicate the world map *exactly* because DF seems to use multiple tiles for the same biome to create variation. However, using Ragundo's code for biome determination and a map of biome to character you can recreate the biomes (I've done it, using my own character map, to do this in my showbiomes and tweakmap tools, using Ragundo's logic for biome determination). You'd then have to add volcanoes, settlements, peaks, caves, and rivers (and possibly something on top of that).\n\nReworked Grid widget (viewport still completely untested):\n```lua\n--================================================================\n--  The Grid widget defines an pen supporting X/Y character display grid supporting display of\n--  a grid larger than the frame allows through a panning viewport. The init function requires\n--  the specification of the width and height attributes that defines the grid dimensions.\n--  The grid coordinates are 0 based.\n--\nGrid = defclass (Grid, widgets.Widget)\nGrid.ATTRS = \n  {width = DEFAULT_NIL,\n   height = DEFAULT_NIL}\n\n--================================================================\n\nfunction Grid:init ()\n  if type (self.width) ~= 'number' or\n     type (self.height) ~= 'number' or\n\t self.width \u003c 0 or\n\t self.height \u003c 0 then\n    error (\"Grid widgets have to have their width and height set permanently on initiation\")\n\treturn\n  end\n  \n  self.grid = dfhack.penarray.new (self.width, self.height)\n  \n  self.viewport = {x1 = 0,\n                   x2 = self.frame.r - self.frame.l,\n\t\t\t\t   y1 = 0,\n\t\t\t\t   y2 = self.frame.b - self.frame.t}  \nend\n\n--================================================================\n--  Pans the viewport in the X and Y dimensions the number of steps specified by the parameters.\n--  It will stop the panning at 0, however, and will not pan outside of the grid (a grid smaller)\n--  than the frame will still have non grid parts in the frame, of course).\n--\nfunction Grid:pan (x, y)\n  local x_size = self.viewport.x2 - self.viewport.x1 + 1\n  local y_size = self.viewport.y2 - self.viewport.y1 + 1\n  \n  self.viewport.x1 = self.viewport.x1 + x\n\n  if self.viewport.x1 + x_size \u003e self.width then\n    self.viewport.x1 = self.width - x_size\n  end\n  \n  if self.viewport.x1 \u003c 0 then\n    self.viewport.x1 = 0\n  end\n  \n  self.viewport.x2 = self.viewport.x1 + x_size - 1\n  \n  self.viewport.y1 = self.viewport.y1 + y\n  \n  if self.viewport.y1 + y_size \u003e self.height then\n    self.viewport.y1 = self.height - y_size\n  end\n  \n  if self.viewport.y1 \u003c 0 then\n    self.viewport.y1 = 0\n  end\n  \n  self.viewport.y2 = self.viewport.y1 + y_size - 1\nend\n\n--================================================================\n--  Assigns a value to the specified grid (not frame) coordinates. The 'pen'\n--  parameter has to be a DFHack 'pen' table or object.\n--\nfunction Grid:set (x, y, pen)\n  if x \u003c 0 or x \u003e= self.width then\n\terror (\"Grid:set error: x out of bounds \" .. tostring (x) .. \" vs 0 - \" .. tostring (self.width - 1))\n\treturn\n    \n  elseif y \u003c 0 or y \u003e= self.height then\n\terror (\"Grid:set error: y out of bounds \" .. tostring (y) .. \" vs 0 - \" .. tostring (self.height - 1))\n\treturn\n  end\n\n  self.grid:set_tile (x, y, pen)  \nend\n\n--================================================================\n--  Returns the data at position x, y in the grid.\n--\nfunction Grid:get (x, y)\n  if x \u003c 0 or x \u003e= self.width then\n\terror (\"Grid:set error: x out of bounds \" .. tostring (x) .. \" vs 0 - \" .. tostring (self.width - 1))\n\treturn\n    \n  elseif y \u003c 0 or y \u003e= self.height then\n\terror (\"Grid:set error: y out of bounds \" .. tostring (y) .. \" vs 0 - \" .. tostring (self.height - 1))\n\treturn\n  else\n    return self.grid:get_tile (x, y)\n  end\nend\n\n--================================================================\n--  Renders the contents within the viewport into the frame.\n--\nfunction Grid:onRenderBody (dc)\n  self.grid:draw (self.frame.l,\n                  self.frame.t,\n\t\t\t\t  self.viewport.x2 - self.viewport.x1 + 1,\n\t\t\t\t  self.viewport.y2 - self.viewport.y1 + 1,\n\t\t\t\t  self.viewport.x1,\n\t\t\t\t  self.viewport.y1)\nend\n\nEdit: Updated the code with a version of pan that actually seems to work when tested...","files":null}]}