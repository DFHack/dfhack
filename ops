{"version":1,"ops":[{"type":5,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1439433191,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDM4MTAwMzY0Ng=="},"added":["documentation"],"removed":[]},{"type":3,"author":{"id":"e77d0a5f059ed8eaaa1afef6624480d02a2f025a"},"timestamp":1439584248,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDEzMTIzMjExOQ==","github-url":"https://github.com/DFHack/dfhack/issues/670#issuecomment-131232119"},"message":"A lot of internal commands aren't listed, so I'd like to keep this open.","files":null},{"type":3,"author":{"id":"f7b5a7930d0e1264ae1e4a774b03a7e78c2b7858"},"timestamp":1439608119,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDEzMTI4NTExMg==","github-url":"https://github.com/DFHack/dfhack/issues/670#issuecomment-131285112"},"message":"It occurs to me that #667, including 3rd party scripts, is going to cause some documentation headaches too.  We probably want to include a link to their documentation in the main readme, if not the full description of each script.","files":null},{"type":3,"author":{"id":"f7b5a7930d0e1264ae1e4a774b03a7e78c2b7858"},"timestamp":1439868138,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDEzMjA1NTc2MQ==","github-url":"https://github.com/DFHack/dfhack/issues/670#issuecomment-132055761"},"message":"Follow #674, all scripts in the general and fix/\\* directories are documented in the readme, and the existence of `devel/*` is noted.  It doesn't completely resolve the associated issue - `gui/*` scripts, plugins, and builtin commands still need to be checked.  Someone should also decide to what extent the `modtools/*` should be documented.\n\nI'd be happy to handle the gui scripts in a separate pull request as it would involve substantial changes to the structure of the readme and I'd want some more review. Plugin documentation is similarly scattered, and could be (mostly, I'm not fluent in cpp) handled at the same time. Someone else would have to handle builtin commands.","files":null},{"type":3,"author":{"id":"be523fe0f95fc478bda36c722e6f106f8f7a41b5"},"timestamp":1441376435,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDEzNzc0ODkxOA==","github-url":"https://github.com/DFHack/dfhack/issues/670#issuecomment-137748918"},"message":"Manually checking each and every script/plugin would take a long time and it's monotonous enough that we're likely to make mistakes if we do it all at once and if we don't do it all at once it's easy to miss things. Maybe we should include a temporary \"documentation confirmation todo list\" file and manually check at least a handful of them every so often and cross them off as we do so it's easier to make and share progress.\n\nThe current system is basically just waiting for someone to complain about a hole in the docs then filling it, which is a bad way of doing things.","files":null},{"type":3,"author":{"id":"f7b5a7930d0e1264ae1e4a774b03a7e78c2b7858"},"timestamp":1441411577,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDEzNzg4MzgyNQ==","github-url":"https://github.com/DFHack/dfhack/issues/670#issuecomment-137883825"},"message":"Hmmm.  We may want to re-organise the Readme, since plugins and some scripts are scattered all over, and it can be hard to find what you're after.  Would functional prefixes/directories for plugins (as scripts are _meant_ to use - that needs to be audited) make sense?\n\nEither way, it should be fairly easy to write a linter script that checks every script (and plugin?) source file has a corresponding heading in the readme.","files":null},{"type":3,"author":{"id":"be523fe0f95fc478bda36c722e6f106f8f7a41b5"},"timestamp":1441415384,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDEzNzg5MDY3OQ==","github-url":"https://github.com/DFHack/dfhack/issues/670#issuecomment-137890679"},"message":"Yeah, that would help.","files":null},{"type":3,"author":{"id":"f7b5a7930d0e1264ae1e4a774b03a7e78c2b7858"},"timestamp":1442311356,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE0MDM0Mjg2OA==","github-url":"https://github.com/DFHack/dfhack/issues/670#issuecomment-140342868"},"message":"#667 has been merged - this is good, but will make documentation somewhat more complicated.  I plan to look into options for better tooling eventually, but should get to the doc-checker script a little sooner.\n\nPolicy changes I think we should consider in the short term:\n1. Require all script and plugin filenames to appear in the readme (the above doc-checker)\n2. Remove old alias commands and obsolete tools  (eg `digvx` - on both counts) \n3. Reorganise the readme\n   - By use-case or by tool type, not the current mixture\n   - To cleanly separate core functions and optional scripts or plugins\n\nFinally, here's a idea as to where might want to end up:\n- The readme file looks [more like this](https://opensource.com/business/15/6/template-starting-project-documentation), and documentation for tools is split out.\n- All scripts and plugins must contain their own documentation, which is accessible through a built in help system reminiscent of man pages.  This also helps with #667.\n- Use something like [Sphinx](http://sphinx-doc.org/) to generate comprehensive static documentation for tools\n- As well as documenting how to contribute, some examples of how to approach different kinds of tasks.  Eg 'DFHack for beginners', 'for modders', for cheaters, adventurers, builders, historians, hackers, etc. [See this article](https://opensource.com/business/15/5/write-better-docs#types-of-docs); there are obvious differences but we probably want to cover all the major doc types in seperate places rather than the readme trying to do everything.","files":null},{"type":2,"author":{"id":"f7b5a7930d0e1264ae1e4a774b03a7e78c2b7858"},"timestamp":1442311613,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50NDA5NjIwNjk0"},"title":"Improve project structure; ensure documentation is clear and complete","was":"Improve project structure; ensure documentation is clear and complete"},{"type":3,"author":{"id":"88b79c31fdfd52952dafcabb16168259734368cc"},"timestamp":1442314245,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE0MDM1MTI2NQ==","github-url":"https://github.com/DFHack/dfhack/issues/670#issuecomment-140351265"},"message":"Might as well note that there is such a thing as df-structures. Most often asked thing is how everything there works (i mean the usage not updating part) and the answer usually is just try using gm-editor or lua or looking in headers. We might want to make at least a short tutorial/readme for beginners to get started.","files":null},{"type":3,"author":{"id":"c1566abe3d2bcce0ca1ce2256f1162ee88285b53"},"timestamp":1442372032,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE0MDYxMDIzMg==","github-url":"https://github.com/DFHack/dfhack/issues/670#issuecomment-140610232"},"message":"Yeah, I didn't know how handy just looking through the df-structures files could be despite having switched gm-editor to pull up df.global instead of the no target qerror line. Naturally with appropriate \"please don't change stuff in here too much without knowing what it is and what it should do\" type warnings.","files":null},{"type":3,"author":{"id":"e1d61ea4e3466e1a152020720e73ff20fd606343"},"timestamp":1442934144,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE0MjMxNTQ2Nw==","github-url":"https://github.com/DFHack/dfhack/issues/670#issuecomment-142315467"},"message":"I agree with pointing out the existence of df-structures, and it would be great if there was some beginning documentation explaining the overall structure of the project. Everything started to fall into place once I stumbled on dfstructures, but it's still pretty daunting to pick it all apart.","files":null},{"type":3,"author":{"id":"f7b5a7930d0e1264ae1e4a774b03a7e78c2b7858"},"timestamp":1442962608,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE0MjQ0NDE5Mg==","github-url":"https://github.com/DFHack/dfhack/issues/670#issuecomment-142444192"},"message":"#693 adds df-structures to the `Contributing.rst` doc, for pretty much this reason.  I'd love any other feedback about documentation there.","files":null},{"type":3,"author":{"id":"f7b5a7930d0e1264ae1e4a774b03a7e78c2b7858"},"timestamp":1443168249,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE0MzE1NDM0Ng==","github-url":"https://github.com/DFHack/dfhack/issues/670#issuecomment-143154346"},"message":"OK, #697 basically sorts out the documentation for now; [see it here](http://peridexiserrant.neocities.org).  There are still three problems with the docs, each of which could probably have their own issue opened as they might be addressed by different people.\n1. Many builtin commands are not documented.  The docs will need to be restructured, or a file added to fix this.  Requires someone familiar with the builtin commands and/or fluent in C++\n2. We need some coherent way of categorising plugins. I would suggest splitting them into namespace-like folders as has been done to scripts, starting with the exact same set of categories - we can always add more later.\n3. It would be really nice to use autodoc, where the documentation for each script or plugin is stored in the source file for that command.  This could and should be integrated with the help system, so there is a single source for information about each tool.  May also be related to `ls` output.\n\nRandom other thoughts...\n- Once we have everything else stable - even if not final - adding travis checks for documentation would be nice.\n- Sphinx supports cpp files natively, so someone fluent in cpp can probably do a lot with autodoc for the plugins and builtins.  That's not me though.\n- The lack of autodoc support for ruby and lua [can be worked around nicely.](https://github.com/PeridexisErrant/dfhack/commit/8306fc07e776848ca602306f796c9e65bfd24dab)  I'm happy to do the grunt work after someone sets up a system and/or standard that works with `help scriptname` - it could just parse the file and spit out the lines between the given markers, for example.\n- There's a lot of overlap in the functionality of some plugins and scripts; adding internal links has made this more obvious.  For example the `treefarm` plugin and `autochop` (part of `getplants`), `forceequip` and `modtools/equip-item`, or `autolabor`, `autohauler`, and `autolabor-artisans`.  I feel we should try to combine such tools where practical, turn mostly-duplicated tools into one with optional arguments, and deprecate plugins in favour of scripts where practical.  This is a big job though, and can be done separately from the documentation issues (before or after).\n\nI would consider this issue closed after (1) and (2) above are done, and open new and better-defined issues for the remaining areas of work I've listed.","files":null},{"type":3,"author":{"id":"88b79c31fdfd52952dafcabb16168259734368cc"},"timestamp":1443175168,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE0MzE3NjMwMQ==","github-url":"https://github.com/DFHack/dfhack/issues/670#issuecomment-143176301"},"message":"Don't have the time (currently) to look over if it was mentioned or not but we could use lua's flexible string definition to allow for integrated doc strings e.g. \"local x=[===[\" both assigns the multiline string to x and starts a docstring.","files":null},{"type":3,"author":{"id":"f7b5a7930d0e1264ae1e4a774b03a7e78c2b7858"},"timestamp":1443232531,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE0MzM5MDY5MQ==","github-url":"https://github.com/DFHack/dfhack/issues/670#issuecomment-143390691"},"message":"Is there some more general standard for file-level docstrings in Lua?  All I've been able to find is [this](https://stackoverflow.com/questions/10902079/lua-reflection-function-parameters-and-docstrings) and [this](http://lua-users.org/wiki/DecoratorsAndDocstrings).\n\nHere's my proposed syntax in Lua:\n\n```\n__doc__ = [[\n.. _begin-doc\n\n.. _scripts/filename:\n\nfilename\n========\nFull documentation for the script, examples, ect; all wrapped\nto 72 characters to display in the terminal.  When in the terminal,\ndisplay all lines of __doc__ after removing lines beginning \".. _\"\n(link targets, or without the \":\" comments used as markers), along with leading\nand trailing blank lines.  This matches the content of the built html.\n\n.. _end-doc\n]]\n```\n\nThis can then be pulled into the actual documentation file with the rst directive:\n\n```\n.. include: path/to/script.lua\n   :start-after: _begin-doc\n   :end-before: .. _end-doc\n```\n\nI'm flexible on the exact markup for a multiline docstring, since I don't know what the standards are or what can be made to work with the built in help system - and it's certainly a good idea to enhance that and follow standards.  On the rst end of things, the `.. include:` directive is just pulling lines from a text file, and keeping those between the specified markers.\n\nWe could also use language-specific markers, for Lua `:start-after: __doc__ = [===[` and `:end-before: ]===]`).  This is more concise and forces exactly consistent style, at the cost of requiring a different include spec in the rst document for Ruby and Lua scripts.  I think this trade off is absolutely worth it (and easy to check or generate correct text with a Python script), but I'll leave the decision to you.","files":null},{"type":3,"author":{"id":"88b79c31fdfd52952dafcabb16168259734368cc"},"timestamp":1443532663,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE0NDA1NTgyMA==","github-url":"https://github.com/DFHack/dfhack/issues/670#issuecomment-144055820"},"message":"I'm totally for language-specific markers. Actually i would hate it if there was no and we needed to work around that (e.g. \"[=[/**\") \nFor lua file level docstrings i think it's unnecessary to have anything more complicated than a special \"one line comment mark\" (e.g. \"--\u003e\") and have sphinx parse it (and hopefully link to the e.g. function that follows it to extract parameters etc? like doxygen can?)\nThose examples show how to implement lua docstrings that can be accessed from lua. We will not have that because usually you (at least I) prefer browsing lua_api vs opening df and typing into lua console (which might be already busy doing something i'm looking api for).","files":null},{"type":3,"author":{"id":"f7b5a7930d0e1264ae1e4a774b03a7e78c2b7858"},"timestamp":1443706250,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE0NDcyNjUzNg==","github-url":"https://github.com/DFHack/dfhack/issues/670#issuecomment-144726536"},"message":"I feel that we've made a lot of progress and now have a decent sense of what needs to be done.  Unless anyone objects, I'll close this and open issues for more concrete work:\n- Categorise and deduplicate plugins; see above for detail.\n- Ensure builtin commands are documented.\n- Use Sphinx to generate docs for cpp code (core and plugins); should be fairly automatic.\n- An ongoing checklist issue for specific topics that should be documented but aren't.\n- Getting hosting completely sorted out.  Readthedocs.org is as simple as enabling the corresponding Github webhook, then on that site setting which branches to build (and which are the default docs).  I'd be happy to sort this out given the required permissions; I've recently done so [here](https://df-walkthrough.rtfd.org).\n\nAdditionally, I plan to make a pull request in the next few days to cover #703, documentation linting, and move docs building from cmake to a script which can be called by users with fewer dependencies (and by cmake, ofc).","files":null},{"type":4,"author":{"id":"f7b5a7930d0e1264ae1e4a774b03a7e78c2b7858"},"timestamp":1446686711,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50NDU1MjIxNTI4"},"status":2}]}